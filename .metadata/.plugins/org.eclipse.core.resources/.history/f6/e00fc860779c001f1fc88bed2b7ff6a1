#include "stm32f4xx_hal.h"
#include <os.h>
#include <stdlib.h>
#include <stdbool.h>
#include "stm32f4_discovery.h"

#define INITIAL_TASK_PRIO                    5u
#define INITIAL_TASK_STK_SIZE          		 (256u)

static OS_TCB                   initialTaskTCB;
static CPU_STK                  initialTaskStk[INITIAL_TASK_STK_SIZE];

static void initialTask (void *p_arg);


int main(void)
{
    OS_ERR  err;

    HAL_Init();

    SystemClock_Config();

    OSInit(&err);

    OSTaskCreate(    (OS_TCB       *)&initialTaskTCB,
                     (CPU_CHAR     *)"Initial Task",
                     (OS_TASK_PTR   )initialTask,
                     (void         *)0u,
                     (OS_PRIO       )INITIAL_TASK_PRIO,
                     (CPU_STK      *)&initialTaskStk[0u],
                     (CPU_STK_SIZE  )initialTaskStk[INITIAL_TASK_STK_SIZE / 10u],
                     (CPU_STK_SIZE  )INITIAL_TASK_STK_SIZE,
                     (OS_MSG_QTY    )0u,
                     (OS_TICK       )0u,
                     (void         *)0u,
                     (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                     (OS_ERR       *)&err);

    OSStart(&err);

    while (DEF_TRUE) {

    }

    return 0;
}



static void initialTask (void *p_arg)
{
    OS_ERR  err;

    (void)p_arg;

    BSP_LED_Init(LED6);

    while (DEF_TRUE) {
        BSP_LED_Toggle(LED6);
        OSTimeDly(200u, OS_OPT_TIME_PERIODIC , &err);

    }
}
