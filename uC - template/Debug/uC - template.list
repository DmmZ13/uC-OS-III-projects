
uC - template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800473c  0800473c  0000573c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047cc  080047cc  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  080047cc  080047cc  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047cc  080047cc  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047cc  080047cc  000057cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047d0  080047d0  000057d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080047d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006014  2**0
                  CONTENTS
 10 .bss          00001700  20000014  20000014  00006014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001714  20001714  00006014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010564  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c9c  00000000  00000000  000165a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  00019248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006f2  00000000  00000000  00019c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001914c  00000000  00000000  0001a2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db0a  00000000  00000000  0003343e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a80e0  00000000  00000000  00040f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e9028  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002218  00000000  00000000  000e906c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000fc  00000000  00000000  000eb284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004724 	.word	0x08004724

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004724 	.word	0x08004724

080001c8 <CPU_IntDis>:
@               void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 80001c8:	b672      	cpsid	i
        BX      LR
 80001ca:	4770      	bx	lr

080001cc <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 80001cc:	b662      	cpsie	i
        BX      LR
 80001ce:	4770      	bx	lr

080001d0 <CPU_SR_Save>:
@                       CPSIE i
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 80001d0:	b672      	cpsid	i
        PUSH   {R1}
 80001d2:	b402      	push	{r1}
        MRS     R1, BASEPRI
 80001d4:	f3ef 8111 	mrs	r1, BASEPRI
        MSR     BASEPRI, R0
 80001d8:	f380 8811 	msr	BASEPRI, r0
        DSB
 80001dc:	f3bf 8f4f 	dsb	sy
        ISB
 80001e0:	f3bf 8f6f 	isb	sy
        MOV     R0, R1
 80001e4:	4608      	mov	r0, r1
        POP    {R1}
 80001e6:	bc02      	pop	{r1}
        CPSIE   I
 80001e8:	b662      	cpsie	i
        BX      LR
 80001ea:	4770      	bx	lr

080001ec <CPU_SR_Restore>:


.thumb_func
CPU_SR_Restore:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 80001ec:	b672      	cpsid	i
        MSR     BASEPRI, R0
 80001ee:	f380 8811 	msr	BASEPRI, r0
        DSB
 80001f2:	f3bf 8f4f 	dsb	sy
        ISB
 80001f6:	f3bf 8f6f 	isb	sy
        CPSIE   I
 80001fa:	b662      	cpsie	i
        BX      LR
 80001fc:	4770      	bx	lr

080001fe <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 80001fe:	bf30      	wfi
        BX      LR
 8000200:	4770      	bx	lr

08000202 <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 8000202:	bf20      	wfe
        BX      LR
 8000204:	4770      	bx	lr

08000206 <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 8000206:	fab0 f080 	clz	r0, r0
        BX      LR
 800020a:	4770      	bx	lr

0800020c <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 800020c:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000210:	fab0 f080 	clz	r0, r0
        BX      LR
 8000214:	4770      	bx	lr

08000216 <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 8000216:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 800021a:	4770      	bx	lr

0800021c <OSStartHighRdy>:
@              h) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 800021c:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 800021e:	f64e 5022 	movw	r0, #60706	@ 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 8000222:	f2ce 0000 	movt	r0, #57344	@ 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 8000226:	f240 01ff 	movw	r1, #255	@ 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 800022a:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 800022e:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 8000230:	2000      	movs	r0, #0
    MSR     PSP, R0
 8000232:	f380 8809 	msr	PSP, r0

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 8000236:	f640 2058 	movw	r0, #2648	@ 0xa58
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 800023a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    LDR     R1, [R0]
 800023e:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 8000240:	f381 8808 	msr	MSP, r1

    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 8000244:	f000 fb6a 	bl	800091c <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000248:	f241 3048 	movw	r0, #4936	@ 0x1348
    MOVT    R0, #:upper16:OSPrioCur
 800024c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000250:	f241 3149 	movw	r1, #4937	@ 0x1349
    MOVT    R1, #:upper16:OSPrioHighRdy
 8000254:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 8000258:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 800025a:	7002      	strb	r2, [r0, #0]

    MOVW    R0, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr = OSTCBHighRdyPtr;
 800025c:	f241 7008 	movw	r0, #5896	@ 0x1708
    MOVT    R0, #:upper16:OSTCBCurPtr
 8000260:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdyPtr
 8000264:	f241 710c 	movw	r1, #5900	@ 0x170c
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 8000268:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 800026c:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 800026e:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 8000270:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000272:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 8000276:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 800027a:	f040 0002 	orr.w	r0, r0, #2
    BIC     R0, R0, #4                                          @ Clear FPCA bit to indicate FPU is not in use
 800027e:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, R0
 8000282:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 8000286:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11, LR}                                  @ Restore r4-11, lr from new process stack
 800028a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 800028e:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000290:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 8000294:	bc06      	pop	{r1, r2}
    CPSIE    I
 8000296:	b662      	cpsie	i
    BX       R1
 8000298:	4708      	bx	r1

0800029a <OSCtxSw>:

.thumb_func
OSCtxSw:
.thumb_func
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800029a:	4825      	ldr	r0, [pc, #148]	@ (8000330 <OS_CPU_PendSVHandler+0x8c>)
    LDR     R1, =NVIC_PENDSVSET
 800029c:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
    STR     R1, [R0]
 80002a0:	6001      	str	r1, [r0, #0]
    BX      LR
 80002a2:	4770      	bx	lr

080002a4 <OS_CPU_PendSVHandler>:
@                  CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 80002a4:	b672      	cpsid	i
    MOVW    R2, #:lower16:OS_KA_BASEPRI_Boundary                @ Set BASEPRI priority level required for exception preemption
 80002a6:	f640 225c 	movw	r2, #2652	@ 0xa5c
    MOVT    R2, #:upper16:OS_KA_BASEPRI_Boundary
 80002aa:	f2c2 0200 	movt	r2, #8192	@ 0x2000
    LDR     R1, [R2]
 80002ae:	6811      	ldr	r1, [r2, #0]
    MSR     BASEPRI, R1
 80002b0:	f381 8811 	msr	BASEPRI, r1
    DSB
 80002b4:	f3bf 8f4f 	dsb	sy
    ISB
 80002b8:	f3bf 8f6f 	isb	sy
    CPSIE   I
 80002bc:	b662      	cpsie	i

    MRS     R0, PSP                                             @ PSP is process stack pointer
 80002be:	f3ef 8009 	mrs	r0, PSP
#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
                                                                @ Push high vfp registers if the task is using the FPU context
    TST       R14, #0x10
 80002c2:	f01e 0f10 	tst.w	lr, #16
    IT        EQ
 80002c6:	bf08      	it	eq
    VSTMDBEQ  R0!, {S16-S31}
 80002c8:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
#endif

    STMFD   R0!, {R4-R11, R14}                                  @ Save remaining regs r4-11, R14 on process stack
 80002cc:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    MOVW    R5, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr->StkPtr = SP;
 80002d0:	f241 7508 	movw	r5, #5896	@ 0x1708
    MOVT    R5, #:upper16:OSTCBCurPtr
 80002d4:	f2c2 0500 	movt	r5, #8192	@ 0x2000
    LDR     R1, [R5]
 80002d8:	6829      	ldr	r1, [r5, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 80002da:	6008      	str	r0, [r1, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 80002dc:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 80002de:	f000 fb1d 	bl	800091c <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 80002e2:	f241 3048 	movw	r0, #4936	@ 0x1348
    MOVT    R0, #:upper16:OSPrioCur
 80002e6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 80002ea:	f241 3149 	movw	r1, #4937	@ 0x1349
    MOVT    R1, #:upper16:OSPrioHighRdy
 80002ee:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 80002f2:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002f4:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdyPtr                       @ OSTCBCurPtr = OSTCBHighRdyPtr;
 80002f6:	f241 710c 	movw	r1, #5900	@ 0x170c
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 80002fa:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 80002fe:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 8000300:	602a      	str	r2, [r5, #0]

    ORR     LR,  R4, #0x04                                      @ Ensure exception return uses process stack
 8000302:	f044 0e04 	orr.w	lr, r4, #4
    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 8000306:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11, R14}                                  @ Restore r4-11, R14 from new process stack
 8000308:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
                                                                @ Pop the high vfp registers if the next task is using the FPU context
    TST       R14, #0x10
 800030c:	f01e 0f10 	tst.w	lr, #16
    IT        EQ
 8000310:	bf08      	it	eq
    VLDMIAEQ  R0!, {S16-S31}
 8000312:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
#endif

    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000316:	f380 8809 	msr	PSP, r0

    MOV     R2, #0                                              @ Restore BASEPRI priority level to 0
 800031a:	f04f 0200 	mov.w	r2, #0
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 800031e:	b672      	cpsid	i
    MSR     BASEPRI, R2
 8000320:	f382 8811 	msr	BASEPRI, r2
    DSB
 8000324:	f3bf 8f4f 	dsb	sy
    ISB
 8000328:	f3bf 8f6f 	isb	sy
    CPSIE   I
 800032c:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 800032e:	4770      	bx	lr
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000330:	e000ed04 	.word	0xe000ed04

08000334 <main>:
static void Task2 (void *p_arg);
static void SystemClkCfg (void);


int main(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b08c      	sub	sp, #48	@ 0x30
 8000338:	af0a      	add	r7, sp, #40	@ 0x28
    OS_ERR  err;

    HAL_Init();
 800033a:	f003 fa75 	bl	8003828 <HAL_Init>

    SystemClkCfg();
 800033e:	f000 f8eb 	bl	8000518 <SystemClkCfg>

    OSInit(&err);
 8000342:	1dbb      	adds	r3, r7, #6
 8000344:	4618      	mov	r0, r3
 8000346:	f000 fb4d 	bl	80009e4 <OSInit>

    OSMutexCreate (		 (OS_MUTEX  *)&Mutex,
 800034a:	1dbb      	adds	r3, r7, #6
 800034c:	461a      	mov	r2, r3
 800034e:	4915      	ldr	r1, [pc, #84]	@ (80003a4 <main+0x70>)
 8000350:	4815      	ldr	r0, [pc, #84]	@ (80003a8 <main+0x74>)
 8000352:	f001 fa49 	bl	80017e8 <OSMutexCreate>
                         (CPU_CHAR  *)"Mutex",
                         (OS_ERR    *)&err);

    OSQCreate 	(	 (OS_Q        *)&Q,
 8000356:	1dbb      	adds	r3, r7, #6
 8000358:	220a      	movs	r2, #10
 800035a:	4914      	ldr	r1, [pc, #80]	@ (80003ac <main+0x78>)
 800035c:	4814      	ldr	r0, [pc, #80]	@ (80003b0 <main+0x7c>)
 800035e:	f001 fd71 	bl	8001e44 <OSQCreate>
                     (CPU_CHAR     *)"Task Start",
                     (OS_TASK_PTR   )TaskStart,
                     (void         *)0u,
                     (OS_PRIO       )TASK_START_PRIO,
                     (CPU_STK      *)&TaskStart_Stk[0u],
                     (CPU_STK_SIZE  )TaskStart_Stk[TASK_START_STK_SIZE  / 10u],
 8000362:	4b14      	ldr	r3, [pc, #80]	@ (80003b4 <main+0x80>)
 8000364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    OSTaskCreate(    (OS_TCB       *)&TaskStartTCB,
 8000366:	1dba      	adds	r2, r7, #6
 8000368:	9208      	str	r2, [sp, #32]
 800036a:	2203      	movs	r2, #3
 800036c:	9207      	str	r2, [sp, #28]
 800036e:	2200      	movs	r2, #0
 8000370:	9206      	str	r2, [sp, #24]
 8000372:	2200      	movs	r2, #0
 8000374:	9205      	str	r2, [sp, #20]
 8000376:	2200      	movs	r2, #0
 8000378:	9204      	str	r2, [sp, #16]
 800037a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800037e:	9203      	str	r2, [sp, #12]
 8000380:	9302      	str	r3, [sp, #8]
 8000382:	4b0c      	ldr	r3, [pc, #48]	@ (80003b4 <main+0x80>)
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	230f      	movs	r3, #15
 8000388:	9300      	str	r3, [sp, #0]
 800038a:	2300      	movs	r3, #0
 800038c:	4a0a      	ldr	r2, [pc, #40]	@ (80003b8 <main+0x84>)
 800038e:	490b      	ldr	r1, [pc, #44]	@ (80003bc <main+0x88>)
 8000390:	480b      	ldr	r0, [pc, #44]	@ (80003c0 <main+0x8c>)
 8000392:	f002 f8c5 	bl	8002520 <OSTaskCreate>
                     (OS_TICK       )0u,
                     (void         *)0u,
                     (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                     (OS_ERR       *)&err);

    OSStart(&err);
 8000396:	1dbb      	adds	r3, r7, #6
 8000398:	4618      	mov	r0, r3
 800039a:	f000 fccf 	bl	8000d3c <OSStart>

    while (DEF_TRUE) {
 800039e:	bf00      	nop
 80003a0:	e7fd      	b.n	800039e <main+0x6a>
 80003a2:	bf00      	nop
 80003a4:	0800473c 	.word	0x0800473c
 80003a8:	20000228 	.word	0x20000228
 80003ac:	08004744 	.word	0x08004744
 80003b0:	20000240 	.word	0x20000240
 80003b4:	20000258 	.word	0x20000258
 80003b8:	080003c5 	.word	0x080003c5
 80003bc:	0800474c 	.word	0x0800474c
 80003c0:	20000030 	.word	0x20000030

080003c4 <TaskStart>:
}



static void TaskStart (void *p_arg)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08e      	sub	sp, #56	@ 0x38
 80003c8:	af0a      	add	r7, sp, #40	@ 0x28
 80003ca:	6078      	str	r0, [r7, #4]
                     (CPU_CHAR     *)"Task 1",
                     (OS_TASK_PTR   )Task1,
                     (void         *)0u,
                     (OS_PRIO       )TASK1_PRIO,
                     (CPU_STK      *)&Task1_Stk[0u],
                     (CPU_STK_SIZE  )Task1_Stk[TASK1_STK_SIZE  / 10u],
 80003cc:	4b21      	ldr	r3, [pc, #132]	@ (8000454 <TaskStart+0x90>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    OSTaskCreate(    (OS_TCB       *)&Task1_TCB,
 80003d0:	f107 020e 	add.w	r2, r7, #14
 80003d4:	9208      	str	r2, [sp, #32]
 80003d6:	2203      	movs	r2, #3
 80003d8:	9207      	str	r2, [sp, #28]
 80003da:	2200      	movs	r2, #0
 80003dc:	9206      	str	r2, [sp, #24]
 80003de:	2200      	movs	r2, #0
 80003e0:	9205      	str	r2, [sp, #20]
 80003e2:	2200      	movs	r2, #0
 80003e4:	9204      	str	r2, [sp, #16]
 80003e6:	2280      	movs	r2, #128	@ 0x80
 80003e8:	9203      	str	r2, [sp, #12]
 80003ea:	9302      	str	r3, [sp, #8]
 80003ec:	4b19      	ldr	r3, [pc, #100]	@ (8000454 <TaskStart+0x90>)
 80003ee:	9301      	str	r3, [sp, #4]
 80003f0:	2305      	movs	r3, #5
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2300      	movs	r3, #0
 80003f6:	4a18      	ldr	r2, [pc, #96]	@ (8000458 <TaskStart+0x94>)
 80003f8:	4918      	ldr	r1, [pc, #96]	@ (800045c <TaskStart+0x98>)
 80003fa:	4819      	ldr	r0, [pc, #100]	@ (8000460 <TaskStart+0x9c>)
 80003fc:	f002 f890 	bl	8002520 <OSTaskCreate>
                     (CPU_CHAR     *)"Task 2",
                     (OS_TASK_PTR   )Task2,
                     (void         *)0u,
                     (OS_PRIO       )TASK2_PRIO,
                     (CPU_STK      *)&Task2_Stk[0u],
                     (CPU_STK_SIZE  )Task2_Stk[TASK2_STK_SIZE  / 10u],
 8000400:	4b18      	ldr	r3, [pc, #96]	@ (8000464 <TaskStart+0xa0>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    OSTaskCreate(    (OS_TCB       *)&Task2_TCB,
 8000404:	f107 020e 	add.w	r2, r7, #14
 8000408:	9208      	str	r2, [sp, #32]
 800040a:	2203      	movs	r2, #3
 800040c:	9207      	str	r2, [sp, #28]
 800040e:	2200      	movs	r2, #0
 8000410:	9206      	str	r2, [sp, #24]
 8000412:	2200      	movs	r2, #0
 8000414:	9205      	str	r2, [sp, #20]
 8000416:	2200      	movs	r2, #0
 8000418:	9204      	str	r2, [sp, #16]
 800041a:	2280      	movs	r2, #128	@ 0x80
 800041c:	9203      	str	r2, [sp, #12]
 800041e:	9302      	str	r3, [sp, #8]
 8000420:	4b10      	ldr	r3, [pc, #64]	@ (8000464 <TaskStart+0xa0>)
 8000422:	9301      	str	r3, [sp, #4]
 8000424:	2306      	movs	r3, #6
 8000426:	9300      	str	r3, [sp, #0]
 8000428:	2300      	movs	r3, #0
 800042a:	4a0f      	ldr	r2, [pc, #60]	@ (8000468 <TaskStart+0xa4>)
 800042c:	490f      	ldr	r1, [pc, #60]	@ (800046c <TaskStart+0xa8>)
 800042e:	4810      	ldr	r0, [pc, #64]	@ (8000470 <TaskStart+0xac>)
 8000430:	f002 f876 	bl	8002520 <OSTaskCreate>
                     (OS_TICK       )0u,
                     (void         *)0u,
                     (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                     (OS_ERR       *)&err);

    BSP_LED_Init(LED6);
 8000434:	2003      	movs	r0, #3
 8000436:	f000 f8d1 	bl	80005dc <BSP_LED_Init>

    while (DEF_TRUE) {
        BSP_LED_Toggle(LED6);
 800043a:	2003      	movs	r0, #3
 800043c:	f000 f946 	bl	80006cc <BSP_LED_Toggle>
//        OSTimeDlyHMSM(0u, 0u, 0u, 500u, OS_OPT_TIME_PERIODIC , &err);
        OSTimeDly (		 (OS_TICK   )200,
 8000440:	f107 030e 	add.w	r3, r7, #14
 8000444:	461a      	mov	r2, r3
 8000446:	2108      	movs	r1, #8
 8000448:	20c8      	movs	r0, #200	@ 0xc8
 800044a:	f002 fe4d 	bl	80030e8 <OSTimeDly>
        BSP_LED_Toggle(LED6);
 800044e:	bf00      	nop
 8000450:	e7f3      	b.n	800043a <TaskStart+0x76>
 8000452:	bf00      	nop
 8000454:	20000658 	.word	0x20000658
 8000458:	08000475 	.word	0x08000475
 800045c:	08004758 	.word	0x08004758
 8000460:	200000d8 	.word	0x200000d8
 8000464:	20000858 	.word	0x20000858
 8000468:	080004d1 	.word	0x080004d1
 800046c:	08004760 	.word	0x08004760
 8000470:	20000180 	.word	0x20000180

08000474 <Task1>:
    }
}


static void Task1 (void *p_arg)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af02      	add	r7, sp, #8
 800047a:	6078      	str	r0, [r7, #4]
    OS_ERR  err;
    CPU_TS ts;
    CPU_INT32U message = 100;
 800047c:	2364      	movs	r3, #100	@ 0x64
 800047e:	617b      	str	r3, [r7, #20]

    (void)p_arg;

    while (DEF_TRUE) {
        OSTimeDly (		 (OS_TICK   )200,
 8000480:	f107 0312 	add.w	r3, r7, #18
 8000484:	461a      	mov	r2, r3
 8000486:	2108      	movs	r1, #8
 8000488:	20c8      	movs	r0, #200	@ 0xc8
 800048a:	f002 fe2d 	bl	80030e8 <OSTimeDly>
                         (OS_OPT    )OS_OPT_TIME_PERIODIC,
                         (OS_ERR   *)&err);
        OSQPost (	   (OS_Q         *)&Q,
 800048e:	6979      	ldr	r1, [r7, #20]
 8000490:	f107 0312 	add.w	r3, r7, #18
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	2300      	movs	r3, #0
 8000498:	2204      	movs	r2, #4
 800049a:	480b      	ldr	r0, [pc, #44]	@ (80004c8 <Task1+0x54>)
 800049c:	f001 fe0e 	bl	80020bc <OSQPost>
                       (void         *)message,
                       (OS_MSG_SIZE   )sizeof(void *),
                       (OS_OPT        )OS_OPT_POST_FIFO, //message to the end of the queue
                       (OS_ERR       *)&err);
        OSMutexPend (	   (OS_MUTEX  *)&Mutex,
 80004a0:	f107 020c 	add.w	r2, r7, #12
 80004a4:	f107 0312 	add.w	r3, r7, #18
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	4613      	mov	r3, r2
 80004ac:	2200      	movs	r2, #0
 80004ae:	2100      	movs	r1, #0
 80004b0:	4806      	ldr	r0, [pc, #24]	@ (80004cc <Task1+0x58>)
 80004b2:	f001 f9e1 	bl	8001878 <OSMutexPend>
                           (OS_TICK    )0,
                           (OS_OPT     )OS_OPT_PEND_BLOCKING,
                           (CPU_TS    *)&ts,
                           (OS_ERR    *)&err);
        // Access shared resource
        OSMutexPost (	   (OS_MUTEX  *)&Mutex,
 80004b6:	f107 0312 	add.w	r3, r7, #18
 80004ba:	461a      	mov	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	4803      	ldr	r0, [pc, #12]	@ (80004cc <Task1+0x58>)
 80004c0:	f001 fac6 	bl	8001a50 <OSMutexPost>
        OSTimeDly (		 (OS_TICK   )200,
 80004c4:	bf00      	nop
 80004c6:	e7db      	b.n	8000480 <Task1+0xc>
 80004c8:	20000240 	.word	0x20000240
 80004cc:	20000228 	.word	0x20000228

080004d0 <Task2>:

    }
}

static void Task2 (void *p_arg)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af02      	add	r7, sp, #8
 80004d6:	6078      	str	r0, [r7, #4]
    OS_MSG_SIZE msg_size;
    CPU_TS ts;
    CPU_TS ts_delta;

    p_arg = p_arg;
    BSP_LED_Init(LED3);
 80004d8:	2001      	movs	r0, #1
 80004da:	f000 f87f 	bl	80005dc <BSP_LED_Init>

    while (DEF_TRUE) {
    	message = (CPU_INT32U) OSQPend ( (OS_Q         *)&Q,
 80004de:	f107 020c 	add.w	r2, r7, #12
 80004e2:	f107 030e 	add.w	r3, r7, #14
 80004e6:	9301      	str	r3, [sp, #4]
 80004e8:	f107 0308 	add.w	r3, r7, #8
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	4613      	mov	r3, r2
 80004f0:	2200      	movs	r2, #0
 80004f2:	2100      	movs	r1, #0
 80004f4:	4807      	ldr	r0, [pc, #28]	@ (8000514 <Task2+0x44>)
 80004f6:	f001 fcf5 	bl	8001ee4 <OSQPend>
 80004fa:	4603      	mov	r3, r0
 80004fc:	617b      	str	r3, [r7, #20]
										(OS_TICK       )0, //0 means that the task will wait forever for the message to arrive
										(OS_OPT        )OS_OPT_PEND_BLOCKING,
										(OS_MSG_SIZE  *)&msg_size, //is a pointer to a variable that will receive the size of the message
										(CPU_TS       *)&ts,//is a pointer to a variable that will receive the timestamp of when the message was received, pend aborted or the message queue delete
										(OS_ERR       *)&err);
        ts_delta = OS_TS_GET() - ts; // delta é o tempo entre a obtenção da mensagem e sua recepção
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	425b      	negs	r3, r3
 8000502:	613b      	str	r3, [r7, #16]
        //process message received
        if (message == 100){
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	2b64      	cmp	r3, #100	@ 0x64
 8000508:	d1e9      	bne.n	80004de <Task2+0xe>
        	BSP_LED_Toggle(LED3);
 800050a:	2001      	movs	r0, #1
 800050c:	f000 f8de 	bl	80006cc <BSP_LED_Toggle>
    	message = (CPU_INT32U) OSQPend ( (OS_Q         *)&Q,
 8000510:	e7e5      	b.n	80004de <Task2+0xe>
 8000512:	bf00      	nop
 8000514:	20000240 	.word	0x20000240

08000518 <SystemClkCfg>:




static void SystemClkCfg (void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	@ 0x50
 800051c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct;
    RCC_ClkInitTypeDef RCC_ClkInitStruct;

    HAL_RCC_DeInit();
 800051e:	f004 f839 	bl	8004594 <HAL_RCC_DeInit>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	4b2a      	ldr	r3, [pc, #168]	@ (80005d0 <SystemClkCfg+0xb8>)
 8000528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800052a:	4a29      	ldr	r2, [pc, #164]	@ (80005d0 <SystemClkCfg+0xb8>)
 800052c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000530:	6413      	str	r3, [r2, #64]	@ 0x40
 8000532:	4b27      	ldr	r3, [pc, #156]	@ (80005d0 <SystemClkCfg+0xb8>)
 8000534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	4b24      	ldr	r3, [pc, #144]	@ (80005d4 <SystemClkCfg+0xbc>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a23      	ldr	r2, [pc, #140]	@ (80005d4 <SystemClkCfg+0xbc>)
 8000548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800054c:	6013      	str	r3, [r2, #0]
 800054e:	4b21      	ldr	r3, [pc, #132]	@ (80005d4 <SystemClkCfg+0xbc>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055a:	2301      	movs	r3, #1
 800055c:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055e:	2301      	movs	r3, #1
 8000560:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800056a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 25u;
 800056c:	2319      	movs	r3, #25
 800056e:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 336u;
 8000570:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000574:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = 2u;
 8000576:	2302      	movs	r3, #2
 8000578:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7u;
 800057a:	2307      	movs	r3, #7
 800057c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	4618      	mov	r0, r3
 8000584:	f003 fc5c 	bl	8003e40 <HAL_RCC_OscConfig>
    RCC_ClkInitStruct.ClockType     = RCC_CLOCKTYPE_SYSCLK |
 8000588:	230f      	movs	r3, #15
 800058a:	60fb      	str	r3, [r7, #12]
                                      RCC_CLOCKTYPE_HCLK   |
                                      RCC_CLOCKTYPE_PCLK1  |
                                      RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2302      	movs	r3, #2
 800058e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000594:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000598:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800059a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800059e:	61fb      	str	r3, [r7, #28]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2105      	movs	r1, #5
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 fe60 	bl	800426c <HAL_RCC_ClockConfig>

    if (HAL_GetREVID() == 0x1001)
 80005ac:	f003 f98e 	bl	80038cc <HAL_GetREVID>
 80005b0:	4603      	mov	r3, r0
 80005b2:	f241 0201 	movw	r2, #4097	@ 0x1001
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d105      	bne.n	80005c6 <SystemClkCfg+0xae>
    {
        __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ba:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <SystemClkCfg+0xc0>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a06      	ldr	r2, [pc, #24]	@ (80005d8 <SystemClkCfg+0xc0>)
 80005c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005c4:	6013      	str	r3, [r2, #0]
    }
}
 80005c6:	bf00      	nop
 80005c8:	3750      	adds	r7, #80	@ 0x50
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40007000 	.word	0x40007000
 80005d8:	40023c00 	.word	0x40023c00

080005dc <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08c      	sub	sp, #48	@ 0x30
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d10e      	bne.n	800060a <BSP_LED_Init+0x2e>
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
 80005f0:	4b33      	ldr	r3, [pc, #204]	@ (80006c0 <BSP_LED_Init+0xe4>)
 80005f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f4:	4a32      	ldr	r2, [pc, #200]	@ (80006c0 <BSP_LED_Init+0xe4>)
 80005f6:	f043 0308 	orr.w	r3, r3, #8
 80005fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fc:	4b30      	ldr	r3, [pc, #192]	@ (80006c0 <BSP_LED_Init+0xe4>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000600:	f003 0308 	and.w	r3, r3, #8
 8000604:	61bb      	str	r3, [r7, #24]
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	e034      	b.n	8000674 <BSP_LED_Init+0x98>
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d10e      	bne.n	800062e <BSP_LED_Init+0x52>
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	4b2a      	ldr	r3, [pc, #168]	@ (80006c0 <BSP_LED_Init+0xe4>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000618:	4a29      	ldr	r2, [pc, #164]	@ (80006c0 <BSP_LED_Init+0xe4>)
 800061a:	f043 0308 	orr.w	r3, r3, #8
 800061e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000620:	4b27      	ldr	r3, [pc, #156]	@ (80006c0 <BSP_LED_Init+0xe4>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000624:	f003 0308 	and.w	r3, r3, #8
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	e022      	b.n	8000674 <BSP_LED_Init+0x98>
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b02      	cmp	r3, #2
 8000632:	d10e      	bne.n	8000652 <BSP_LED_Init+0x76>
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <BSP_LED_Init+0xe4>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063c:	4a20      	ldr	r2, [pc, #128]	@ (80006c0 <BSP_LED_Init+0xe4>)
 800063e:	f043 0308 	orr.w	r3, r3, #8
 8000642:	6313      	str	r3, [r2, #48]	@ 0x30
 8000644:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <BSP_LED_Init+0xe4>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000648:	f003 0308 	and.w	r3, r3, #8
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	e010      	b.n	8000674 <BSP_LED_Init+0x98>
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b03      	cmp	r3, #3
 8000656:	d10d      	bne.n	8000674 <BSP_LED_Init+0x98>
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <BSP_LED_Init+0xe4>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000660:	4a17      	ldr	r2, [pc, #92]	@ (80006c0 <BSP_LED_Init+0xe4>)
 8000662:	f043 0308 	orr.w	r3, r3, #8
 8000666:	6313      	str	r3, [r2, #48]	@ 0x30
 8000668:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <BSP_LED_Init+0xe4>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066c:	f003 0308 	and.w	r3, r3, #8
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	4a13      	ldr	r2, [pc, #76]	@ (80006c4 <BSP_LED_Init+0xe8>)
 8000678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000682:	2301      	movs	r3, #1
 8000684:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000686:	2302      	movs	r3, #2
 8000688:	62bb      	str	r3, [r7, #40]	@ 0x28

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4a0e      	ldr	r2, [pc, #56]	@ (80006c8 <BSP_LED_Init+0xec>)
 800068e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000692:	f107 021c 	add.w	r2, r7, #28
 8000696:	4611      	mov	r1, r2
 8000698:	4618      	mov	r0, r3
 800069a:	f003 fa09 	bl	8003ab0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	4a09      	ldr	r2, [pc, #36]	@ (80006c8 <BSP_LED_Init+0xec>)
 80006a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4a06      	ldr	r2, [pc, #24]	@ (80006c4 <BSP_LED_Init+0xe8>)
 80006aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006ae:	2200      	movs	r2, #0
 80006b0:	4619      	mov	r1, r3
 80006b2:	f003 fb99 	bl	8003de8 <HAL_GPIO_WritePin>
}
 80006b6:	bf00      	nop
 80006b8:	3730      	adds	r7, #48	@ 0x30
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	08004768 	.word	0x08004768
 80006c8:	20000000 	.word	0x20000000

080006cc <BSP_LED_Toggle>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	4a07      	ldr	r2, [pc, #28]	@ (80006f8 <BSP_LED_Toggle+0x2c>)
 80006da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	4906      	ldr	r1, [pc, #24]	@ (80006fc <BSP_LED_Toggle+0x30>)
 80006e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006e6:	4619      	mov	r1, r3
 80006e8:	4610      	mov	r0, r2
 80006ea:	f003 fb96 	bl	8003e1a <HAL_GPIO_TogglePin>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000000 	.word	0x20000000
 80006fc:	08004768 	.word	0x08004768

08000700 <OSIdleTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSIdleTaskHook (void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppIdleTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8000704:	4b04      	ldr	r3, [pc, #16]	@ (8000718 <OSIdleTaskHook+0x18>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d002      	beq.n	8000712 <OSIdleTaskHook+0x12>
        (*OS_AppIdleTaskHookPtr)();
 800070c:	4b02      	ldr	r3, [pc, #8]	@ (8000718 <OSIdleTaskHook+0x18>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4798      	blx	r3
    }
#endif
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	2000127c 	.word	0x2000127c

0800071c <OSInitHook>:
*                 b) Set bits ASPEN and LSPEN in FPCCR register.
*********************************************************************************************************
*/

void  OSInitHook (void)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
#if (OS_CPU_ARM_FP_EN > 0u)
    CPU_INT32U   reg_val;
#endif
                                                                /* 8-byte align the ISR stack.                          */
    OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize);
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <OSInitHook+0x4c>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <OSInitHook+0x50>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	4a10      	ldr	r2, [pc, #64]	@ (8000770 <OSInitHook+0x54>)
 8000730:	6013      	str	r3, [r2, #0]
    OS_CPU_ExceptStkBase = (CPU_STK *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 8000732:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <OSInitHook+0x54>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f023 0307 	bic.w	r3, r3, #7
 800073a:	461a      	mov	r2, r3
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <OSInitHook+0x54>)
 800073e:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    reg_val = CPU_REG_FP_FPCCR;                                 /* Check the floating point mode.                       */
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <OSInitHook+0x58>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	607b      	str	r3, [r7, #4]
    if ((reg_val & CPU_REG_FPCCR_LAZY_STK) != CPU_REG_FPCCR_LAZY_STK) {
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800074c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000750:	d001      	beq.n	8000756 <OSInitHook+0x3a>
        while (1u) {                                            /* See Note (1).                                        */
 8000752:	bf00      	nop
 8000754:	e7fd      	b.n	8000752 <OSInitHook+0x36>
            ;
        }
    }
#endif
                                                                /* Set BASEPRI boundary from the configuration.         */
    OS_KA_BASEPRI_Boundary = (CPU_INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <OSInitHook+0x5c>)
 8000758:	2240      	movs	r2, #64	@ 0x40
 800075a:	601a      	str	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	0800477c 	.word	0x0800477c
 800076c:	08004780 	.word	0x08004780
 8000770:	20000a58 	.word	0x20000a58
 8000774:	e000ef34 	.word	0xe000ef34
 8000778:	20000a5c 	.word	0x20000a5c

0800077c <OSStatTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSStatTaskHook (void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppStatTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8000780:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <OSStatTaskHook+0x18>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d002      	beq.n	800078e <OSStatTaskHook+0x12>
        (*OS_AppStatTaskHookPtr)();
 8000788:	4b02      	ldr	r3, [pc, #8]	@ (8000794 <OSStatTaskHook+0x18>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4798      	blx	r3
    }
#endif
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20001280 	.word	0x20001280

08000798 <OSTaskCreateHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskCreateHook (OS_TCB  *p_tcb)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskCreateHookPtr != (OS_APP_HOOK_TCB)0) {
 80007a0:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <OSTaskCreateHook+0x20>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d003      	beq.n	80007b0 <OSTaskCreateHook+0x18>
        (*OS_AppTaskCreateHookPtr)(p_tcb);
 80007a8:	4b03      	ldr	r3, [pc, #12]	@ (80007b8 <OSTaskCreateHook+0x20>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                                /* Prevent compiler warning                             */
#endif
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20001270 	.word	0x20001270

080007bc <OSTaskDelHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskDelHook (OS_TCB  *p_tcb)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskDelHookPtr != (OS_APP_HOOK_TCB)0) {
 80007c4:	4b05      	ldr	r3, [pc, #20]	@ (80007dc <OSTaskDelHook+0x20>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d003      	beq.n	80007d4 <OSTaskDelHook+0x18>
        (*OS_AppTaskDelHookPtr)(p_tcb);
 80007cc:	4b03      	ldr	r3, [pc, #12]	@ (80007dc <OSTaskDelHook+0x20>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                                /* Prevent compiler warning                             */
#endif
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20001274 	.word	0x20001274

080007e0 <OSTaskReturnHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskReturnHook (OS_TCB  *p_tcb)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskReturnHookPtr != (OS_APP_HOOK_TCB)0) {
 80007e8:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <OSTaskReturnHook+0x20>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d003      	beq.n	80007f8 <OSTaskReturnHook+0x18>
        (*OS_AppTaskReturnHookPtr)(p_tcb);
 80007f0:	4b03      	ldr	r3, [pc, #12]	@ (8000800 <OSTaskReturnHook+0x20>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                                /* Prevent compiler warning                             */
#endif
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20001278 	.word	0x20001278

08000804 <OSTaskStkInit>:
                         void          *p_arg,
                         CPU_STK       *p_stk_base,
                         CPU_STK       *p_stk_limit,
                         CPU_STK_SIZE   stk_size,
                         OS_OPT         opt)
{
 8000804:	b480      	push	{r7}
 8000806:	b087      	sub	sp, #28
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	603b      	str	r3, [r7, #0]
    CPU_STK    *p_stk;


    (void)opt;                                                  /* 'opt' is not used, prevent warning                   */

    p_stk = &p_stk_base[stk_size];                              /* Load stack pointer                                   */
 8000812:	6a3b      	ldr	r3, [r7, #32]
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                          */
    p_stk = (CPU_STK *)((CPU_STK)(p_stk) & 0xFFFFFFF8u);
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	f023 0307 	bic.w	r3, r3, #7
 8000822:	617b      	str	r3, [r7, #20]
                                                                /* Registers stacked as if auto-saved on exception      */
    *(--p_stk) = (CPU_STK)0x01000000u;                          /* xPSR                                                 */
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3b04      	subs	r3, #4
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000830:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)p_task;                               /* Entry Point                                          */
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	3b04      	subs	r3, #4
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)OS_TaskReturn;                        /* R14 (LR)                                             */
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3b04      	subs	r3, #4
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	4a34      	ldr	r2, [pc, #208]	@ (8000918 <OSTaskStkInit+0x114>)
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x12121212u;                          /* R12                                                  */
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	3b04      	subs	r3, #4
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8000856:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x03030303u;                          /* R3                                                   */
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	3b04      	subs	r3, #4
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8000864:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x02020202u;                          /* R2                                                   */
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	3b04      	subs	r3, #4
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8000872:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)p_stk_limit;                          /* R1                                                   */
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	3b04      	subs	r3, #4
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)p_arg;                                /* R0 : argument                                        */
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	3b04      	subs	r3, #4
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0xFFFFFFFDuL;                         /* R14: EXEC_RETURN; See Note 5                         */
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3b04      	subs	r3, #4
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	f06f 0202 	mvn.w	r2, #2
 8000898:	601a      	str	r2, [r3, #0]
                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (CPU_STK)0x11111111uL;                         /* R11                                                  */
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	3b04      	subs	r3, #4
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 80008a6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x10101010uL;                         /* R10                                                  */
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	3b04      	subs	r3, #4
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 80008b4:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x09090909uL;                         /* R9                                                   */
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	3b04      	subs	r3, #4
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 80008c2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x08080808uL;                         /* R8                                                   */
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	3b04      	subs	r3, #4
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 80008d0:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x07070707uL;                         /* R7                                                   */
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	3b04      	subs	r3, #4
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 80008de:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x06060606uL;                         /* R6                                                   */
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	3b04      	subs	r3, #4
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 80008ec:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x05050505uL;                         /* R5                                                   */
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	3b04      	subs	r3, #4
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 80008fa:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x04040404uL;                         /* R4                                                   */
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	3b04      	subs	r3, #4
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8000908:	601a      	str	r2, [r3, #0]

    return (p_stk);
 800090a:	697b      	ldr	r3, [r7, #20]
}
 800090c:	4618      	mov	r0, r3
 800090e:	371c      	adds	r7, #28
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	08002ae5 	.word	0x08002ae5

0800091c <OSTaskSwHook>:
*                 to the task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/

void  OSTaskSwHook (void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    CPU_BOOLEAN  stk_status;
#endif

#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskSwHookPtr != (OS_APP_HOOK_VOID)0) {
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <OSTaskSwHook+0x64>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d002      	beq.n	8000930 <OSTaskSwHook+0x14>
        (*OS_AppTaskSwHookPtr)();
 800092a:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <OSTaskSwHook+0x64>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4798      	blx	r3
#endif

    OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdyPtr);

#if OS_CFG_TASK_PROFILE_EN > 0u
    ts = OS_TS_GET();
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
    if (OSTCBCurPtr != OSTCBHighRdyPtr) {
 8000934:	4b13      	ldr	r3, [pc, #76]	@ (8000984 <OSTaskSwHook+0x68>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <OSTaskSwHook+0x6c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	429a      	cmp	r2, r3
 800093e:	d016      	beq.n	800096e <OSTaskSwHook+0x52>
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
 8000940:	4b10      	ldr	r3, [pc, #64]	@ (8000984 <OSTaskSwHook+0x68>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000948:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <OSTaskSwHook+0x68>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6879      	ldr	r1, [r7, #4]
 800094e:	1a8a      	subs	r2, r1, r2
 8000950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 8000954:	4b0b      	ldr	r3, [pc, #44]	@ (8000984 <OSTaskSwHook+0x68>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 800095c:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <OSTaskSwHook+0x68>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <OSTaskSwHook+0x68>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	440a      	add	r2, r1
 800096a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    OSTCBHighRdyPtr->CyclesStart = ts;
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <OSTaskSwHook+0x6c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    stk_status = OSTaskStkRedzoneChk((OS_TCB *)0u);
    if (stk_status != OS_TRUE) {
        OSRedzoneHitHook(OSTCBCurPtr);
    }
#endif
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20001284 	.word	0x20001284
 8000984:	20001708 	.word	0x20001708
 8000988:	2000170c 	.word	0x2000170c

0800098c <OSTimeTickHook>:
* Note(s)    : 1) This function is assumed to be called from the Tick ISR.
*********************************************************************************************************
*/

void  OSTimeTickHook (void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTimeTickHookPtr != (OS_APP_HOOK_VOID)0) {
 8000990:	4b04      	ldr	r3, [pc, #16]	@ (80009a4 <OSTimeTickHook+0x18>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <OSTimeTickHook+0x12>
        (*OS_AppTimeTickHookPtr)();
 8000998:	4b02      	ldr	r3, [pc, #8]	@ (80009a4 <OSTimeTickHook+0x18>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4798      	blx	r3
    }
#endif
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20001288 	.word	0x20001288

080009a8 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler  (void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 80009b2:	2040      	movs	r0, #64	@ 0x40
 80009b4:	f7ff fc0c 	bl	80001d0 <CPU_SR_Save>
 80009b8:	6078      	str	r0, [r7, #4]
    OSIntEnter();                                               /* Tell uC/OS-III that we are starting an ISR           */
 80009ba:	f000 f8df 	bl	8000b7c <OSIntEnter>
    CPU_CRITICAL_EXIT();
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff fc14 	bl	80001ec <CPU_SR_Restore>

    OSTimeTick();                                               /* Call uC/OS-III's OSTimeTick()                        */
 80009c4:	f002 fbf8 	bl	80031b8 <OSTimeTick>

    OSIntExit();                                                /* Tell uC/OS-III that we are leaving the ISR           */
 80009c8:	f000 f8f4 	bl	8000bb4 <OSIntExit>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <OSCfg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OSCfg_Init (void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
    (void)OSCfg_TmrTaskStkBasePtr;
    (void)OSCfg_TmrTaskStkLimit;
    (void)OSCfg_TmrTaskStkSize;
    (void)OSCfg_TmrTaskStkSizeRAM;
#endif
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <OSInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSInit (OS_ERR  *p_err)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSInitHook();                                               /* Call port specific initialization code               */
 80009ec:	f7ff fe96 	bl	800071c <OSInitHook>

    OSIntNestingCtr       =           0u;                       /* Clear the interrupt nesting counter                  */
 80009f0:	4b4c      	ldr	r3, [pc, #304]	@ (8000b24 <OSInit+0x140>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]

    OSRunning             =  OS_STATE_OS_STOPPED;               /* Indicate that multitasking has not started           */
 80009f6:	4b4c      	ldr	r3, [pc, #304]	@ (8000b28 <OSInit+0x144>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]

    OSSchedLockNestingCtr =           0u;                       /* Clear the scheduling lock counter                    */
 80009fc:	4b4b      	ldr	r3, [pc, #300]	@ (8000b2c <OSInit+0x148>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]

    OSTCBCurPtr           = (OS_TCB *)0;                        /* Initialize OS_TCB pointers to a known state          */
 8000a02:	4b4b      	ldr	r3, [pc, #300]	@ (8000b30 <OSInit+0x14c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
    OSTCBHighRdyPtr       = (OS_TCB *)0;
 8000a08:	4b4a      	ldr	r3, [pc, #296]	@ (8000b34 <OSInit+0x150>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]

    OSPrioCur             =           0u;                       /* Initialize priority variables to a known state       */
 8000a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8000b38 <OSInit+0x154>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy         =           0u;
 8000a14:	4b49      	ldr	r3, [pc, #292]	@ (8000b3c <OSInit+0x158>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;
#endif

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
    OSSchedRoundRobinEn             = OS_FALSE;
 8000a1a:	4b49      	ldr	r3, [pc, #292]	@ (8000b40 <OSInit+0x15c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
    OSSchedRoundRobinDfltTimeQuanta = OSCfg_TickRate_Hz / 10u;
 8000a20:	4b48      	ldr	r3, [pc, #288]	@ (8000b44 <OSInit+0x160>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a48      	ldr	r2, [pc, #288]	@ (8000b48 <OSInit+0x164>)
 8000a26:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2a:	08db      	lsrs	r3, r3, #3
 8000a2c:	4a47      	ldr	r2, [pc, #284]	@ (8000b4c <OSInit+0x168>)
 8000a2e:	6013      	str	r3, [r2, #0]
#endif

#if (OS_CFG_ISR_STK_SIZE > 0u)
    p_stk = OSCfg_ISRStkBasePtr;                                /* Clear exception stack for stack checking.            */
 8000a30:	4b47      	ldr	r3, [pc, #284]	@ (8000b50 <OSInit+0x16c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	60fb      	str	r3, [r7, #12]
    if (p_stk != (CPU_STK *)0) {
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00f      	beq.n	8000a5c <OSInit+0x78>
        size  = OSCfg_ISRStkSize;
 8000a3c:	4b45      	ldr	r3, [pc, #276]	@ (8000b54 <OSInit+0x170>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	60bb      	str	r3, [r7, #8]
        while (size > 0u) {
 8000a42:	e008      	b.n	8000a56 <OSInit+0x72>
            size--;
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	60bb      	str	r3, [r7, #8]
           *p_stk = 0u;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
            p_stk++;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	3304      	adds	r3, #4
 8000a54:	60fb      	str	r3, [r7, #12]
        while (size > 0u) {
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1f3      	bne.n	8000a44 <OSInit+0x60>

#if (OS_CFG_APP_HOOKS_EN > 0u)                                  /* Clear application hook pointers                      */
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    OS_AppRedzoneHitHookPtr = (OS_APP_HOOK_TCB )0;
#endif
    OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB )0;
 8000a5c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b58 <OSInit+0x174>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
    OS_AppTaskDelHookPtr    = (OS_APP_HOOK_TCB )0;
 8000a62:	4b3e      	ldr	r3, [pc, #248]	@ (8000b5c <OSInit+0x178>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
    OS_AppTaskReturnHookPtr = (OS_APP_HOOK_TCB )0;
 8000a68:	4b3d      	ldr	r3, [pc, #244]	@ (8000b60 <OSInit+0x17c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]

    OS_AppIdleTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8000a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <OSInit+0x180>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
    OS_AppStatTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8000a74:	4b3c      	ldr	r3, [pc, #240]	@ (8000b68 <OSInit+0x184>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
    OS_AppTaskSwHookPtr     = (OS_APP_HOOK_VOID)0;
 8000a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000b6c <OSInit+0x188>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
    OS_AppTimeTickHookPtr   = (OS_APP_HOOK_VOID)0;
 8000a80:	4b3b      	ldr	r3, [pc, #236]	@ (8000b70 <OSInit+0x18c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
#endif

#if (OS_CFG_TASK_REG_TBL_SIZE > 0u)
    OSTaskRegNextAvailID = 0u;
 8000a86:	4b3b      	ldr	r3, [pc, #236]	@ (8000b74 <OSInit+0x190>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
#endif

    OS_PrioInit();                                              /* Initialize the priority bitmap table                 */
 8000a8c:	f001 f956 	bl	8001d3c <OS_PrioInit>

    OS_RdyListInit();                                           /* Initialize the Ready List                            */
 8000a90:	f000 fb6c 	bl	800116c <OS_RdyListInit>
    OSFlagQty        =                0u;
#endif
#endif

#if (OS_CFG_MEM_EN > 0u)                                        /* Initialize the Memory Manager module                 */
    OS_MemInit(p_err);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f000 fd27 	bl	80014e8 <OS_MemInit>
    if (*p_err != OS_ERR_NONE) {
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d12f      	bne.n	8000b02 <OSInit+0x11e>
    }
#endif


#if (OS_MSG_EN > 0u)                                            /* Initialize the free list of OS_MSGs                  */
    OS_MsgPoolInit(p_err);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f000 fd2e 	bl	8001504 <OS_MsgPoolInit>
    if (*p_err != OS_ERR_NONE) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d12a      	bne.n	8000b06 <OSInit+0x122>
        return;
    }
#endif


    OS_TaskInit(p_err);                                         /* Initialize the task manager                          */
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f001 ff51 	bl	8002958 <OS_TaskInit>
    if (*p_err != OS_ERR_NONE) {
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d125      	bne.n	8000b0a <OSInit+0x126>
        return;
    }


#if (OS_CFG_TASK_IDLE_EN > 0u)
    OS_IdleTaskInit(p_err);                                     /* Initialize the Idle Task                             */
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f000 f9b2 	bl	8000e28 <OS_IdleTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d120      	bne.n	8000b0e <OSInit+0x12a>
    }
#endif


#if (OS_CFG_TICK_EN > 0u)
    OS_TickInit(p_err);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f002 f8bb 	bl	8002c48 <OS_TickInit>
    if (*p_err != OS_ERR_NONE) {
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d11b      	bne.n	8000b12 <OSInit+0x12e>
    }
#endif


#if (OS_CFG_STAT_TASK_EN > 0u)                                  /* Initialize the Statistic Task                        */
    OS_StatTaskInit(p_err);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f001 fcae 	bl	800243c <OS_StatTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d116      	bne.n	8000b16 <OSInit+0x132>
    }
#endif


#if (OS_CFG_TMR_EN > 0u)                                        /* Initialize the Timer Manager module                  */
    OS_TmrInit(p_err);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f002 fb81 	bl	80031f0 <OS_TmrInit>
    if (*p_err != OS_ERR_NONE) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d111      	bne.n	8000b1a <OSInit+0x136>
#if (OS_CFG_DBG_EN > 0u)
    OS_Dbg_Init();
#endif


    OSCfg_Init();
 8000af6:	f7ff ff6d 	bl	80009d4 <OSCfg_Init>

    OSInitialized = OS_TRUE;                                    /* Kernel is initialized                                */
 8000afa:	4b1f      	ldr	r3, [pc, #124]	@ (8000b78 <OSInit+0x194>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	e00c      	b.n	8000b1c <OSInit+0x138>
        return;
 8000b02:	bf00      	nop
 8000b04:	e00a      	b.n	8000b1c <OSInit+0x138>
        return;
 8000b06:	bf00      	nop
 8000b08:	e008      	b.n	8000b1c <OSInit+0x138>
        return;
 8000b0a:	bf00      	nop
 8000b0c:	e006      	b.n	8000b1c <OSInit+0x138>
        return;
 8000b0e:	bf00      	nop
 8000b10:	e004      	b.n	8000b1c <OSInit+0x138>
        return;
 8000b12:	bf00      	nop
 8000b14:	e002      	b.n	8000b1c <OSInit+0x138>
        return;
 8000b16:	bf00      	nop
 8000b18:	e000      	b.n	8000b1c <OSInit+0x138>
        return;
 8000b1a:	bf00      	nop
}
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20001334 	.word	0x20001334
 8000b28:	20001335 	.word	0x20001335
 8000b2c:	20001554 	.word	0x20001554
 8000b30:	20001708 	.word	0x20001708
 8000b34:	2000170c 	.word	0x2000170c
 8000b38:	20001348 	.word	0x20001348
 8000b3c:	20001349 	.word	0x20001349
 8000b40:	2000155c 	.word	0x2000155c
 8000b44:	080047a4 	.word	0x080047a4
 8000b48:	cccccccd 	.word	0xcccccccd
 8000b4c:	20001558 	.word	0x20001558
 8000b50:	0800477c 	.word	0x0800477c
 8000b54:	08004780 	.word	0x08004780
 8000b58:	20001270 	.word	0x20001270
 8000b5c:	20001274 	.word	0x20001274
 8000b60:	20001278 	.word	0x20001278
 8000b64:	2000127c 	.word	0x2000127c
 8000b68:	20001280 	.word	0x20001280
 8000b6c:	20001284 	.word	0x20001284
 8000b70:	20001288 	.word	0x20001288
 8000b74:	20001622 	.word	0x20001622
 8000b78:	20001336 	.word	0x20001336

08000b7c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 250 levels deep.
************************************************************************************************************************
*/

void  OSIntEnter (void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
    OS_TRACE_ISR_ENTER();

    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is OS running?                                       */
 8000b80:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <OSIntEnter+0x30>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d10a      	bne.n	8000b9e <OSIntEnter+0x22>
        return;                                                 /* No                                                   */
    }

    if (OSIntNestingCtr >= 250u) {                              /* Have we nested past 250 levels?                      */
 8000b88:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <OSIntEnter+0x34>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2bf9      	cmp	r3, #249	@ 0xf9
 8000b8e:	d808      	bhi.n	8000ba2 <OSIntEnter+0x26>
        return;                                                 /* Yes                                                  */
    }

    OSIntNestingCtr++;                                          /* Increment ISR nesting level                          */
 8000b90:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <OSIntEnter+0x34>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <OSIntEnter+0x34>)
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	e002      	b.n	8000ba4 <OSIntEnter+0x28>
        return;                                                 /* No                                                   */
 8000b9e:	bf00      	nop
 8000ba0:	e000      	b.n	8000ba4 <OSIntEnter+0x28>
        return;                                                 /* Yes                                                  */
 8000ba2:	bf00      	nop
}
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	20001335 	.word	0x20001335
 8000bb0:	20001334 	.word	0x20001334

08000bb4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSIntExit (void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    CPU_BOOLEAN  stk_status;
#endif
    CPU_SR_ALLOC();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]



    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Has the OS started?                                  */
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000c68 <OSIntExit+0xb4>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d14b      	bne.n	8000c5e <OSIntExit+0xaa>
        OS_TRACE_ISR_EXIT();
        return;                                                 /* No                                                   */
    }

    CPU_INT_DIS();
 8000bc6:	2040      	movs	r0, #64	@ 0x40
 8000bc8:	f7ff fb02 	bl	80001d0 <CPU_SR_Save>
 8000bcc:	6078      	str	r0, [r7, #4]
    if (OSIntNestingCtr == 0u) {                                /* Prevent OSIntNestingCtr from wrapping                */
 8000bce:	4b27      	ldr	r3, [pc, #156]	@ (8000c6c <OSIntExit+0xb8>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d103      	bne.n	8000bde <OSIntExit+0x2a>
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff fb08 	bl	80001ec <CPU_SR_Restore>
        return;
 8000bdc:	e040      	b.n	8000c60 <OSIntExit+0xac>
    }
    OSIntNestingCtr--;
 8000bde:	4b23      	ldr	r3, [pc, #140]	@ (8000c6c <OSIntExit+0xb8>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b21      	ldr	r3, [pc, #132]	@ (8000c6c <OSIntExit+0xb8>)
 8000be8:	701a      	strb	r2, [r3, #0]
    if (OSIntNestingCtr > 0u) {                                 /* ISRs still nested?                                   */
 8000bea:	4b20      	ldr	r3, [pc, #128]	@ (8000c6c <OSIntExit+0xb8>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <OSIntExit+0x46>
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();                                           /* Yes                                                  */
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff fafa 	bl	80001ec <CPU_SR_Restore>
        return;
 8000bf8:	e032      	b.n	8000c60 <OSIntExit+0xac>
    }

    if (OSSchedLockNestingCtr > 0u) {                           /* Scheduler still locked?                              */
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000c70 <OSIntExit+0xbc>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <OSIntExit+0x56>
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();                                           /* Yes                                                  */
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff faf2 	bl	80001ec <CPU_SR_Restore>
        return;
 8000c08:	e02a      	b.n	8000c60 <OSIntExit+0xac>
        OSRedzoneHitHook((OS_TCB *)0);
    }
#endif
#endif

    OSPrioHighRdy   = OS_PrioGetHighest();                      /* Find highest priority                                */
 8000c0a:	f001 f8b1 	bl	8001d70 <OS_PrioGetHighest>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <OSIntExit+0xc0>)
 8000c14:	701a      	strb	r2, [r3, #0]
#if (OS_CFG_TASK_IDLE_EN > 0u)
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;         /* Get highest priority task ready-to-run               */
 8000c16:	4b17      	ldr	r3, [pc, #92]	@ (8000c74 <OSIntExit+0xc0>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <OSIntExit+0xc4>)
 8000c1e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000c22:	4a16      	ldr	r2, [pc, #88]	@ (8000c7c <OSIntExit+0xc8>)
 8000c24:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                       /* Current task still the highest priority?             */
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <OSIntExit+0xc8>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <OSIntExit+0xcc>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d103      	bne.n	8000c3a <OSIntExit+0x86>
        if (stk_status != OS_TRUE) {
            OSRedzoneHitHook(OSTCBCurPtr);
        }
#endif
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fada 	bl	80001ec <CPU_SR_Restore>
        OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdyPtr);             /* Do this here because we don't execute OSIntCtxSw().  */
        return;
 8000c38:	e012      	b.n	8000c60 <OSIntExit+0xac>
        }
    }
#endif

#if (OS_CFG_TASK_PROFILE_EN > 0u)
    OSTCBHighRdyPtr->CtxSwCtr++;                                /* Inc. # of context switches for this new task         */
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <OSIntExit+0xc8>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8000c42:	3201      	adds	r2, #1
 8000c44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif
#if ((OS_CFG_TASK_PROFILE_EN > 0u) || (OS_CFG_DBG_EN > 0u))
    OSTaskCtxSwCtr++;                                           /* Keep track of the total number of ctx switches       */
 8000c48:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <OSIntExit+0xd0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <OSIntExit+0xd0>)
 8000c50:	6013      	str	r3, [r2, #0]
    OS_TLS_TaskSw();
#endif

    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

    OSIntCtxSw();                                               /* Perform interrupt level ctx switch                   */
 8000c52:	f7ff fb22 	bl	800029a <OSCtxSw>

    CPU_INT_EN();
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff fac8 	bl	80001ec <CPU_SR_Restore>
 8000c5c:	e000      	b.n	8000c60 <OSIntExit+0xac>
        return;                                                 /* No                                                   */
 8000c5e:	bf00      	nop
}
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20001335 	.word	0x20001335
 8000c6c:	20001334 	.word	0x20001334
 8000c70:	20001554 	.word	0x20001554
 8000c74:	20001349 	.word	0x20001349
 8000c78:	20001354 	.word	0x20001354
 8000c7c:	2000170c 	.word	0x2000170c
 8000c80:	20001708 	.word	0x20001708
 8000c84:	2000161c 	.word	0x2000161c

08000c88 <OSSched>:
* Note(s)    : 1) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSSched (void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]


#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)                       /* Can't schedule when the kernel is stopped.           */
    if (OSRunning != OS_STATE_OS_RUNNING) {
 8000c92:	4b22      	ldr	r3, [pc, #136]	@ (8000d1c <OSSched+0x94>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d137      	bne.n	8000d0a <OSSched+0x82>
        return;
    }
#endif

    if (OSIntNestingCtr > 0u) {                                 /* ISRs still nested?                                   */
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <OSSched+0x98>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d135      	bne.n	8000d0e <OSSched+0x86>
        return;                                                 /* Yes ... only schedule when no nested ISRs            */
    }

    if (OSSchedLockNestingCtr > 0u) {                           /* Scheduler locked?                                    */
 8000ca2:	4b20      	ldr	r3, [pc, #128]	@ (8000d24 <OSSched+0x9c>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d133      	bne.n	8000d12 <OSSched+0x8a>
        return;                                                 /* Yes                                                  */
    }

    CPU_INT_DIS();
 8000caa:	2040      	movs	r0, #64	@ 0x40
 8000cac:	f7ff fa90 	bl	80001d0 <CPU_SR_Save>
 8000cb0:	6078      	str	r0, [r7, #4]
    OSPrioHighRdy   = OS_PrioGetHighest();                      /* Find the highest priority ready                      */
 8000cb2:	f001 f85d 	bl	8001d70 <OS_PrioGetHighest>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <OSSched+0xa0>)
 8000cbc:	701a      	strb	r2, [r3, #0]
#if (OS_CFG_TASK_IDLE_EN > 0u)
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;         /* Get highest priority task ready-to-run               */
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <OSSched+0xa0>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <OSSched+0xa4>)
 8000cc6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000cca:	4a19      	ldr	r2, [pc, #100]	@ (8000d30 <OSSched+0xa8>)
 8000ccc:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                       /* Current task still the highest priority?             */
 8000cce:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <OSSched+0xa8>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <OSSched+0xac>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d103      	bne.n	8000ce2 <OSSched+0x5a>
        CPU_INT_EN();                                           /* Yes                                                  */
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff fa86 	bl	80001ec <CPU_SR_Restore>
        return;
 8000ce0:	e018      	b.n	8000d14 <OSSched+0x8c>
#endif

    OS_TRACE_TASK_PREEMPT(OSTCBCurPtr);

#if (OS_CFG_TASK_PROFILE_EN > 0u)
    OSTCBHighRdyPtr->CtxSwCtr++;                                /* Inc. # of context switches to this task              */
 8000ce2:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <OSSched+0xa8>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8000cea:	3201      	adds	r2, #1
 8000cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif

#if ((OS_CFG_TASK_PROFILE_EN > 0u) || (OS_CFG_DBG_EN > 0u))
    OSTaskCtxSwCtr++;                                           /* Increment context switch counter                     */
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <OSSched+0xb0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	4a10      	ldr	r2, [pc, #64]	@ (8000d38 <OSSched+0xb0>)
 8000cf8:	6013      	str	r3, [r2, #0]
#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

#if (OS_CFG_TASK_IDLE_EN > 0u)
    OS_TASK_SW();                                               /* Perform a task level context switch                  */
 8000cfa:	f7ff face 	bl	800029a <OSCtxSw>
    CPU_INT_EN();
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff fa74 	bl	80001ec <CPU_SR_Restore>
        }
    }
#endif

#ifdef OS_TASK_SW_SYNC
    OS_TASK_SW_SYNC();
 8000d04:	f3bf 8f6f 	isb	sy
 8000d08:	e004      	b.n	8000d14 <OSSched+0x8c>
        return;
 8000d0a:	bf00      	nop
 8000d0c:	e002      	b.n	8000d14 <OSSched+0x8c>
        return;                                                 /* Yes ... only schedule when no nested ISRs            */
 8000d0e:	bf00      	nop
 8000d10:	e000      	b.n	8000d14 <OSSched+0x8c>
        return;                                                 /* Yes                                                  */
 8000d12:	bf00      	nop
#endif
}
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20001335 	.word	0x20001335
 8000d20:	20001334 	.word	0x20001334
 8000d24:	20001554 	.word	0x20001554
 8000d28:	20001349 	.word	0x20001349
 8000d2c:	20001354 	.word	0x20001354
 8000d30:	2000170c 	.word	0x2000170c
 8000d34:	20001708 	.word	0x20001708
 8000d38:	2000161c 	.word	0x2000161c

08000d3c <OSStart>:
*              2) OSStart() is not supposed to return.  If it does, that would be considered a fatal error.
************************************************************************************************************************
*/

void  OSStart (OS_ERR  *p_err)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (OSInitialized != OS_TRUE) {
 8000d44:	4b24      	ldr	r3, [pc, #144]	@ (8000dd8 <OSStart+0x9c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d004      	beq.n	8000d56 <OSStart+0x1a>
       *p_err = OS_ERR_OS_NOT_INIT;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f645 628b 	movw	r2, #24203	@ 0x5e8b
 8000d52:	801a      	strh	r2, [r3, #0]
        return;
 8000d54:	e03c      	b.n	8000dd0 <OSStart+0x94>
    }

    kernel_task_cnt = 0u;                                       /* Calculate the number of kernel tasks                 */
 8000d56:	2300      	movs	r3, #0
 8000d58:	81fb      	strh	r3, [r7, #14]
#if (OS_CFG_STAT_TASK_EN > 0u)
    kernel_task_cnt++;
 8000d5a:	89fb      	ldrh	r3, [r7, #14]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	81fb      	strh	r3, [r7, #14]
#endif
#if (OS_CFG_TMR_EN > 0u)
    kernel_task_cnt++;
 8000d60:	89fb      	ldrh	r3, [r7, #14]
 8000d62:	3301      	adds	r3, #1
 8000d64:	81fb      	strh	r3, [r7, #14]
#endif
#if (OS_CFG_TASK_IDLE_EN > 0u)
    kernel_task_cnt++;
 8000d66:	89fb      	ldrh	r3, [r7, #14]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	81fb      	strh	r3, [r7, #14]
#endif

    if (OSTaskQty <= kernel_task_cnt) {                         /* No application task created                          */
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <OSStart+0xa0>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	89fa      	ldrh	r2, [r7, #14]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d304      	bcc.n	8000d80 <OSStart+0x44>
        *p_err = OS_ERR_OS_NO_APP_TASK;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f645 628c 	movw	r2, #24204	@ 0x5e8c
 8000d7c:	801a      	strh	r2, [r3, #0]
         return;
 8000d7e:	e027      	b.n	8000dd0 <OSStart+0x94>
    }

    if (OSRunning == OS_STATE_OS_STOPPED) {
 8000d80:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <OSStart+0xa4>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d11f      	bne.n	8000dc8 <OSStart+0x8c>
        OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority                            */
 8000d88:	f000 fff2 	bl	8001d70 <OS_PrioGetHighest>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <OSStart+0xa8>)
 8000d92:	701a      	strb	r2, [r3, #0]
        OSPrioCur       = OSPrioHighRdy;
 8000d94:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <OSStart+0xa8>)
 8000d96:	781a      	ldrb	r2, [r3, #0]
 8000d98:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <OSStart+0xac>)
 8000d9a:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <OSStart+0xa8>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <OSStart+0xb0>)
 8000da4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000da8:	4a11      	ldr	r2, [pc, #68]	@ (8000df0 <OSStart+0xb4>)
 8000daa:	6013      	str	r3, [r2, #0]
        OSTCBCurPtr     = OSTCBHighRdyPtr;
 8000dac:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <OSStart+0xb4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a10      	ldr	r2, [pc, #64]	@ (8000df4 <OSStart+0xb8>)
 8000db2:	6013      	str	r3, [r2, #0]
        OSRunning       = OS_STATE_OS_RUNNING;
 8000db4:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <OSStart+0xa4>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
        OSStartHighRdy();                                       /* Execute target specific code to start task           */
 8000dba:	f7ff fa2f 	bl	800021c <OSStartHighRdy>
       *p_err           = OS_ERR_FATAL_RETURN;                  /* OSStart() is not supposed to return                  */
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f643 2299 	movw	r2, #15001	@ 0x3a99
 8000dc4:	801a      	strh	r2, [r3, #0]
 8000dc6:	e003      	b.n	8000dd0 <OSStart+0x94>
    } else {
       *p_err           = OS_ERR_OS_RUNNING;                    /* OS is already running                                */
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f645 628a 	movw	r2, #24202	@ 0x5e8a
 8000dce:	801a      	strh	r2, [r3, #0]
    }
}
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20001336 	.word	0x20001336
 8000ddc:	20001620 	.word	0x20001620
 8000de0:	20001335 	.word	0x20001335
 8000de4:	20001349 	.word	0x20001349
 8000de8:	20001348 	.word	0x20001348
 8000dec:	20001354 	.word	0x20001354
 8000df0:	2000170c 	.word	0x2000170c
 8000df4:	20001708 	.word	0x20001708

08000df8 <OS_IdleTask>:
*              3) This hook has been added to allow you to do such things as STOP the CPU to conserve power.
************************************************************************************************************************
*/
#if (OS_CFG_TASK_IDLE_EN > 0u)
void  OS_IdleTask (void  *p_arg)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_EN > 0u))
    CPU_SR_ALLOC();
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]

    (void)p_arg;                                                /* Prevent compiler warning for not using 'p_arg'       */

    for (;;) {
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_EN > 0u))
        CPU_CRITICAL_ENTER();
 8000e04:	2040      	movs	r0, #64	@ 0x40
 8000e06:	f7ff f9e3 	bl	80001d0 <CPU_SR_Save>
 8000e0a:	60f8      	str	r0, [r7, #12]
#if (OS_CFG_DBG_EN > 0u)
        OSIdleTaskCtr++;
#endif
#if (OS_CFG_STAT_TASK_EN > 0u)
        OSStatTaskCtr++;
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <OS_IdleTask+0x2c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	3301      	adds	r3, #1
 8000e12:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <OS_IdleTask+0x2c>)
 8000e14:	6013      	str	r3, [r2, #0]
#endif
        CPU_CRITICAL_EXIT();
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f7ff f9e8 	bl	80001ec <CPU_SR_Restore>
#endif

#if (OS_CFG_APP_HOOKS_EN > 0u)
        OSIdleTaskHook();                                       /* Call user definable HOOK                             */
 8000e1c:	f7ff fc70 	bl	8000700 <OSIdleTaskHook>
        CPU_CRITICAL_ENTER();
 8000e20:	bf00      	nop
 8000e22:	e7ef      	b.n	8000e04 <OS_IdleTask+0xc>
 8000e24:	20001564 	.word	0x20001564

08000e28 <OS_IdleTaskInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/
#if (OS_CFG_TASK_IDLE_EN > 0u)
void  OS_IdleTaskInit (OS_ERR  *p_err)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	@ 0x30
 8000e2c:	af0a      	add	r7, sp, #40	@ 0x28
 8000e2e:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSIdleTaskCtr = 0u;
#endif
                                                                /* --------------- CREATE THE IDLE TASK --------------- */
    OSTaskCreate(&OSIdleTaskTCB,
 8000e30:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <OS_IdleTaskInit+0x48>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0f      	ldr	r2, [pc, #60]	@ (8000e74 <OS_IdleTaskInit+0x4c>)
 8000e36:	6812      	ldr	r2, [r2, #0]
 8000e38:	490f      	ldr	r1, [pc, #60]	@ (8000e78 <OS_IdleTaskInit+0x50>)
 8000e3a:	6809      	ldr	r1, [r1, #0]
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	9008      	str	r0, [sp, #32]
 8000e40:	200b      	movs	r0, #11
 8000e42:	9007      	str	r0, [sp, #28]
 8000e44:	2000      	movs	r0, #0
 8000e46:	9006      	str	r0, [sp, #24]
 8000e48:	2000      	movs	r0, #0
 8000e4a:	9005      	str	r0, [sp, #20]
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	9004      	str	r0, [sp, #16]
 8000e50:	9103      	str	r1, [sp, #12]
 8000e52:	9202      	str	r2, [sp, #8]
 8000e54:	9301      	str	r3, [sp, #4]
 8000e56:	233f      	movs	r3, #63	@ 0x3f
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	4a07      	ldr	r2, [pc, #28]	@ (8000e7c <OS_IdleTaskInit+0x54>)
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4807      	ldr	r0, [pc, #28]	@ (8000e80 <OS_IdleTaskInit+0x58>)
 8000e62:	f001 fb5d 	bl	8002520 <OSTaskCreate>
                  0u,
                  0u,
                 (void       *)0,
                 (OS_OPT_TASK_STK_CHK | (OS_OPT)(OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS)),
                  p_err);
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	08004770 	.word	0x08004770
 8000e74:	08004774 	.word	0x08004774
 8000e78:	08004778 	.word	0x08004778
 8000e7c:	08000df9 	.word	0x08000df9
 8000e80:	2000128c 	.word	0x2000128c

08000e84 <OS_Pend>:

void  OS_Pend (OS_PEND_OBJ  *p_obj,
               OS_TCB       *p_tcb,
               OS_STATE      pending_on,
               OS_TICK       timeout)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	4613      	mov	r3, r2
 8000e92:	71fb      	strb	r3, [r7, #7]
    OS_PEND_LIST  *p_pend_list;


    p_tcb->PendOn     = pending_on;                             /* Resource not available, wait until it is             */
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	79fa      	ldrb	r2, [r7, #7]
 8000e98:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    p_tcb->PendStatus = OS_STATUS_PEND_OK;
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    OS_TaskBlock(p_tcb,                                         /* Block the task and add it to the tick list if needed */
 8000ea4:	6839      	ldr	r1, [r7, #0]
 8000ea6:	68b8      	ldr	r0, [r7, #8]
 8000ea8:	f000 fafc 	bl	80014a4 <OS_TaskBlock>
                 timeout);

    if (p_obj != (OS_PEND_OBJ *)0) {                            /* Add the current task to the pend list ...            */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00a      	beq.n	8000ec8 <OS_Pend+0x44>
        p_pend_list             = &p_obj->PendList;             /* ... if there is an object to pend on                 */
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	617b      	str	r3, [r7, #20]
        p_tcb->PendObjPtr =  p_obj;                             /* Save the pointer to the object pending on            */
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	629a      	str	r2, [r3, #40]	@ 0x28
        OS_PendListInsertPrio(p_pend_list,                      /* Insert in the pend list in priority order            */
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	6978      	ldr	r0, [r7, #20]
 8000ec2:	f000 f835 	bl	8000f30 <OS_PendListInsertPrio>
    }
#if (OS_CFG_DBG_EN > 0u)
    OS_PendDbgNameAdd(p_obj,
                      p_tcb);
#endif
}
 8000ec6:	e002      	b.n	8000ece <OS_Pend+0x4a>
        p_tcb->PendObjPtr = (OS_PEND_OBJ *)0;                   /* If no object being pended on, clear the pend object  */
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <OS_PendListChangePrio>:
*              2) It's assumed that the TCB contains the NEW priority in its .Prio field.
************************************************************************************************************************
*/

void  OS_PendListChangePrio (OS_TCB  *p_tcb)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b084      	sub	sp, #16
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_OBJ   *p_obj;

    p_obj       =  p_tcb->PendObjPtr;                           /* Get pointer to pend list                             */
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee2:	60fb      	str	r3, [r7, #12]
    p_pend_list = &p_obj->PendList;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	60bb      	str	r3, [r7, #8]

    if (p_pend_list->HeadPtr->PendNextPtr != (OS_TCB *)0) {     /* Only move if multiple entries in the list            */
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d009      	beq.n	8000f08 <OS_PendListChangePrio+0x32>
            OS_PendListRemove(p_tcb);                           /* Remove entry from current position                   */
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 f87e 	bl	8000ff6 <OS_PendListRemove>
            p_tcb->PendObjPtr = p_obj;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	629a      	str	r2, [r3, #40]	@ 0x28
            OS_PendListInsertPrio(p_pend_list,                  /* INSERT it back in the list                           */
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	68b8      	ldr	r0, [r7, #8]
 8000f04:	f000 f814 	bl	8000f30 <OS_PendListInsertPrio>
                                  p_tcb);
    }
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <OS_PendListInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application must not call it.
************************************************************************************************************************
*/

void  OS_PendListInit (OS_PEND_LIST  *p_pend_list)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    p_pend_list->HeadPtr    = (OS_TCB *)0;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
    p_pend_list->TailPtr    = (OS_TCB *)0;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
#if (OS_CFG_DBG_EN > 0u)
    p_pend_list->NbrEntries =           0u;
#endif
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <OS_PendListInsertPrio>:
************************************************************************************************************************
*/

void  OS_PendListInsertPrio (OS_PEND_LIST  *p_pend_list,
                             OS_TCB        *p_tcb)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
    OS_PRIO   prio;
    OS_TCB   *p_tcb_next;


    prio  = p_tcb->Prio;                                        /* Obtain the priority of the task to insert            */
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000f40:	72fb      	strb	r3, [r7, #11]

    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* CASE 0: Insert when there are no entries             */
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10c      	bne.n	8000f64 <OS_PendListInsertPrio+0x34>
#if (OS_CFG_DBG_EN > 0u)
        p_pend_list->NbrEntries = 1u;                           /* This is the first entry                              */
#endif
        p_tcb->PendNextPtr   = (OS_TCB *)0;                     /* No other OS_TCBs in the list                         */
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
        p_tcb->PendPrevPtr   = (OS_TCB *)0;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	@ 0x24
        p_pend_list->HeadPtr =  p_tcb;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr =  p_tcb;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	605a      	str	r2, [r3, #4]
                p_tcb->PendPrevPtr->PendNextPtr = p_tcb;
                p_tcb_next->PendPrevPtr         = p_tcb;
            }
        }
    }
}
 8000f62:	e042      	b.n	8000fea <OS_PendListInsertPrio+0xba>
        p_tcb_next = p_pend_list->HeadPtr;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
        while (p_tcb_next != (OS_TCB *)0) {                     /* Find the position where to insert                    */
 8000f6a:	e008      	b.n	8000f7e <OS_PendListInsertPrio+0x4e>
            if (prio < p_tcb_next->Prio) {
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000f72:	7afa      	ldrb	r2, [r7, #11]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d306      	bcc.n	8000f86 <OS_PendListInsertPrio+0x56>
                p_tcb_next = p_tcb_next->PendNextPtr;           /* Not Found, follow the list                           */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	60fb      	str	r3, [r7, #12]
        while (p_tcb_next != (OS_TCB *)0) {                     /* Find the position where to insert                    */
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1f3      	bne.n	8000f6c <OS_PendListInsertPrio+0x3c>
 8000f84:	e000      	b.n	8000f88 <OS_PendListInsertPrio+0x58>
                break;                                          /* Found! ... insert BEFORE current                     */
 8000f86:	bf00      	nop
        if (p_tcb_next == (OS_TCB *)0) {                        /* TCB to insert is lowest in priority                  */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10e      	bne.n	8000fac <OS_PendListInsertPrio+0x7c>
            p_tcb->PendNextPtr              = (OS_TCB *)0;      /* ... insert at the tail.                              */
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
            p_tcb->PendPrevPtr              =  p_pend_list->TailPtr;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	625a      	str	r2, [r3, #36]	@ 0x24
            p_tcb->PendPrevPtr->PendNextPtr =  p_tcb;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	621a      	str	r2, [r3, #32]
            p_pend_list->TailPtr            =  p_tcb;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
}
 8000faa:	e01e      	b.n	8000fea <OS_PendListInsertPrio+0xba>
            if (p_tcb_next->PendPrevPtr == (OS_TCB *)0) {       /* Is new TCB highest priority?                         */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10c      	bne.n	8000fce <OS_PendListInsertPrio+0x9e>
                p_tcb->PendNextPtr      =  p_tcb_next;          /* Yes, insert as new Head of list                      */
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	621a      	str	r2, [r3, #32]
                p_tcb->PendPrevPtr      = (OS_TCB *)0;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	@ 0x24
                p_tcb_next->PendPrevPtr =  p_tcb;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	625a      	str	r2, [r3, #36]	@ 0x24
                p_pend_list->HeadPtr    =  p_tcb;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	601a      	str	r2, [r3, #0]
}
 8000fcc:	e00d      	b.n	8000fea <OS_PendListInsertPrio+0xba>
                p_tcb->PendNextPtr              = p_tcb_next;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	621a      	str	r2, [r3, #32]
                p_tcb->PendPrevPtr              = p_tcb_next->PendPrevPtr;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	625a      	str	r2, [r3, #36]	@ 0x24
                p_tcb->PendPrevPtr->PendNextPtr = p_tcb;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	621a      	str	r2, [r3, #32]
                p_tcb_next->PendPrevPtr         = p_tcb;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <OS_PendListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PendListRemove (OS_TCB  *p_tcb)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b087      	sub	sp, #28
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_next;
    OS_TCB        *p_prev;


    if (p_tcb->PendObjPtr != (OS_PEND_OBJ *)0) {                /* Only remove if object has a pend list.               */
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001002:	2b00      	cmp	r3, #0
 8001004:	d040      	beq.n	8001088 <OS_PendListRemove+0x92>
        p_pend_list = &p_tcb->PendObjPtr->PendList;             /* Get pointer to pend list                             */
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800100a:	3304      	adds	r3, #4
 800100c:	617b      	str	r3, [r7, #20]

                                                                /* Remove TCB from the pend list.                       */
        if (p_pend_list->HeadPtr->PendNextPtr == (OS_TCB *)0) {
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d106      	bne.n	8001026 <OS_PendListRemove+0x30>
            p_pend_list->HeadPtr = (OS_TCB *)0;                 /* Only one entry in the pend list                      */
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
            p_pend_list->TailPtr = (OS_TCB *)0;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	e027      	b.n	8001076 <OS_PendListRemove+0x80>
        } else if (p_tcb->PendPrevPtr == (OS_TCB *)0) {         /* See if entry is at the head of the list              */
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102a:	2b00      	cmp	r3, #0
 800102c:	d109      	bne.n	8001042 <OS_PendListRemove+0x4c>
            p_next               =  p_tcb->PendNextPtr;         /* Yes                                                  */
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	60fb      	str	r3, [r7, #12]
            p_next->PendPrevPtr  = (OS_TCB *)0;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2200      	movs	r2, #0
 8001038:	625a      	str	r2, [r3, #36]	@ 0x24
            p_pend_list->HeadPtr =  p_next;
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	e019      	b.n	8001076 <OS_PendListRemove+0x80>

        } else if (p_tcb->PendNextPtr == (OS_TCB *)0) {         /* See if entry is at the tail of the list              */
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d109      	bne.n	800105e <OS_PendListRemove+0x68>
            p_prev               =  p_tcb->PendPrevPtr;         /* Yes                                                  */
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104e:	613b      	str	r3, [r7, #16]
            p_prev->PendNextPtr  = (OS_TCB *)0;
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
            p_pend_list->TailPtr =  p_prev;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	e00b      	b.n	8001076 <OS_PendListRemove+0x80>

        } else {
            p_prev               = p_tcb->PendPrevPtr;          /* Remove from inside the list                          */
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001062:	613b      	str	r3, [r7, #16]
            p_next               = p_tcb->PendNextPtr;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	60fb      	str	r3, [r7, #12]
            p_prev->PendNextPtr  = p_next;
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	621a      	str	r2, [r3, #32]
            p_next->PendPrevPtr  = p_prev;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	625a      	str	r2, [r3, #36]	@ 0x24
        }
#if (OS_CFG_DBG_EN > 0u)
        p_pend_list->NbrEntries--;                              /* One less entry in the list                           */
#endif
        p_tcb->PendNextPtr = (OS_TCB      *)0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
        p_tcb->PendPrevPtr = (OS_TCB      *)0;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	@ 0x24
        p_tcb->PendObjPtr  = (OS_PEND_OBJ *)0;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	629a      	str	r2, [r3, #40]	@ 0x28
    }
}
 8001088:	bf00      	nop
 800108a:	371c      	adds	r7, #28
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <OS_Post>:
void  OS_Post (OS_PEND_OBJ  *p_obj,
               OS_TCB       *p_tcb,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               CPU_TS        ts)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	807b      	strh	r3, [r7, #2]
#if (OS_MSG_EN == 0u)
    (void)p_void;
    (void)msg_size;
#endif

    switch (p_tcb->TaskState) {
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80010a8:	2b07      	cmp	r3, #7
 80010aa:	d85a      	bhi.n	8001162 <OS_Post+0xce>
 80010ac:	a201      	add	r2, pc, #4	@ (adr r2, 80010b4 <OS_Post+0x20>)
 80010ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b2:	bf00      	nop
 80010b4:	08001163 	.word	0x08001163
 80010b8:	08001163 	.word	0x08001163
 80010bc:	080010d5 	.word	0x080010d5
 80010c0:	080010d5 	.word	0x080010d5
 80010c4:	08001163 	.word	0x08001163
 80010c8:	08001163 	.word	0x08001163
 80010cc:	0800111f 	.word	0x0800111f
 80010d0:	0800111f 	.word	0x0800111f
             break;

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
#if (OS_MSG_EN > 0u)
             p_tcb->MsgPtr  = p_void;                           /* Deposit message in OS_TCB of task waiting            */
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	655a      	str	r2, [r3, #84]	@ 0x54
             p_tcb->MsgSize = msg_size;                         /* ... assuming posting a message                       */
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	887a      	ldrh	r2, [r7, #2]
 80010de:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
#endif
#if (OS_CFG_TS_EN > 0u)
                 p_tcb->TS      = ts;
#endif
             if (p_obj != (OS_PEND_OBJ *)0) {
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <OS_Post+0x5a>
                 OS_PendListRemove(p_tcb);                      /* Remove task from pend list                           */
 80010e8:	68b8      	ldr	r0, [r7, #8]
 80010ea:	f7ff ff84 	bl	8000ff6 <OS_PendListRemove>
#if (OS_CFG_DBG_EN > 0u)
             OS_PendDbgNameRemove(p_obj,
                                  p_tcb);
#endif
#if (OS_CFG_TICK_EN > 0u)
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d102      	bne.n	80010fe <OS_Post+0x6a>
                 OS_TickListRemove(p_tcb);                      /* Remove from tick list                                */
 80010f8:	68b8      	ldr	r0, [r7, #8]
 80010fa:	f001 fee3 	bl	8002ec4 <OS_TickListRemove>
             }
#endif
             OS_RdyListInsert(p_tcb);                           /* Insert the task in the ready list                    */
 80010fe:	68b8      	ldr	r0, [r7, #8]
 8001100:	f000 f854 	bl	80011ac <OS_RdyListInsert>
             p_tcb->TaskState  = OS_TASK_STATE_RDY;
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
             p_tcb->PendStatus = OS_STATUS_PEND_OK;             /* Clear pend status                                    */
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;       /* Indicate no longer pending                           */
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
             break;
 800111c:	e022      	b.n	8001164 <OS_Post+0xd0>

        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
#if (OS_MSG_EN > 0u)
             p_tcb->MsgPtr  = p_void;                           /* Deposit message in OS_TCB of task waiting            */
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	655a      	str	r2, [r3, #84]	@ 0x54
             p_tcb->MsgSize = msg_size;                         /* ... assuming posting a message                       */
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
#endif
#if (OS_CFG_TS_EN > 0u)
             p_tcb->TS      = ts;
#endif
             if (p_obj != (OS_PEND_OBJ *)0) {
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <OS_Post+0xa4>
                 OS_PendListRemove(p_tcb);                      /* Remove from pend list                                */
 8001132:	68b8      	ldr	r0, [r7, #8]
 8001134:	f7ff ff5f 	bl	8000ff6 <OS_PendListRemove>
#if (OS_CFG_DBG_EN > 0u)
             OS_PendDbgNameRemove(p_obj,
                                  p_tcb);
#endif
#if (OS_CFG_TICK_EN > 0u)
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800113e:	2b07      	cmp	r3, #7
 8001140:	d102      	bne.n	8001148 <OS_Post+0xb4>
                 OS_TickListRemove(p_tcb);                      /* Cancel any timeout                                   */
 8001142:	68b8      	ldr	r0, [r7, #8]
 8001144:	f001 febe 	bl	8002ec4 <OS_TickListRemove>
             }
#endif
             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	2204      	movs	r2, #4
 800114c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
             p_tcb->PendStatus = OS_STATUS_PEND_OK;             /* Clear pend status                                    */
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;       /* Indicate no longer pending                           */
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
             break;
 8001160:	e000      	b.n	8001164 <OS_Post+0xd0>

        default:
                                                                /* Default case.                                        */
             break;
 8001162:	bf00      	nop
    }
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <OS_RdyListInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInit (void)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
    CPU_INT32U    i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                    /* Initialize the array of OS_RDY_LIST at each priority */
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	e00d      	b.n	8001194 <OS_RdyListInit+0x28>
        p_rdy_list = &OSRdyList[i];
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <OS_RdyListInit+0x3c>)
 800117e:	4413      	add	r3, r2
 8001180:	603b      	str	r3, [r7, #0]
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries =           0u;
#endif
        p_rdy_list->HeadPtr    = (OS_TCB *)0;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    = (OS_TCB *)0;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                    /* Initialize the array of OS_RDY_LIST at each priority */
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3301      	adds	r3, #1
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b3f      	cmp	r3, #63	@ 0x3f
 8001198:	d9ee      	bls.n	8001178 <OS_RdyListInit+0xc>
    }
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	20001354 	.word	0x20001354

080011ac <OS_RdyListInsert>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInsert (OS_TCB  *p_tcb)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
    OS_PrioInsert(p_tcb->Prio);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fdf4 	bl	8001da8 <OS_PrioInsert>
    if (p_tcb->Prio == OSPrioCur) {                             /* Are we readying a task at the same prio?             */
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <OS_RdyListInsert+0x38>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d103      	bne.n	80011d6 <OS_RdyListInsert+0x2a>
        OS_RdyListInsertTail(p_tcb);                            /* Yes, insert readied task at the end of the list      */
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f83e 	bl	8001250 <OS_RdyListInsertTail>
    } else {
        OS_RdyListInsertHead(p_tcb);                            /* No,  insert readied task at the beginning of the list*/
    }

    OS_TRACE_TASK_READY(p_tcb);
}
 80011d4:	e002      	b.n	80011dc <OS_RdyListInsert+0x30>
        OS_RdyListInsertHead(p_tcb);                            /* No,  insert readied task at the beginning of the list*/
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 f806 	bl	80011e8 <OS_RdyListInsertHead>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20001348 	.word	0x20001348

080011e8 <OS_RdyListInsertHead>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertHead (OS_TCB  *p_tcb)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4a14      	ldr	r2, [pc, #80]	@ (800124c <OS_RdyListInsertHead+0x64>)
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->HeadPtr == (OS_TCB *)0) {                   /* CASE 0: Insert when there are no entries             */
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10c      	bne.n	8001220 <OS_RdyListInsertHead+0x38>
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries =           1u;                  /* This is the first entry                              */
#endif
        p_tcb->NextPtr         = (OS_TCB *)0;                   /* No other OS_TCBs in the list                         */
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         = (OS_TCB *)0;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    =  p_tcb;                        /* Both list pointers point to this OS_TCB              */
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    =  p_tcb;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	605a      	str	r2, [r3, #4]
        p_tcb->PrevPtr         = (OS_TCB *)0;
        p_tcb2                 =  p_rdy_list->HeadPtr;          /* Adjust old head of list's links                      */
        p_tcb2->PrevPtr        =  p_tcb;
        p_rdy_list->HeadPtr    =  p_tcb;
    }
}
 800121e:	e00f      	b.n	8001240 <OS_RdyListInsertHead+0x58>
        p_tcb->NextPtr         =  p_rdy_list->HeadPtr;          /* Adjust new OS_TCBs links                             */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         = (OS_TCB *)0;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
        p_tcb2                 =  p_rdy_list->HeadPtr;          /* Adjust old head of list's links                      */
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	60bb      	str	r3, [r7, #8]
        p_tcb2->PrevPtr        =  p_tcb;
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    =  p_tcb;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	601a      	str	r2, [r3, #0]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	20001354 	.word	0x20001354

08001250 <OS_RdyListInsertTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertTail (OS_TCB  *p_tcb)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4a14      	ldr	r2, [pc, #80]	@ (80012b4 <OS_RdyListInsertTail+0x64>)
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->HeadPtr == (OS_TCB *)0) {                   /* CASE 0: Insert when there are no entries             */
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10c      	bne.n	8001288 <OS_RdyListInsertTail+0x38>
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries  =           1u;                 /* This is the first entry                              */
#endif
        p_tcb->NextPtr          = (OS_TCB *)0;                  /* No other OS_TCBs in the list                         */
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr          = (OS_TCB *)0;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr     =  p_tcb;                       /* Both list pointers point to this OS_TCB              */
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr     =  p_tcb;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	605a      	str	r2, [r3, #4]
        p_tcb2                  =  p_rdy_list->TailPtr;
        p_tcb->PrevPtr          =  p_tcb2;
        p_tcb2->NextPtr         =  p_tcb;                       /* Adjust old tail of list's links                      */
        p_rdy_list->TailPtr     =  p_tcb;
    }
}
 8001286:	e00e      	b.n	80012a6 <OS_RdyListInsertTail+0x56>
        p_tcb->NextPtr          = (OS_TCB *)0;                  /* Adjust new OS_TCBs links                             */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
        p_tcb2                  =  p_rdy_list->TailPtr;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	60bb      	str	r3, [r7, #8]
        p_tcb->PrevPtr          =  p_tcb2;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	611a      	str	r2, [r3, #16]
        p_tcb2->NextPtr         =  p_tcb;                       /* Adjust old tail of list's links                      */
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	60da      	str	r2, [r3, #12]
        p_rdy_list->TailPtr     =  p_tcb;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	605a      	str	r2, [r3, #4]
}
 80012a6:	bf00      	nop
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20001354 	.word	0x20001354

080012b8 <OS_RdyListMoveHeadToTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListMoveHeadToTail (OS_RDY_LIST  *p_rdy_list)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
    OS_TCB  *p_tcb1;
    OS_TCB  *p_tcb2;
    OS_TCB  *p_tcb3;


     if (p_rdy_list->HeadPtr != p_rdy_list->TailPtr) {
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d03a      	beq.n	8001342 <OS_RdyListMoveHeadToTail+0x8a>
         if (p_rdy_list->HeadPtr->NextPtr == p_rdy_list->TailPtr) { /* SWAP the TCBs                                    */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d118      	bne.n	800130c <OS_RdyListMoveHeadToTail+0x54>
             p_tcb1              =  p_rdy_list->HeadPtr;        /* Point to current head                                */
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	617b      	str	r3, [r7, #20]
             p_tcb2              =  p_rdy_list->TailPtr;        /* Point to current tail                                */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	613b      	str	r3, [r7, #16]
             p_tcb1->PrevPtr     =  p_tcb2;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	611a      	str	r2, [r3, #16]
             p_tcb1->NextPtr     = (OS_TCB *)0;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
             p_tcb2->PrevPtr     = (OS_TCB *)0;
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
             p_tcb2->NextPtr     =  p_tcb1;
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	60da      	str	r2, [r3, #12]
             p_rdy_list->HeadPtr =  p_tcb2;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	601a      	str	r2, [r3, #0]
             p_rdy_list->TailPtr =  p_tcb1;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	605a      	str	r2, [r3, #4]
             p_tcb2->NextPtr     =  p_tcb1;                     /* Adjust forward link of old list tail                 */
             p_rdy_list->HeadPtr =  p_tcb3;                     /* Adjust new list head and tail pointers               */
             p_rdy_list->TailPtr =  p_tcb1;
         }
     }
}
 800130a:	e01a      	b.n	8001342 <OS_RdyListMoveHeadToTail+0x8a>
             p_tcb1              =  p_rdy_list->HeadPtr;        /* Point to current head                                */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	617b      	str	r3, [r7, #20]
             p_tcb2              =  p_rdy_list->TailPtr;        /* Point to current tail                                */
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	613b      	str	r3, [r7, #16]
             p_tcb3              =  p_tcb1->NextPtr;            /* Point to new list head                               */
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	60fb      	str	r3, [r7, #12]
             p_tcb3->PrevPtr     = (OS_TCB *)0;                 /* Adjust back    link of new list head                 */
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
             p_tcb1->NextPtr     = (OS_TCB *)0;                 /* Adjust forward link of new list tail                 */
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
             p_tcb1->PrevPtr     =  p_tcb2;                     /* Adjust back    link of new list tail                 */
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	611a      	str	r2, [r3, #16]
             p_tcb2->NextPtr     =  p_tcb1;                     /* Adjust forward link of old list tail                 */
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	60da      	str	r2, [r3, #12]
             p_rdy_list->HeadPtr =  p_tcb3;                     /* Adjust new list head and tail pointers               */
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	601a      	str	r2, [r3, #0]
             p_rdy_list->TailPtr =  p_tcb1;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	605a      	str	r2, [r3, #4]
}
 8001342:	bf00      	nop
 8001344:	371c      	adds	r7, #28
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <OS_RdyListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListRemove (OS_TCB  *p_tcb)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    OS_TCB       *p_tcb1;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4a1c      	ldr	r2, [pc, #112]	@ (80013d4 <OS_RdyListRemove+0x84>)
 8001362:	4413      	add	r3, r2
 8001364:	617b      	str	r3, [r7, #20]
    p_tcb1     = p_tcb->PrevPtr;                                /* Point to next and previous OS_TCB in the list        */
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	613b      	str	r3, [r7, #16]
    p_tcb2     = p_tcb->NextPtr;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {                                /* Was the OS_TCB to remove at the head?                */
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d116      	bne.n	80013a6 <OS_RdyListRemove+0x56>
        if (p_tcb2 == (OS_TCB *)0) {                            /* Yes, was it the only OS_TCB?                         */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10c      	bne.n	8001398 <OS_RdyListRemove+0x48>
#if (OS_CFG_DBG_EN > 0u)
            p_rdy_list->NbrEntries =           0u;              /* Yes, no more entries                                 */
#endif
            p_rdy_list->HeadPtr    = (OS_TCB *)0;
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
            p_rdy_list->TailPtr    = (OS_TCB *)0;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
            OS_PrioRemove(p_tcb->Prio);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fd2f 	bl	8001df4 <OS_PrioRemove>
 8001396:	e013      	b.n	80013c0 <OS_RdyListRemove+0x70>
        } else {
#if (OS_CFG_DBG_EN > 0u)
            p_rdy_list->NbrEntries--;                           /* No,  one less entry                                  */
#endif
            p_tcb2->PrevPtr     = (OS_TCB *)0;                  /* adjust back link of new list head                    */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
            p_rdy_list->HeadPtr =  p_tcb2;                      /* adjust OS_RDY_LIST's new head                        */
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	e00c      	b.n	80013c0 <OS_RdyListRemove+0x70>
        }
    } else {
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries--;                               /* No,  one less entry                                  */
#endif
        p_tcb1->NextPtr = p_tcb2;
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	60da      	str	r2, [r3, #12]
        if (p_tcb2 == (OS_TCB *)0) {
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d103      	bne.n	80013ba <OS_RdyListRemove+0x6a>
            p_rdy_list->TailPtr = p_tcb1;                       /* Removing the TCB at the tail, adj the tail ptr       */
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	e002      	b.n	80013c0 <OS_RdyListRemove+0x70>
        } else {
            p_tcb2->PrevPtr     = p_tcb1;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	611a      	str	r2, [r3, #16]
        }
    }
    p_tcb->PrevPtr = (OS_TCB *)0;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
    p_tcb->NextPtr = (OS_TCB *)0;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	60da      	str	r2, [r3, #12]

    OS_TRACE_TASK_SUSPENDED(p_tcb);
}
 80013cc:	bf00      	nop
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20001354 	.word	0x20001354

080013d8 <OS_SchedRoundRobin>:
************************************************************************************************************************
*/

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
void  OS_SchedRoundRobin (OS_RDY_LIST  *p_rdy_list)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    OS_TCB  *p_tcb;
    CPU_SR_ALLOC();
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]


    if (OSSchedRoundRobinEn != OS_TRUE) {                       /* Make sure round-robin has been enabled               */
 80013e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001494 <OS_SchedRoundRobin+0xbc>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d14f      	bne.n	800148c <OS_SchedRoundRobin+0xb4>
        return;
    }

    CPU_CRITICAL_ENTER();
 80013ec:	2040      	movs	r0, #64	@ 0x40
 80013ee:	f7fe feef 	bl	80001d0 <CPU_SR_Save>
 80013f2:	60f8      	str	r0, [r7, #12]
    p_tcb = p_rdy_list->HeadPtr;                                /* Decrement time quanta counter                        */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60bb      	str	r3, [r7, #8]

    if (p_tcb == (OS_TCB *)0) {
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d103      	bne.n	8001408 <OS_SchedRoundRobin+0x30>
        CPU_CRITICAL_EXIT();
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f7fe fef3 	bl	80001ec <CPU_SR_Restore>
        return;
 8001406:	e042      	b.n	800148e <OS_SchedRoundRobin+0xb6>
    }

#if (OS_CFG_TASK_IDLE_EN > 0u)
    if (p_tcb == &OSIdleTaskTCB) {
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4a23      	ldr	r2, [pc, #140]	@ (8001498 <OS_SchedRoundRobin+0xc0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d103      	bne.n	8001418 <OS_SchedRoundRobin+0x40>
        CPU_CRITICAL_EXIT();
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f7fe feeb 	bl	80001ec <CPU_SR_Restore>
        return;
 8001416:	e03a      	b.n	800148e <OS_SchedRoundRobin+0xb6>
    }
#endif

    if (p_tcb->TimeQuantaCtr > 0u) {
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800141c:	2b00      	cmp	r3, #0
 800141e:	d004      	beq.n	800142a <OS_SchedRoundRobin+0x52>
        p_tcb->TimeQuantaCtr--;
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001424:	1e5a      	subs	r2, r3, #1
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (p_tcb->TimeQuantaCtr > 0u) {                            /* Task not done with its time quanta                   */
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <OS_SchedRoundRobin+0x62>
        CPU_CRITICAL_EXIT();
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f7fe feda 	bl	80001ec <CPU_SR_Restore>
        return;
 8001438:	e029      	b.n	800148e <OS_SchedRoundRobin+0xb6>
    }

    if (p_rdy_list->HeadPtr == p_rdy_list->TailPtr) {           /* See if it's time to time slice current task          */
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	429a      	cmp	r2, r3
 8001444:	d103      	bne.n	800144e <OS_SchedRoundRobin+0x76>
        CPU_CRITICAL_EXIT();                                    /* ... only if multiple tasks at same priority          */
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7fe fed0 	bl	80001ec <CPU_SR_Restore>
        return;
 800144c:	e01f      	b.n	800148e <OS_SchedRoundRobin+0xb6>
    }

    if (OSSchedLockNestingCtr > 0u) {                           /* Can't round-robin if the scheduler is locked         */
 800144e:	4b13      	ldr	r3, [pc, #76]	@ (800149c <OS_SchedRoundRobin+0xc4>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <OS_SchedRoundRobin+0x86>
        CPU_CRITICAL_EXIT();
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f7fe fec8 	bl	80001ec <CPU_SR_Restore>
        return;
 800145c:	e017      	b.n	800148e <OS_SchedRoundRobin+0xb6>
    }

    OS_RdyListMoveHeadToTail(p_rdy_list);                       /* Move current OS_TCB to the end of the list           */
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff2a 	bl	80012b8 <OS_RdyListMoveHeadToTail>
    p_tcb = p_rdy_list->HeadPtr;                                /* Point to new OS_TCB at head of the list              */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60bb      	str	r3, [r7, #8]
    if (p_tcb->TimeQuanta == 0u) {                              /* See if we need to use the default time slice         */
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	2b00      	cmp	r3, #0
 8001470:	d104      	bne.n	800147c <OS_SchedRoundRobin+0xa4>
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
 8001472:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <OS_SchedRoundRobin+0xc8>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	651a      	str	r2, [r3, #80]	@ 0x50
 800147a:	e003      	b.n	8001484 <OS_SchedRoundRobin+0xac>
    } else {
        p_tcb->TimeQuantaCtr = p_tcb->TimeQuanta;               /* Load time slice counter with new time                */
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    CPU_CRITICAL_EXIT();
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7fe feb1 	bl	80001ec <CPU_SR_Restore>
 800148a:	e000      	b.n	800148e <OS_SchedRoundRobin+0xb6>
        return;
 800148c:	bf00      	nop
}
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	2000155c 	.word	0x2000155c
 8001498:	2000128c 	.word	0x2000128c
 800149c:	20001554 	.word	0x20001554
 80014a0:	20001558 	.word	0x20001558

080014a4 <OS_TaskBlock>:
************************************************************************************************************************
*/

void  OS_TaskBlock (OS_TCB   *p_tcb,
                    OS_TICK   timeout)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]

    elapsed = OS_DynTickGet();
#endif

#if (OS_CFG_TICK_EN > 0u)
    if (timeout > 0u) {                                         /* Add task to tick list if timeout non zero            */
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00b      	beq.n	80014cc <OS_TaskBlock+0x28>
#if (OS_CFG_DYN_TICK_EN > 0u)
        (void)OS_TickListInsert(p_tcb, elapsed, (OSTickCtr + elapsed), timeout);
#else
        (void)OS_TickListInsert(p_tcb,      0u,             OSTickCtr, timeout);
 80014b4:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <OS_TaskBlock+0x40>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2100      	movs	r1, #0
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f001 fbf7 	bl	8002cb0 <OS_TickListInsert>
#endif
        p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2203      	movs	r2, #3
 80014c6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 80014ca:	e003      	b.n	80014d4 <OS_TaskBlock+0x30>
    } else {
        p_tcb->TaskState = OS_TASK_STATE_PEND;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2202      	movs	r2, #2
 80014d0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    }
#else
    (void)timeout;
    p_tcb->TaskState = OS_TASK_STATE_PEND;
#endif
    OS_RdyListRemove(p_tcb);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff3b 	bl	8001350 <OS_RdyListRemove>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20001624 	.word	0x20001624

080014e8 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_MemInit (OS_ERR  *p_err)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSMemDbgListPtr = (OS_MEM *)0;
    OSMemQty        = 0u;
#endif
   *p_err           = OS_ERR_NONE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	801a      	strh	r2, [r3, #0]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <OS_MsgPoolInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MsgPoolInit (OS_ERR  *p_err)
{
 8001504:	b480      	push	{r7}
 8001506:	b087      	sub	sp, #28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    OS_MSG_QTY   i;
    OS_MSG_QTY   loops;


#if (OS_CFG_ARG_CHK_EN > 0u)
    if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
 800150c:	4b29      	ldr	r3, [pc, #164]	@ (80015b4 <OS_MsgPoolInit+0xb0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d104      	bne.n	800151e <OS_MsgPoolInit+0x1a>
       *p_err = OS_ERR_MSG_POOL_NULL_PTR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f245 721e 	movw	r2, #22302	@ 0x571e
 800151a:	801a      	strh	r2, [r3, #0]
        return;
 800151c:	e045      	b.n	80015aa <OS_MsgPoolInit+0xa6>
    }
    if (OSCfg_MsgPoolSize == 0u) {
 800151e:	4b26      	ldr	r3, [pc, #152]	@ (80015b8 <OS_MsgPoolInit+0xb4>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d104      	bne.n	8001530 <OS_MsgPoolInit+0x2c>
       *p_err = OS_ERR_MSG_POOL_EMPTY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f245 721d 	movw	r2, #22301	@ 0x571d
 800152c:	801a      	strh	r2, [r3, #0]
        return;
 800152e:	e03c      	b.n	80015aa <OS_MsgPoolInit+0xa6>
    }
#endif

    p_msg1 = OSCfg_MsgPoolBasePtr;
 8001530:	4b20      	ldr	r3, [pc, #128]	@ (80015b4 <OS_MsgPoolInit+0xb0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	617b      	str	r3, [r7, #20]
    p_msg2 = OSCfg_MsgPoolBasePtr;
 8001536:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <OS_MsgPoolInit+0xb0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	613b      	str	r3, [r7, #16]
    p_msg2++;
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	330c      	adds	r3, #12
 8001540:	613b      	str	r3, [r7, #16]
    loops  = OSCfg_MsgPoolSize - 1u;
 8001542:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <OS_MsgPoolInit+0xb4>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	3b01      	subs	r3, #1
 8001548:	81bb      	strh	r3, [r7, #12]
    for (i = 0u; i < loops; i++) {                              /* Init. list of free OS_MSGs                           */
 800154a:	2300      	movs	r3, #0
 800154c:	81fb      	strh	r3, [r7, #14]
 800154e:	e011      	b.n	8001574 <OS_MsgPoolInit+0x70>
        p_msg1->NextPtr = p_msg2;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	601a      	str	r2, [r3, #0]
        p_msg1->MsgPtr  = (void *)0;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	2200      	movs	r2, #0
 800155a:	605a      	str	r2, [r3, #4]
        p_msg1->MsgSize =         0u;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2200      	movs	r2, #0
 8001560:	811a      	strh	r2, [r3, #8]
#if (OS_CFG_TS_EN > 0u)
        p_msg1->MsgTS   =         0u;
#endif
        p_msg1++;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	330c      	adds	r3, #12
 8001566:	617b      	str	r3, [r7, #20]
        p_msg2++;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	330c      	adds	r3, #12
 800156c:	613b      	str	r3, [r7, #16]
    for (i = 0u; i < loops; i++) {                              /* Init. list of free OS_MSGs                           */
 800156e:	89fb      	ldrh	r3, [r7, #14]
 8001570:	3301      	adds	r3, #1
 8001572:	81fb      	strh	r3, [r7, #14]
 8001574:	89fa      	ldrh	r2, [r7, #14]
 8001576:	89bb      	ldrh	r3, [r7, #12]
 8001578:	429a      	cmp	r2, r3
 800157a:	d3e9      	bcc.n	8001550 <OS_MsgPoolInit+0x4c>
    }
    p_msg1->NextPtr = (OS_MSG *)0;                              /* Last OS_MSG                                          */
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
    p_msg1->MsgPtr  = (void   *)0;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	2200      	movs	r2, #0
 8001586:	605a      	str	r2, [r3, #4]
    p_msg1->MsgSize =           0u;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	2200      	movs	r2, #0
 800158c:	811a      	strh	r2, [r3, #8]
#if (OS_CFG_TS_EN > 0u)
    p_msg1->MsgTS   =           0u;
#endif

    OSMsgPool.NextPtr    = OSCfg_MsgPoolBasePtr;
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <OS_MsgPoolInit+0xb0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a0a      	ldr	r2, [pc, #40]	@ (80015bc <OS_MsgPoolInit+0xb8>)
 8001594:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree    = OSCfg_MsgPoolSize;
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <OS_MsgPoolInit+0xb4>)
 8001598:	881a      	ldrh	r2, [r3, #0]
 800159a:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <OS_MsgPoolInit+0xb8>)
 800159c:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed    = 0u;
 800159e:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <OS_MsgPoolInit+0xb8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	80da      	strh	r2, [r3, #6]
#if (OS_CFG_DBG_EN > 0u)
    OSMsgPool.NbrUsedMax = 0u;
#endif
   *p_err                = OS_ERR_NONE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	801a      	strh	r2, [r3, #0]
}
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	08004788 	.word	0x08004788
 80015b8:	08004784 	.word	0x08004784
 80015bc:	20001340 	.word	0x20001340

080015c0 <OS_MsgQFreeAll>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_MSG_QTY  OS_MsgQFreeAll (OS_MSG_Q  *p_msg_q)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
    OS_MSG      *p_msg;
    OS_MSG_QTY   qty;



    qty = p_msg_q->NbrEntries;                                  /* Get the number of OS_MSGs being freed                */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	895b      	ldrh	r3, [r3, #10]
 80015cc:	81fb      	strh	r3, [r7, #14]
    if (p_msg_q->NbrEntries > 0u) {
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	895b      	ldrh	r3, [r3, #10]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d023      	beq.n	800161e <OS_MsgQFreeAll+0x5e>
        p_msg                   = p_msg_q->InPtr;               /* Point to end of message chain                        */
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60bb      	str	r3, [r7, #8]
        p_msg->NextPtr          = OSMsgPool.NextPtr;
 80015dc:	4b13      	ldr	r3, [pc, #76]	@ (800162c <OS_MsgQFreeAll+0x6c>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	601a      	str	r2, [r3, #0]
        OSMsgPool.NextPtr       = p_msg_q->OutPtr;              /* Point to beginning of message chain                  */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4a10      	ldr	r2, [pc, #64]	@ (800162c <OS_MsgQFreeAll+0x6c>)
 80015ea:	6013      	str	r3, [r2, #0]
        OSMsgPool.NbrUsed      -= p_msg_q->NbrEntries;          /* Update statistics for free list of messages          */
 80015ec:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <OS_MsgQFreeAll+0x6c>)
 80015ee:	88da      	ldrh	r2, [r3, #6]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	895b      	ldrh	r3, [r3, #10]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <OS_MsgQFreeAll+0x6c>)
 80015fa:	80da      	strh	r2, [r3, #6]
        OSMsgPool.NbrFree      += p_msg_q->NbrEntries;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <OS_MsgQFreeAll+0x6c>)
 80015fe:	889a      	ldrh	r2, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	895b      	ldrh	r3, [r3, #10]
 8001604:	4413      	add	r3, r2
 8001606:	b29a      	uxth	r2, r3
 8001608:	4b08      	ldr	r3, [pc, #32]	@ (800162c <OS_MsgQFreeAll+0x6c>)
 800160a:	809a      	strh	r2, [r3, #4]
        p_msg_q->NbrEntries     =           0u;                 /* Flush the message queue                              */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	815a      	strh	r2, [r3, #10]
#if (OS_CFG_DBG_EN > 0u)
        p_msg_q->NbrEntriesMax  =           0u;
#endif
        p_msg_q->InPtr          = (OS_MSG *)0;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
        p_msg_q->OutPtr         = (OS_MSG *)0;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	605a      	str	r2, [r3, #4]
    }
    return (qty);
 800161e:	89fb      	ldrh	r3, [r7, #14]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	20001340 	.word	0x20001340

08001630 <OS_MsgQInit>:
************************************************************************************************************************
*/

void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
                   OS_MSG_QTY   size)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
    p_msg_q->NbrEntriesSize = size;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	811a      	strh	r2, [r3, #8]
    p_msg_q->NbrEntries     =           0u;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	815a      	strh	r2, [r3, #10]
#if (OS_CFG_DBG_EN > 0u)
    p_msg_q->NbrEntriesMax  =           0u;
#endif
    p_msg_q->InPtr          = (OS_MSG *)0;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
    p_msg_q->OutPtr         = (OS_MSG *)0;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <OS_MsgQGet>:

void  *OS_MsgQGet (OS_MSG_Q     *p_msg_q,
                   OS_MSG_SIZE  *p_msg_size,
                   CPU_TS       *p_ts,
                   OS_ERR       *p_err)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]

#if (OS_CFG_TS_EN == 0u)
    (void)p_ts;                                                 /* Prevent compiler warning for not using 'ts'          */
#endif

    if (p_msg_q->NbrEntries == 0u) {                            /* Is the queue empty?                                  */
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	895b      	ldrh	r3, [r3, #10]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d108      	bne.n	8001688 <OS_MsgQGet+0x28>
       *p_msg_size = 0u;                                        /* Yes                                                  */
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2200      	movs	r2, #0
 800167a:	801a      	strh	r2, [r3, #0]
#if (OS_CFG_TS_EN > 0u)
        if (p_ts != (CPU_TS *)0) {
           *p_ts = 0u;
        }
#endif
       *p_err = OS_ERR_Q_EMPTY;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	f246 5292 	movw	r2, #26002	@ 0x6592
 8001682:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8001684:	2300      	movs	r3, #0
 8001686:	e035      	b.n	80016f4 <OS_MsgQGet+0x94>
    }

    p_msg           = p_msg_q->OutPtr;                          /* No, get the next message to extract from the queue   */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	617b      	str	r3, [r7, #20]
    p_void          = p_msg->MsgPtr;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	613b      	str	r3, [r7, #16]
   *p_msg_size      = p_msg->MsgSize;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	891a      	ldrh	r2, [r3, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	801a      	strh	r2, [r3, #0]
    if (p_ts != (CPU_TS *)0) {
       *p_ts = p_msg->MsgTS;
    }
#endif

    p_msg_q->OutPtr = p_msg->NextPtr;                           /* Point to next message to extract                     */
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	605a      	str	r2, [r3, #4]

    if (p_msg_q->OutPtr == (OS_MSG *)0) {                       /* Are there any more messages in the queue?            */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d106      	bne.n	80016ba <OS_MsgQGet+0x5a>
        p_msg_q->InPtr      = (OS_MSG *)0;                      /* No                                                   */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
        p_msg_q->NbrEntries =           0u;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	815a      	strh	r2, [r3, #10]
 80016b8:	e005      	b.n	80016c6 <OS_MsgQGet+0x66>
    } else {
        p_msg_q->NbrEntries--;                                  /* Yes, One less message in the queue                   */
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	895b      	ldrh	r3, [r3, #10]
 80016be:	3b01      	subs	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	815a      	strh	r2, [r3, #10]
    }

    p_msg->NextPtr    = OSMsgPool.NextPtr;                      /* Return message control block to free list            */
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <OS_MsgQGet+0xa0>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	601a      	str	r2, [r3, #0]
    OSMsgPool.NextPtr = p_msg;
 80016ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001700 <OS_MsgQGet+0xa0>)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree++;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <OS_MsgQGet+0xa0>)
 80016d6:	889b      	ldrh	r3, [r3, #4]
 80016d8:	3301      	adds	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <OS_MsgQGet+0xa0>)
 80016de:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed--;
 80016e0:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <OS_MsgQGet+0xa0>)
 80016e2:	88db      	ldrh	r3, [r3, #6]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <OS_MsgQGet+0xa0>)
 80016ea:	80da      	strh	r2, [r3, #6]

   *p_err             = OS_ERR_NONE;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2200      	movs	r2, #0
 80016f0:	801a      	strh	r2, [r3, #0]
    return (p_void);
 80016f2:	693b      	ldr	r3, [r7, #16]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	20001340 	.word	0x20001340

08001704 <OS_MsgQPut>:
                  void         *p_void,
                  OS_MSG_SIZE   msg_size,
                  OS_OPT        opt,
                  CPU_TS        ts,
                  OS_ERR       *p_err)
{
 8001704:	b480      	push	{r7}
 8001706:	b087      	sub	sp, #28
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	4611      	mov	r1, r2
 8001710:	461a      	mov	r2, r3
 8001712:	460b      	mov	r3, r1
 8001714:	80fb      	strh	r3, [r7, #6]
 8001716:	4613      	mov	r3, r2
 8001718:	80bb      	strh	r3, [r7, #4]

#if (OS_CFG_TS_EN == 0u)
    (void)ts;                                                   /* Prevent compiler warning for not using 'ts'          */
#endif

    if (p_msg_q->NbrEntries >= p_msg_q->NbrEntriesSize) {
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	895a      	ldrh	r2, [r3, #10]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	891b      	ldrh	r3, [r3, #8]
 8001722:	429a      	cmp	r2, r3
 8001724:	d304      	bcc.n	8001730 <OS_MsgQPut+0x2c>
       *p_err = OS_ERR_Q_MAX;                                   /* Message queue cannot accept any more messages        */
 8001726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001728:	f246 5293 	movw	r2, #26003	@ 0x6593
 800172c:	801a      	strh	r2, [r3, #0]
        return;
 800172e:	e054      	b.n	80017da <OS_MsgQPut+0xd6>
    }

    if (OSMsgPool.NbrFree == 0u) {
 8001730:	4b2c      	ldr	r3, [pc, #176]	@ (80017e4 <OS_MsgQPut+0xe0>)
 8001732:	889b      	ldrh	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d104      	bne.n	8001742 <OS_MsgQPut+0x3e>
       *p_err = OS_ERR_MSG_POOL_EMPTY;                          /* No more OS_MSG to use                                */
 8001738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173a:	f245 721d 	movw	r2, #22301	@ 0x571d
 800173e:	801a      	strh	r2, [r3, #0]
        return;
 8001740:	e04b      	b.n	80017da <OS_MsgQPut+0xd6>
    }

    p_msg = OSMsgPool.NextPtr;                                  /* Remove message control block from free list          */
 8001742:	4b28      	ldr	r3, [pc, #160]	@ (80017e4 <OS_MsgQPut+0xe0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	617b      	str	r3, [r7, #20]
    OSMsgPool.NextPtr = p_msg->NextPtr;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a25      	ldr	r2, [pc, #148]	@ (80017e4 <OS_MsgQPut+0xe0>)
 800174e:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree--;
 8001750:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <OS_MsgQPut+0xe0>)
 8001752:	889b      	ldrh	r3, [r3, #4]
 8001754:	3b01      	subs	r3, #1
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <OS_MsgQPut+0xe0>)
 800175a:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed++;
 800175c:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <OS_MsgQPut+0xe0>)
 800175e:	88db      	ldrh	r3, [r3, #6]
 8001760:	3301      	adds	r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <OS_MsgQPut+0xe0>)
 8001766:	80da      	strh	r2, [r3, #6]
    if (OSMsgPool.NbrUsedMax < OSMsgPool.NbrUsed) {
        OSMsgPool.NbrUsedMax = OSMsgPool.NbrUsed;
    }
#endif

    if (p_msg_q->NbrEntries == 0u) {                            /* Is this first message placed in the queue?           */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	895b      	ldrh	r3, [r3, #10]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10c      	bne.n	800178a <OS_MsgQPut+0x86>
        p_msg_q->InPtr         = p_msg;                         /* Yes                                                  */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	601a      	str	r2, [r3, #0]
        p_msg_q->OutPtr        = p_msg;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	605a      	str	r2, [r3, #4]
        p_msg_q->NbrEntries    =           1u;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2201      	movs	r2, #1
 8001780:	815a      	strh	r2, [r3, #10]
        p_msg->NextPtr         = (OS_MSG *)0;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	e01e      	b.n	80017c8 <OS_MsgQPut+0xc4>
    } else {                                                    /* No                                                   */
        if ((opt & OS_OPT_POST_LIFO) == OS_OPT_POST_FIFO) {     /* Is it FIFO or LIFO?                                  */
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10c      	bne.n	80017ae <OS_MsgQPut+0xaa>
            p_msg_in           = p_msg_q->InPtr;                /* FIFO, add to the head                                */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	613b      	str	r3, [r7, #16]
            p_msg_in->NextPtr  = p_msg;
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	601a      	str	r2, [r3, #0]
            p_msg_q->InPtr     = p_msg;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	601a      	str	r2, [r3, #0]
            p_msg->NextPtr     = (OS_MSG *)0;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	e006      	b.n	80017bc <OS_MsgQPut+0xb8>
        } else {
            p_msg->NextPtr     = p_msg_q->OutPtr;               /* LIFO, add to the tail                                */
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	601a      	str	r2, [r3, #0]
            p_msg_q->OutPtr    = p_msg;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	605a      	str	r2, [r3, #4]
        }
        p_msg_q->NbrEntries++;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	895b      	ldrh	r3, [r3, #10]
 80017c0:	3301      	adds	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	815a      	strh	r2, [r3, #10]
    if (p_msg_q->NbrEntriesMax < p_msg_q->NbrEntries) {
        p_msg_q->NbrEntriesMax = p_msg_q->NbrEntries;
    }
#endif

    p_msg->MsgPtr  = p_void;                                    /* Deposit message in the message queue entry           */
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	605a      	str	r2, [r3, #4]
    p_msg->MsgSize = msg_size;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	88fa      	ldrh	r2, [r7, #6]
 80017d2:	811a      	strh	r2, [r3, #8]
#if (OS_CFG_TS_EN > 0u)
    p_msg->MsgTS   = ts;
#endif
   *p_err          = OS_ERR_NONE;
 80017d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d6:	2200      	movs	r2, #0
 80017d8:	801a      	strh	r2, [r3, #0]
}
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	20001340 	.word	0x20001340

080017e8 <OSMutexCreate>:
*/

void  OSMutexCreate (OS_MUTEX  *p_mutex,
                     CPU_CHAR  *p_name,
                     OS_ERR    *p_err)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to be called from an ISR                 */
 80017f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001870 <OSMutexCreate+0x88>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d004      	beq.n	800180a <OSMutexCreate+0x22>
       *p_err = OS_ERR_CREATE_ISR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f642 62e1 	movw	r2, #12001	@ 0x2ee1
 8001806:	801a      	strh	r2, [r3, #0]
        return;
 8001808:	e02f      	b.n	800186a <OSMutexCreate+0x82>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_mutex == (OS_MUTEX *)0) {                             /* Validate 'p_mutex'                                   */
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d104      	bne.n	800181a <OSMutexCreate+0x32>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 8001816:	801a      	strh	r2, [r3, #0]
        return;
 8001818:	e027      	b.n	800186a <OSMutexCreate+0x82>
    }
#endif

    CPU_CRITICAL_ENTER();
 800181a:	2040      	movs	r0, #64	@ 0x40
 800181c:	f7fe fcd8 	bl	80001d0 <CPU_SR_Save>
 8001820:	6178      	str	r0, [r7, #20]
#if (OS_OBJ_TYPE_REQ > 0u)
#if (OS_CFG_OBJ_CREATED_CHK_EN > 0u)
    if (p_mutex->Type == OS_OBJ_TYPE_MUTEX) {
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a13      	ldr	r2, [pc, #76]	@ (8001874 <OSMutexCreate+0x8c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d107      	bne.n	800183c <OSMutexCreate+0x54>
        CPU_CRITICAL_EXIT();
 800182c:	6978      	ldr	r0, [r7, #20]
 800182e:	f7fe fcdd 	bl	80001ec <CPU_SR_Restore>
        *p_err = OS_ERR_OBJ_CREATED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f645 52c1 	movw	r2, #24001	@ 0x5dc1
 8001838:	801a      	strh	r2, [r3, #0]
        return;
 800183a:	e016      	b.n	800186a <OSMutexCreate+0x82>
    }
#endif
    p_mutex->Type              =  OS_OBJ_TYPE_MUTEX;            /* Mark the data structure as a mutex                   */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a0d      	ldr	r2, [pc, #52]	@ (8001874 <OSMutexCreate+0x8c>)
 8001840:	601a      	str	r2, [r3, #0]
#if (OS_CFG_DBG_EN > 0u)
    p_mutex->NamePtr           =  p_name;
#else
    (void)p_name;
#endif
    p_mutex->MutexGrpNextPtr   = (OS_MUTEX *)0;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
    p_mutex->OwnerTCBPtr       = (OS_TCB   *)0;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
    p_mutex->OwnerNestingCtr   =             0u;                /* Mutex is available                                   */
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	751a      	strb	r2, [r3, #20]
#if (OS_CFG_TS_EN > 0u)
    p_mutex->TS                =             0u;
#endif
    OS_PendListInit(&p_mutex->PendList);                        /* Initialize the waiting list                          */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3304      	adds	r3, #4
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fb59 	bl	8000f10 <OS_PendListInit>
    OS_MutexDbgListAdd(p_mutex);
    OSMutexQty++;
#endif

    OS_TRACE_MUTEX_CREATE(p_mutex, p_name);
    CPU_CRITICAL_EXIT();
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7fe fcc4 	bl	80001ec <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	801a      	strh	r2, [r3, #0]
}
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20001334 	.word	0x20001334
 8001874:	5854554d 	.word	0x5854554d

08001878 <OSMutexPend>:
void  OSMutexPend (OS_MUTEX  *p_mutex,
                   OS_TICK    timeout,
                   OS_OPT     opt,
                   CPU_TS    *p_ts,
                   OS_ERR    *p_err)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	4613      	mov	r3, r2
 8001886:	80fb      	strh	r3, [r7, #6]
    OS_TCB  *p_tcb;
    CPU_SR_ALLOC();
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
 800188c:	4b6b      	ldr	r3, [pc, #428]	@ (8001a3c <OSMutexPend+0x1c4>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d004      	beq.n	800189e <OSMutexPend+0x26>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_PEND_ISR);
       *p_err = OS_ERR_PEND_ISR;
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	f246 12ae 	movw	r2, #25006	@ 0x61ae
 800189a:	801a      	strh	r2, [r3, #0]
        return;
 800189c:	e0cb      	b.n	8001a36 <OSMutexPend+0x1be>
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 800189e:	4b68      	ldr	r3, [pc, #416]	@ (8001a40 <OSMutexPend+0x1c8>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d004      	beq.n	80018b0 <OSMutexPend+0x38>
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OS_NOT_RUNNING);
       *p_err = OS_ERR_OS_NOT_RUNNING;
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	f645 6289 	movw	r2, #24201	@ 0x5e89
 80018ac:	801a      	strh	r2, [r3, #0]
        return;
 80018ae:	e0c2      	b.n	8001a36 <OSMutexPend+0x1be>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_mutex == (OS_MUTEX *)0) {                             /* Validate arguments                                   */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d104      	bne.n	80018c0 <OSMutexPend+0x48>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OBJ_PTR_NULL);
       *p_err = OS_ERR_OBJ_PTR_NULL;
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 80018bc:	801a      	strh	r2, [r3, #0]
        return;
 80018be:	e0ba      	b.n	8001a36 <OSMutexPend+0x1be>
    }
    switch (opt) {                                              /* Validate 'opt'                                       */
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <OSMutexPend+0x5e>
 80018c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018ca:	d004      	beq.n	80018d6 <OSMutexPend+0x5e>
             break;

        default:
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
             OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OPT_INVALID);
            *p_err = OS_ERR_OPT_INVALID;
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	f645 6225 	movw	r2, #24101	@ 0x5e25
 80018d2:	801a      	strh	r2, [r3, #0]
             return;
 80018d4:	e0af      	b.n	8001a36 <OSMutexPend+0x1be>
             break;
 80018d6:	bf00      	nop
    }
#endif

#if (OS_CFG_OBJ_TYPE_CHK_EN > 0u)
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {                   /* Make sure mutex was created                          */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a59      	ldr	r2, [pc, #356]	@ (8001a44 <OSMutexPend+0x1cc>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d004      	beq.n	80018ec <OSMutexPend+0x74>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OBJ_TYPE);
       *p_err = OS_ERR_OBJ_TYPE;
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	f645 52c4 	movw	r2, #24004	@ 0x5dc4
 80018e8:	801a      	strh	r2, [r3, #0]
        return;
 80018ea:	e0a4      	b.n	8001a36 <OSMutexPend+0x1be>
    }
#endif

    CPU_CRITICAL_ENTER();
 80018ec:	2040      	movs	r0, #64	@ 0x40
 80018ee:	f7fe fc6f 	bl	80001d0 <CPU_SR_Save>
 80018f2:	6178      	str	r0, [r7, #20]
    if (p_mutex->OwnerNestingCtr == 0u) {                       /* Resource available?                                  */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	7d1b      	ldrb	r3, [r3, #20]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d113      	bne.n	8001924 <OSMutexPend+0xac>
        p_mutex->OwnerTCBPtr     = OSTCBCurPtr;                 /* Yes, caller may proceed                              */
 80018fc:	4b52      	ldr	r3, [pc, #328]	@ (8001a48 <OSMutexPend+0x1d0>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	611a      	str	r2, [r3, #16]
        p_mutex->OwnerNestingCtr = 1u;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2201      	movs	r2, #1
 8001908:	751a      	strb	r2, [r3, #20]
#if (OS_CFG_TS_EN > 0u)
        if (p_ts != (CPU_TS *)0) {
           *p_ts = p_mutex->TS;
        }
#endif
        OS_MutexGrpAdd(OSTCBCurPtr, p_mutex);                   /* Add mutex to owner's group                           */
 800190a:	4b4f      	ldr	r3, [pc, #316]	@ (8001a48 <OSMutexPend+0x1d0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68f9      	ldr	r1, [r7, #12]
 8001910:	4618      	mov	r0, r3
 8001912:	f000 f97b 	bl	8001c0c <OS_MutexGrpAdd>
        CPU_CRITICAL_EXIT();
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7fe fc68 	bl	80001ec <CPU_SR_Restore>
        OS_TRACE_MUTEX_PEND(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_NONE);
       *p_err = OS_ERR_NONE;
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	2200      	movs	r2, #0
 8001920:	801a      	strh	r2, [r3, #0]
        return;
 8001922:	e088      	b.n	8001a36 <OSMutexPend+0x1be>
    }

    if (OSTCBCurPtr == p_mutex->OwnerTCBPtr) {                  /* See if current task is already the owner of the mutex*/
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	4b47      	ldr	r3, [pc, #284]	@ (8001a48 <OSMutexPend+0x1d0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d119      	bne.n	8001964 <OSMutexPend+0xec>
        if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)-1) {
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	7d1b      	ldrb	r3, [r3, #20]
 8001934:	2bff      	cmp	r3, #255	@ 0xff
 8001936:	d107      	bne.n	8001948 <OSMutexPend+0xd0>
            CPU_CRITICAL_EXIT();
 8001938:	6978      	ldr	r0, [r7, #20]
 800193a:	f7fe fc57 	bl	80001ec <CPU_SR_Restore>
            OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_MUTEX_OVF);
           *p_err = OS_ERR_MUTEX_OVF;
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	f245 7284 	movw	r2, #22404	@ 0x5784
 8001944:	801a      	strh	r2, [r3, #0]
            return;
 8001946:	e076      	b.n	8001a36 <OSMutexPend+0x1be>
        }
        p_mutex->OwnerNestingCtr++;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	7d1b      	ldrb	r3, [r3, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	b2da      	uxtb	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	751a      	strb	r2, [r3, #20]
#if (OS_CFG_TS_EN > 0u)
        if (p_ts != (CPU_TS *)0) {
           *p_ts = p_mutex->TS;
        }
#endif
        CPU_CRITICAL_EXIT();
 8001954:	6978      	ldr	r0, [r7, #20]
 8001956:	f7fe fc49 	bl	80001ec <CPU_SR_Restore>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_MUTEX_OWNER);
       *p_err = OS_ERR_MUTEX_OWNER;                             /* Indicate that current task already owns the mutex    */
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	f245 7282 	movw	r2, #22402	@ 0x5782
 8001960:	801a      	strh	r2, [r3, #0]
        return;
 8001962:	e068      	b.n	8001a36 <OSMutexPend+0x1be>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {               /* Caller wants to block if not available?              */
 8001964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001968:	2b00      	cmp	r3, #0
 800196a:	da07      	bge.n	800197c <OSMutexPend+0x104>
        CPU_CRITICAL_EXIT();
 800196c:	6978      	ldr	r0, [r7, #20]
 800196e:	f7fe fc3d 	bl	80001ec <CPU_SR_Restore>
           *p_ts = 0u;
        }
#endif
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_PEND_WOULD_BLOCK);
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                        /* No                                                   */
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	f246 12b0 	movw	r2, #25008	@ 0x61b0
 8001978:	801a      	strh	r2, [r3, #0]
        return;
 800197a:	e05c      	b.n	8001a36 <OSMutexPend+0x1be>
    } else {
        if (OSSchedLockNestingCtr > 0u) {                       /* Can't pend when the scheduler is locked              */
 800197c:	4b33      	ldr	r3, [pc, #204]	@ (8001a4c <OSMutexPend+0x1d4>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <OSMutexPend+0x11c>
            CPU_CRITICAL_EXIT();
 8001984:	6978      	ldr	r0, [r7, #20]
 8001986:	f7fe fc31 	bl	80001ec <CPU_SR_Restore>
               *p_ts = 0u;
            }
#endif
            OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_SCHED_LOCKED);
           *p_err = OS_ERR_SCHED_LOCKED;
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	f646 5263 	movw	r2, #28003	@ 0x6d63
 8001990:	801a      	strh	r2, [r3, #0]
            return;
 8001992:	e050      	b.n	8001a36 <OSMutexPend+0x1be>
        }
    }

    p_tcb = p_mutex->OwnerTCBPtr;                               /* Point to the TCB of the Mutex owner                  */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	613b      	str	r3, [r7, #16]
    if (p_tcb->Prio > OSTCBCurPtr->Prio) {                      /* See if mutex owner has a lower priority than current */
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80019a0:	4b29      	ldr	r3, [pc, #164]	@ (8001a48 <OSMutexPend+0x1d0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d907      	bls.n	80019bc <OSMutexPend+0x144>
        OS_TaskChangePrio(p_tcb, OSTCBCurPtr->Prio);
 80019ac:	4b26      	ldr	r3, [pc, #152]	@ (8001a48 <OSMutexPend+0x1d0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80019b4:	4619      	mov	r1, r3
 80019b6:	6938      	ldr	r0, [r7, #16]
 80019b8:	f001 f8a8 	bl	8002b0c <OS_TaskChangePrio>
        OS_TRACE_MUTEX_TASK_PRIO_INHERIT(p_tcb, p_tcb->Prio);
    }

    OS_Pend((OS_PEND_OBJ *)((void *)p_mutex),                   /* Block task pending on Mutex                          */
 80019bc:	4b22      	ldr	r3, [pc, #136]	@ (8001a48 <OSMutexPend+0x1d0>)
 80019be:	6819      	ldr	r1, [r3, #0]
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2204      	movs	r2, #4
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f7ff fa5d 	bl	8000e84 <OS_Pend>
             OSTCBCurPtr,
             OS_TASK_PEND_ON_MUTEX,
             timeout);

    CPU_CRITICAL_EXIT();
 80019ca:	6978      	ldr	r0, [r7, #20]
 80019cc:	f7fe fc0e 	bl	80001ec <CPU_SR_Restore>
    OS_TRACE_MUTEX_PEND_BLOCK(p_mutex);
    OSSched();                                                  /* Find the next highest priority task ready to run     */
 80019d0:	f7ff f95a 	bl	8000c88 <OSSched>

    CPU_CRITICAL_ENTER();
 80019d4:	2040      	movs	r0, #64	@ 0x40
 80019d6:	f7fe fbfb 	bl	80001d0 <CPU_SR_Save>
 80019da:	6178      	str	r0, [r7, #20]
    switch (OSTCBCurPtr->PendStatus) {
 80019dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <OSMutexPend+0x1d0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d81e      	bhi.n	8001a26 <OSMutexPend+0x1ae>
 80019e8:	a201      	add	r2, pc, #4	@ (adr r2, 80019f0 <OSMutexPend+0x178>)
 80019ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ee:	bf00      	nop
 80019f0:	08001a01 	.word	0x08001a01
 80019f4:	08001a09 	.word	0x08001a09
 80019f8:	08001a1d 	.word	0x08001a1d
 80019fc:	08001a13 	.word	0x08001a13
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_MUTEX_PEND(p_mutex);
            *p_err = OS_ERR_NONE;
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	2200      	movs	r2, #0
 8001a04:	801a      	strh	r2, [r3, #0]
             break;
 8001a06:	e013      	b.n	8001a30 <OSMutexPend+0x1b8>
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_PEND_ABORT;
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	f246 12a9 	movw	r2, #25001	@ 0x61a9
 8001a0e:	801a      	strh	r2, [r3, #0]
             break;
 8001a10:	e00e      	b.n	8001a30 <OSMutexPend+0x1b8>
             if (p_ts != (CPU_TS *)0) {
                *p_ts = 0u;
             }
#endif
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_TIMEOUT;
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	f247 22d9 	movw	r2, #29401	@ 0x72d9
 8001a18:	801a      	strh	r2, [r3, #0]
             break;
 8001a1a:	e009      	b.n	8001a30 <OSMutexPend+0x1b8>
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_OBJ_DEL;
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	f645 52c2 	movw	r2, #24002	@ 0x5dc2
 8001a22:	801a      	strh	r2, [r3, #0]
             break;
 8001a24:	e004      	b.n	8001a30 <OSMutexPend+0x1b8>

        default:
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_STATUS_INVALID;
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	f646 622e 	movw	r2, #28206	@ 0x6e2e
 8001a2c:	801a      	strh	r2, [r3, #0]
             break;
 8001a2e:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
 8001a30:	6978      	ldr	r0, [r7, #20]
 8001a32:	f7fe fbdb 	bl	80001ec <CPU_SR_Restore>
    OS_TRACE_MUTEX_PEND_EXIT(*p_err);
}
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20001334 	.word	0x20001334
 8001a40:	20001335 	.word	0x20001335
 8001a44:	5854554d 	.word	0x5854554d
 8001a48:	20001708 	.word	0x20001708
 8001a4c:	20001554 	.word	0x20001554

08001a50 <OSMutexPost>:
*/

void  OSMutexPost (OS_MUTEX  *p_mutex,
                   OS_OPT     opt,
                   OS_ERR    *p_err)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08c      	sub	sp, #48	@ 0x30
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	817b      	strh	r3, [r7, #10]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    CPU_TS         ts;
    OS_PRIO        prio_new;
    CPU_SR_ALLOC();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

    OS_TRACE_MUTEX_POST_ENTER(p_mutex, opt);

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
 8001a62:	4b65      	ldr	r3, [pc, #404]	@ (8001bf8 <OSMutexPost+0x1a8>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d004      	beq.n	8001a74 <OSMutexPost+0x24>
        OS_TRACE_MUTEX_POST_FAILED(p_mutex);
        OS_TRACE_MUTEX_POST_EXIT(OS_ERR_POST_ISR);
       *p_err = OS_ERR_POST_ISR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f246 220e 	movw	r2, #25102	@ 0x620e
 8001a70:	801a      	strh	r2, [r3, #0]
        return;
 8001a72:	e0be      	b.n	8001bf2 <OSMutexPost+0x1a2>
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8001a74:	4b61      	ldr	r3, [pc, #388]	@ (8001bfc <OSMutexPost+0x1ac>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d004      	beq.n	8001a86 <OSMutexPost+0x36>
        OS_TRACE_MUTEX_POST_EXIT(OS_ERR_OS_NOT_RUNNING);
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f645 6289 	movw	r2, #24201	@ 0x5e89
 8001a82:	801a      	strh	r2, [r3, #0]
        return;
 8001a84:	e0b5      	b.n	8001bf2 <OSMutexPost+0x1a2>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_mutex == (OS_MUTEX *)0) {                             /* Validate 'p_mutex'                                   */
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d104      	bne.n	8001a96 <OSMutexPost+0x46>
        OS_TRACE_MUTEX_POST_FAILED(p_mutex);
        OS_TRACE_MUTEX_POST_EXIT(OS_ERR_OBJ_PTR_NULL);
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 8001a92:	801a      	strh	r2, [r3, #0]
        return;
 8001a94:	e0ad      	b.n	8001bf2 <OSMutexPost+0x1a2>
    }
    switch (opt) {                                              /* Validate 'opt'                                       */
 8001a96:	897b      	ldrh	r3, [r7, #10]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <OSMutexPost+0x5c>
 8001a9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001aa0:	d004      	beq.n	8001aac <OSMutexPost+0x5c>
             break;

        default:
             OS_TRACE_MUTEX_POST_FAILED(p_mutex);
             OS_TRACE_MUTEX_POST_EXIT(OS_ERR_OPT_INVALID);
            *p_err =  OS_ERR_OPT_INVALID;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f645 6225 	movw	r2, #24101	@ 0x5e25
 8001aa8:	801a      	strh	r2, [r3, #0]
             return;
 8001aaa:	e0a2      	b.n	8001bf2 <OSMutexPost+0x1a2>
             break;
 8001aac:	bf00      	nop
    }
#endif

#if (OS_CFG_OBJ_TYPE_CHK_EN > 0u)
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {                   /* Make sure mutex was created                          */
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a53      	ldr	r2, [pc, #332]	@ (8001c00 <OSMutexPost+0x1b0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d004      	beq.n	8001ac2 <OSMutexPost+0x72>
        OS_TRACE_MUTEX_POST_FAILED(p_mutex);
        OS_TRACE_MUTEX_POST_EXIT(OS_ERR_OBJ_TYPE);
       *p_err = OS_ERR_OBJ_TYPE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f645 52c4 	movw	r2, #24004	@ 0x5dc4
 8001abe:	801a      	strh	r2, [r3, #0]
        return;
 8001ac0:	e097      	b.n	8001bf2 <OSMutexPost+0x1a2>
    }
#endif

    CPU_CRITICAL_ENTER();
 8001ac2:	2040      	movs	r0, #64	@ 0x40
 8001ac4:	f7fe fb84 	bl	80001d0 <CPU_SR_Save>
 8001ac8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (OSTCBCurPtr != p_mutex->OwnerTCBPtr) {                  /* Make sure the mutex owner is releasing the mutex     */
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	691a      	ldr	r2, [r3, #16]
 8001ace:	4b4d      	ldr	r3, [pc, #308]	@ (8001c04 <OSMutexPost+0x1b4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d007      	beq.n	8001ae6 <OSMutexPost+0x96>
        CPU_CRITICAL_EXIT();
 8001ad6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ad8:	f7fe fb88 	bl	80001ec <CPU_SR_Restore>
        OS_TRACE_MUTEX_POST_FAILED(p_mutex);
        OS_TRACE_MUTEX_POST_EXIT(OS_ERR_MUTEX_NOT_OWNER);
       *p_err = OS_ERR_MUTEX_NOT_OWNER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f245 7281 	movw	r2, #22401	@ 0x5781
 8001ae2:	801a      	strh	r2, [r3, #0]
        return;
 8001ae4:	e085      	b.n	8001bf2 <OSMutexPost+0x1a2>

#if (OS_CFG_TS_EN > 0u)
    ts          = OS_TS_GET();                                  /* Get timestamp                                        */
    p_mutex->TS = ts;
#else
    ts          = 0u;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
#endif
    p_mutex->OwnerNestingCtr--;                                 /* Decrement owner's nesting counter                    */
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	7d1b      	ldrb	r3, [r3, #20]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	751a      	strb	r2, [r3, #20]
    if (p_mutex->OwnerNestingCtr > 0u) {                        /* Are we done with all nestings?                       */
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	7d1b      	ldrb	r3, [r3, #20]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <OSMutexPost+0xbe>
        CPU_CRITICAL_EXIT();                                     /* No                                                   */
 8001afe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b00:	f7fe fb74 	bl	80001ec <CPU_SR_Restore>
        OS_TRACE_MUTEX_POST_EXIT(OS_ERR_MUTEX_NESTING);
       *p_err = OS_ERR_MUTEX_NESTING;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f245 7283 	movw	r2, #22403	@ 0x5783
 8001b0a:	801a      	strh	r2, [r3, #0]
        return;
 8001b0c:	e071      	b.n	8001bf2 <OSMutexPost+0x1a2>
    }

    OS_MutexGrpRemove(OSTCBCurPtr, p_mutex);                    /* Remove mutex from owner's group                      */
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c04 <OSMutexPost+0x1b4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68f9      	ldr	r1, [r7, #12]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 f88b 	bl	8001c30 <OS_MutexGrpRemove>

    p_pend_list = &p_mutex->PendList;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	61fb      	str	r3, [r7, #28]
    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* Any task waiting on mutex?                           */
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10c      	bne.n	8001b42 <OSMutexPost+0xf2>
        p_mutex->OwnerTCBPtr     = (OS_TCB *)0;                 /* No                                                   */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
        p_mutex->OwnerNestingCtr =           0u;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	751a      	strb	r2, [r3, #20]
        CPU_CRITICAL_EXIT();
 8001b34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b36:	f7fe fb59 	bl	80001ec <CPU_SR_Restore>
        OS_TRACE_MUTEX_POST_EXIT(OS_ERR_NONE);
       *p_err = OS_ERR_NONE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	801a      	strh	r2, [r3, #0]
        return;
 8001b40:	e057      	b.n	8001bf2 <OSMutexPost+0x1a2>
    }
                                                                /* Yes                                                  */
    if (OSTCBCurPtr->Prio != OSTCBCurPtr->BasePrio) {           /* Has owner inherited a priority?                      */
 8001b42:	4b30      	ldr	r3, [pc, #192]	@ (8001c04 <OSMutexPost+0x1b4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c04 <OSMutexPost+0x1b4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d02c      	beq.n	8001bb0 <OSMutexPost+0x160>
        prio_new = OS_MutexGrpPrioFindHighest(OSTCBCurPtr);     /* Yes, find highest priority pending                   */
 8001b56:	4b2b      	ldr	r3, [pc, #172]	@ (8001c04 <OSMutexPost+0x1b4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f885 	bl	8001c6a <OS_MutexGrpPrioFindHighest>
 8001b60:	4603      	mov	r3, r0
 8001b62:	76fb      	strb	r3, [r7, #27]
        prio_new = (prio_new > OSTCBCurPtr->BasePrio) ? OSTCBCurPtr->BasePrio : prio_new;
 8001b64:	4b27      	ldr	r3, [pc, #156]	@ (8001c04 <OSMutexPost+0x1b4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b6c:	7efa      	ldrb	r2, [r7, #27]
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	bf28      	it	cs
 8001b72:	4613      	movcs	r3, r2
 8001b74:	76fb      	strb	r3, [r7, #27]
        if (prio_new > OSTCBCurPtr->Prio) {
 8001b76:	4b23      	ldr	r3, [pc, #140]	@ (8001c04 <OSMutexPost+0x1b4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001b7e:	7efa      	ldrb	r2, [r7, #27]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d915      	bls.n	8001bb0 <OSMutexPost+0x160>
            OS_RdyListRemove(OSTCBCurPtr);
 8001b84:	4b1f      	ldr	r3, [pc, #124]	@ (8001c04 <OSMutexPost+0x1b4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fbe1 	bl	8001350 <OS_RdyListRemove>
            OSTCBCurPtr->Prio = prio_new;                       /* Lower owner's priority back to its original one      */
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c04 <OSMutexPost+0x1b4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	7efa      	ldrb	r2, [r7, #27]
 8001b94:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
            OS_TRACE_MUTEX_TASK_PRIO_DISINHERIT(OSTCBCurPtr, prio_new);
            OS_PrioInsert(prio_new);
 8001b98:	7efb      	ldrb	r3, [r7, #27]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f904 	bl	8001da8 <OS_PrioInsert>
            OS_RdyListInsertTail(OSTCBCurPtr);                  /* Insert owner in ready list at new priority           */
 8001ba0:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <OSMutexPost+0x1b4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fb53 	bl	8001250 <OS_RdyListInsertTail>
            OSPrioCur         = prio_new;
 8001baa:	4a17      	ldr	r2, [pc, #92]	@ (8001c08 <OSMutexPost+0x1b8>)
 8001bac:	7efb      	ldrb	r3, [r7, #27]
 8001bae:	7013      	strb	r3, [r2, #0]
        }
    }
                                                                /* Get TCB from head of pend list                       */
    p_tcb                    = p_pend_list->HeadPtr;
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	617b      	str	r3, [r7, #20]
    p_mutex->OwnerTCBPtr     = p_tcb;                           /* Give mutex to new owner                              */
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	611a      	str	r2, [r3, #16]
    p_mutex->OwnerNestingCtr = 1u;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	751a      	strb	r2, [r3, #20]
    OS_MutexGrpAdd(p_tcb, p_mutex);
 8001bc2:	68f9      	ldr	r1, [r7, #12]
 8001bc4:	6978      	ldr	r0, [r7, #20]
 8001bc6:	f000 f821 	bl	8001c0c <OS_MutexGrpAdd>
                                                                /* Post to mutex                                        */
    OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	6979      	ldr	r1, [r7, #20]
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f7ff fa5d 	bl	8001094 <OS_Post>
                           p_tcb,
                           (void *)0,
                           0u,
                           ts);

    CPU_CRITICAL_EXIT();
 8001bda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001bdc:	f7fe fb06 	bl	80001ec <CPU_SR_Restore>

    if ((opt & OS_OPT_POST_NO_SCHED) == 0u) {
 8001be0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	db01      	blt.n	8001bec <OSMutexPost+0x19c>
        OSSched();                                              /* Run the scheduler                                    */
 8001be8:	f7ff f84e 	bl	8000c88 <OSSched>
    }
    OS_TRACE_MUTEX_POST_EXIT(OS_ERR_NONE);
   *p_err = OS_ERR_NONE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	801a      	strh	r2, [r3, #0]
}
 8001bf2:	3728      	adds	r7, #40	@ 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20001334 	.word	0x20001334
 8001bfc:	20001335 	.word	0x20001335
 8001c00:	5854554d 	.word	0x5854554d
 8001c04:	20001708 	.word	0x20001708
 8001c08:	20001348 	.word	0x20001348

08001c0c <OS_MutexGrpAdd>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpAdd (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
    p_mutex->MutexGrpNextPtr = p_tcb->MutexGrpHeadPtr;      /* The mutex grp is not sorted add to head of list.       */
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	60da      	str	r2, [r3, #12]
    p_tcb->MutexGrpHeadPtr   = p_mutex;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <OS_MutexGrpRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpRemove (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
    OS_MUTEX  **pp_mutex;

    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3334      	adds	r3, #52	@ 0x34
 8001c3e:	60fb      	str	r3, [r7, #12]

    while(*pp_mutex != p_mutex) {
 8001c40:	e003      	b.n	8001c4a <OS_MutexGrpRemove+0x1a>
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	330c      	adds	r3, #12
 8001c48:	60fb      	str	r3, [r7, #12]
    while(*pp_mutex != p_mutex) {
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d1f6      	bne.n	8001c42 <OS_MutexGrpRemove+0x12>
    }

    *pp_mutex = (*pp_mutex)->MutexGrpNextPtr;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	601a      	str	r2, [r3, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <OS_MutexGrpPrioFindHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_MutexGrpPrioFindHighest (OS_TCB  *p_tcb)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b087      	sub	sp, #28
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
    OS_PRIO     highest_prio;
    OS_PRIO     prio;
    OS_TCB     *p_head;


    highest_prio = (OS_PRIO)(OS_CFG_PRIO_MAX - 1u);
 8001c72:	233f      	movs	r3, #63	@ 0x3f
 8001c74:	74fb      	strb	r3, [r7, #19]
    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3334      	adds	r3, #52	@ 0x34
 8001c7a:	617b      	str	r3, [r7, #20]

    while(*pp_mutex != (OS_MUTEX *)0) {
 8001c7c:	e014      	b.n	8001ca8 <OS_MutexGrpPrioFindHighest+0x3e>
        p_head = (*pp_mutex)->PendList.HeadPtr;
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	60fb      	str	r3, [r7, #12]
        if (p_head != (OS_TCB *)0) {
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d009      	beq.n	8001ca0 <OS_MutexGrpPrioFindHighest+0x36>
            prio = p_head->Prio;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001c92:	72fb      	strb	r3, [r7, #11]
            if(prio < highest_prio) {
 8001c94:	7afa      	ldrb	r2, [r7, #11]
 8001c96:	7cfb      	ldrb	r3, [r7, #19]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d201      	bcs.n	8001ca0 <OS_MutexGrpPrioFindHighest+0x36>
                highest_prio = prio;
 8001c9c:	7afb      	ldrb	r3, [r7, #11]
 8001c9e:	74fb      	strb	r3, [r7, #19]
            }
        }
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	330c      	adds	r3, #12
 8001ca6:	617b      	str	r3, [r7, #20]
    while(*pp_mutex != (OS_MUTEX *)0) {
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1e6      	bne.n	8001c7e <OS_MutexGrpPrioFindHighest+0x14>
    }

    return (highest_prio);
 8001cb0:	7cfb      	ldrb	r3, [r7, #19]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <OS_MutexGrpPostAll>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpPostAll (OS_TCB  *p_tcb)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b08a      	sub	sp, #40	@ 0x28
 8001cc2:	af02      	add	r7, sp, #8
 8001cc4:	6078      	str	r0, [r7, #4]
    CPU_TS         ts;
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb_new;


    p_mutex = p_tcb->MutexGrpHeadPtr;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cca:	61fb      	str	r3, [r7, #28]

    while(p_mutex != (OS_MUTEX *)0) {
 8001ccc:	e02d      	b.n	8001d2a <OS_MutexGrpPostAll+0x6c>

        OS_TRACE_MUTEX_POST(p_mutex);

        p_mutex_next = p_mutex->MutexGrpNextPtr;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	61bb      	str	r3, [r7, #24]
#if (OS_CFG_TS_EN > 0u)
        ts           = OS_TS_GET();                             /* Get timestamp                                        */
        p_mutex->TS  = ts;
#else
        ts           = 0u;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
#endif
        OS_MutexGrpRemove(p_tcb,  p_mutex);                     /* Remove mutex from owner's group                      */
 8001cd8:	69f9      	ldr	r1, [r7, #28]
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ffa8 	bl	8001c30 <OS_MutexGrpRemove>

        p_pend_list = &p_mutex->PendList;
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	613b      	str	r3, [r7, #16]
        if (p_pend_list->HeadPtr == (OS_TCB *)0) {              /* Any task waiting on mutex?                           */
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <OS_MutexGrpPostAll+0x3e>
            p_mutex->OwnerNestingCtr =           0u;            /* Decrement owner's nesting counter                    */
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	751a      	strb	r2, [r3, #20]
            p_mutex->OwnerTCBPtr     = (OS_TCB *)0;             /* No                                                   */
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
 8001cfa:	e014      	b.n	8001d26 <OS_MutexGrpPostAll+0x68>
        } else {
                                                                /* Get TCB from head of pend list                       */
            p_tcb_new                = p_pend_list->HeadPtr;
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]
            p_mutex->OwnerTCBPtr     = p_tcb;                   /* Give mutex to new owner                              */
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	611a      	str	r2, [r3, #16]
            p_mutex->OwnerNestingCtr = 1u;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	751a      	strb	r2, [r3, #20]
            OS_MutexGrpAdd(p_tcb_new, p_mutex);
 8001d0e:	69f9      	ldr	r1, [r7, #28]
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f7ff ff7b 	bl	8001c0c <OS_MutexGrpAdd>
                                                                /* Post to mutex                                        */
            OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	68f9      	ldr	r1, [r7, #12]
 8001d20:	69f8      	ldr	r0, [r7, #28]
 8001d22:	f7ff f9b7 	bl	8001094 <OS_Post>
                                   (void *)0,
                                   0u,
                                   ts);
        }

        p_mutex = p_mutex_next;
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	61fb      	str	r3, [r7, #28]
    while(p_mutex != (OS_MUTEX *)0) {
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1ce      	bne.n	8001cce <OS_MutexGrpPostAll+0x10>
    }

}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3720      	adds	r7, #32
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <OS_PrioInit>:
* Note       : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_PrioInit (void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
    CPU_DATA  i;


                                                                /* Clear the bitmap table ... no task is ready          */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	e007      	b.n	8001d58 <OS_PrioInit+0x1c>
         OSPrioTbl[i] = 0u;
 8001d48:	4a08      	ldr	r2, [pc, #32]	@ (8001d6c <OS_PrioInit+0x30>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3301      	adds	r3, #1
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d9f4      	bls.n	8001d48 <OS_PrioInit+0xc>
    }

#if (OS_CFG_TASK_IDLE_EN == 0u)
    OS_PrioInsert ((OS_PRIO)(OS_CFG_PRIO_MAX - 1u));            /* Insert what would be the idle task                   */
#endif
}
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	2000134c 	.word	0x2000134c

08001d70 <OS_PrioGetHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_PrioGetHighest (void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
#if   (OS_CFG_PRIO_MAX <= (CPU_CFG_DATA_SIZE * 8u))             /* Optimize for less than word size nbr of priorities   */
    return ((OS_PRIO)CPU_CntLeadZeros(OSPrioTbl[0]));


#elif (OS_CFG_PRIO_MAX <= (2u * (CPU_CFG_DATA_SIZE * 8u)))      /* Optimize for    2x the word size nbr of priorities   */
    if (OSPrioTbl[0] == 0u) {
 8001d74:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <OS_PrioGetHighest+0x34>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <OS_PrioGetHighest+0x20>
        return ((OS_PRIO)((OS_PRIO)CPU_CntLeadZeros(OSPrioTbl[1]) + (CPU_CFG_DATA_SIZE * 8u)));
 8001d7c:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <OS_PrioGetHighest+0x34>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fa40 	bl	8000206 <CPU_CntLeadZeros>
 8001d86:	4603      	mov	r3, r0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	3320      	adds	r3, #32
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	e006      	b.n	8001d9e <OS_PrioGetHighest+0x2e>
    } else {
        return ((OS_PRIO)((OS_PRIO)CPU_CntLeadZeros(OSPrioTbl[0])));
 8001d90:	4b04      	ldr	r3, [pc, #16]	@ (8001da4 <OS_PrioGetHighest+0x34>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fa36 	bl	8000206 <CPU_CntLeadZeros>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	b2db      	uxtb	r3, r3
    }
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);                  /* Find the position of the first bit set at the entry  */

    return (prio);
#endif
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	2000134c 	.word	0x2000134c

08001da8 <OS_PrioInsert>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioInsert (OS_PRIO  prio)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
#if   (OS_CFG_PRIO_MAX <= (CPU_CFG_DATA_SIZE * 8u))             /* Optimize for less than word size nbr of priorities   */
    OSPrioTbl[0] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio);


#elif (OS_CFG_PRIO_MAX <= (2u * (CPU_CFG_DATA_SIZE * 8u)))      /* Optimize for    2x the word size nbr of priorities   */
    if (prio < (CPU_CFG_DATA_SIZE * 8u)) {
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	2b1f      	cmp	r3, #31
 8001db6:	d80a      	bhi.n	8001dce <OS_PrioInsert+0x26>
        OSPrioTbl[0] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio);
 8001db8:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <OS_PrioInsert+0x48>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001dc2:	fa21 f303 	lsr.w	r3, r1, r3
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	4a09      	ldr	r2, [pc, #36]	@ (8001df0 <OS_PrioInsert+0x48>)
 8001dca:	6013      	str	r3, [r2, #0]

    ix             = (OS_PRIO)(prio /  (CPU_CFG_DATA_SIZE * 8u));
    bit_nbr        = (CPU_DATA)prio & ((CPU_CFG_DATA_SIZE * 8u) - 1u);
    OSPrioTbl[ix] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - bit_nbr);
#endif
}
 8001dcc:	e00a      	b.n	8001de4 <OS_PrioInsert+0x3c>
        OSPrioTbl[1] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - (prio - (CPU_CFG_DATA_SIZE * 8u)));
 8001dce:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <OS_PrioInsert+0x48>)
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8001dd8:	2101      	movs	r1, #1
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	4a03      	ldr	r2, [pc, #12]	@ (8001df0 <OS_PrioInsert+0x48>)
 8001de2:	6053      	str	r3, [r2, #4]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	2000134c 	.word	0x2000134c

08001df4 <OS_PrioRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioRemove (OS_PRIO  prio)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
#if   (OS_CFG_PRIO_MAX <= (CPU_CFG_DATA_SIZE * 8u))             /* Optimize for less than word size nbr of priorities   */
    OSPrioTbl[0] &= ~((CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio));


#elif (OS_CFG_PRIO_MAX <= (2u * (CPU_CFG_DATA_SIZE * 8u)))      /* Optimize for    2x the word size nbr of priorities   */
    if (prio < (CPU_CFG_DATA_SIZE * 8u)) {
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2b1f      	cmp	r3, #31
 8001e02:	d80b      	bhi.n	8001e1c <OS_PrioRemove+0x28>
        OSPrioTbl[0] &= ~((CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio));
 8001e04:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <OS_PrioRemove+0x4c>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001e0e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	4013      	ands	r3, r2
 8001e16:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <OS_PrioRemove+0x4c>)
 8001e18:	6013      	str	r3, [r2, #0]

    ix             =   (OS_PRIO)(prio  /   (CPU_CFG_DATA_SIZE * 8u));
    bit_nbr        =   (CPU_DATA)prio  &  ((CPU_CFG_DATA_SIZE * 8u) - 1u);
    OSPrioTbl[ix] &= ~((CPU_DATA)  1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - bit_nbr));
#endif
}
 8001e1a:	e00b      	b.n	8001e34 <OS_PrioRemove+0x40>
        OSPrioTbl[1] &= ~((CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - (prio - (CPU_CFG_DATA_SIZE * 8u))));
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <OS_PrioRemove+0x4c>)
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	4013      	ands	r3, r2
 8001e30:	4a03      	ldr	r2, [pc, #12]	@ (8001e40 <OS_PrioRemove+0x4c>)
 8001e32:	6053      	str	r3, [r2, #4]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	2000134c 	.word	0x2000134c

08001e44 <OSQCreate>:
void  OSQCreate (OS_Q        *p_q,
                 CPU_CHAR    *p_name,
                 OS_MSG_QTY   max_qty,
                 OS_ERR      *p_err)

{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	4613      	mov	r3, r2
 8001e52:	80fb      	strh	r3, [r7, #6]
    CPU_SR_ALLOC();
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to be called from an ISR                 */
 8001e58:	4b20      	ldr	r3, [pc, #128]	@ (8001edc <OSQCreate+0x98>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d004      	beq.n	8001e6a <OSQCreate+0x26>
       *p_err = OS_ERR_CREATE_ISR;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	f642 62e1 	movw	r2, #12001	@ 0x2ee1
 8001e66:	801a      	strh	r2, [r3, #0]
        return;
 8001e68:	e035      	b.n	8001ed6 <OSQCreate+0x92>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_q == (OS_Q *)0) {                                     /* Validate arguments                                   */
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d104      	bne.n	8001e7a <OSQCreate+0x36>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 8001e76:	801a      	strh	r2, [r3, #0]
        return;
 8001e78:	e02d      	b.n	8001ed6 <OSQCreate+0x92>
    }
    if (max_qty == 0u) {                                        /* Cannot specify a zero size queue                     */
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d104      	bne.n	8001e8a <OSQCreate+0x46>
       *p_err = OS_ERR_Q_SIZE;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f246 5294 	movw	r2, #26004	@ 0x6594
 8001e86:	801a      	strh	r2, [r3, #0]
        return;
 8001e88:	e025      	b.n	8001ed6 <OSQCreate+0x92>
    }
#endif

    CPU_CRITICAL_ENTER();
 8001e8a:	2040      	movs	r0, #64	@ 0x40
 8001e8c:	f7fe f9a0 	bl	80001d0 <CPU_SR_Save>
 8001e90:	6178      	str	r0, [r7, #20]
#if (OS_OBJ_TYPE_REQ > 0u)
#if (OS_CFG_OBJ_CREATED_CHK_EN > 0u)
    if (p_q->Type == OS_OBJ_TYPE_Q) {
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a12      	ldr	r2, [pc, #72]	@ (8001ee0 <OSQCreate+0x9c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d107      	bne.n	8001eac <OSQCreate+0x68>
        CPU_CRITICAL_EXIT();
 8001e9c:	6978      	ldr	r0, [r7, #20]
 8001e9e:	f7fe f9a5 	bl	80001ec <CPU_SR_Restore>
        *p_err = OS_ERR_OBJ_CREATED;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	f645 52c1 	movw	r2, #24001	@ 0x5dc1
 8001ea8:	801a      	strh	r2, [r3, #0]
        return;
 8001eaa:	e014      	b.n	8001ed6 <OSQCreate+0x92>
    }
#endif
    p_q->Type    = OS_OBJ_TYPE_Q;                               /* Mark the data structure as a message queue           */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee0 <OSQCreate+0x9c>)
 8001eb0:	601a      	str	r2, [r3, #0]
#if (OS_CFG_DBG_EN > 0u)
    p_q->NamePtr = p_name;
#else
    (void)p_name;
#endif
    OS_MsgQInit(&p_q->MsgQ,                                     /* Initialize the queue                                 */
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	330c      	adds	r3, #12
 8001eb6:	88fa      	ldrh	r2, [r7, #6]
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fbb8 	bl	8001630 <OS_MsgQInit>
                max_qty);
    OS_PendListInit(&p_q->PendList);                            /* Initialize the waiting list                          */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff f823 	bl	8000f10 <OS_PendListInit>
#if (OS_CFG_DBG_EN > 0u)
    OS_QDbgListAdd(p_q);
    OSQQty++;                                                   /* One more queue created                               */
#endif
    OS_TRACE_Q_CREATE(p_q, p_name);
    CPU_CRITICAL_EXIT();
 8001eca:	6978      	ldr	r0, [r7, #20]
 8001ecc:	f7fe f98e 	bl	80001ec <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	801a      	strh	r2, [r3, #0]
}
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20001334 	.word	0x20001334
 8001ee0:	55455551 	.word	0x55455551

08001ee4 <OSQPend>:
                OS_TICK       timeout,
                OS_OPT        opt,
                OS_MSG_SIZE  *p_msg_size,
                CPU_TS       *p_ts,
                OS_ERR       *p_err)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	80fb      	strh	r3, [r7, #6]
    void  *p_void;
    CPU_SR_ALLOC();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
        return ((void *)0);
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
 8001ef8:	4b6b      	ldr	r3, [pc, #428]	@ (80020a8 <OSQPend+0x1c4>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d009      	beq.n	8001f14 <OSQPend+0x30>
        if ((opt & OS_OPT_PEND_NON_BLOCKING) != OS_OPT_PEND_NON_BLOCKING) {
 8001f00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db05      	blt.n	8001f14 <OSQPend+0x30>
            OS_TRACE_Q_PEND_FAILED(p_q);
            OS_TRACE_Q_PEND_EXIT(OS_ERR_PEND_ISR);
           *p_err = OS_ERR_PEND_ISR;
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	f246 12ae 	movw	r2, #25006	@ 0x61ae
 8001f0e:	801a      	strh	r2, [r3, #0]
            return ((void *)0);
 8001f10:	2300      	movs	r3, #0
 8001f12:	e0c5      	b.n	80020a0 <OSQPend+0x1bc>
        }
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8001f14:	4b65      	ldr	r3, [pc, #404]	@ (80020ac <OSQPend+0x1c8>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d005      	beq.n	8001f28 <OSQPend+0x44>
        OS_TRACE_Q_PEND_EXIT(OS_ERR_OS_NOT_RUNNING);
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	f645 6289 	movw	r2, #24201	@ 0x5e89
 8001f22:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8001f24:	2300      	movs	r3, #0
 8001f26:	e0bb      	b.n	80020a0 <OSQPend+0x1bc>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_q == (OS_Q *)0) {                                     /* Validate arguments                                   */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d105      	bne.n	8001f3a <OSQPend+0x56>
        OS_TRACE_Q_PEND_FAILED(p_q);
        OS_TRACE_Q_PEND_EXIT(OS_ERR_OBJ_PTR_NULL);
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 8001f34:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8001f36:	2300      	movs	r3, #0
 8001f38:	e0b2      	b.n	80020a0 <OSQPend+0x1bc>
    }
    if (p_msg_size == (OS_MSG_SIZE *)0) {
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d105      	bne.n	8001f4c <OSQPend+0x68>
        OS_TRACE_Q_PEND_FAILED(p_q);
        OS_TRACE_Q_PEND_EXIT(OS_ERR_PTR_INVALID);
       *p_err = OS_ERR_PTR_INVALID;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f42:	f246 22d5 	movw	r2, #25301	@ 0x62d5
 8001f46:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e0a9      	b.n	80020a0 <OSQPend+0x1bc>
    }
    switch (opt) {
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d008      	beq.n	8001f64 <OSQPend+0x80>
 8001f52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f56:	d005      	beq.n	8001f64 <OSQPend+0x80>
             break;

        default:
             OS_TRACE_Q_PEND_FAILED(p_q);
             OS_TRACE_Q_PEND_EXIT(OS_ERR_OPT_INVALID);
            *p_err = OS_ERR_OPT_INVALID;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5a:	f645 6225 	movw	r2, #24101	@ 0x5e25
 8001f5e:	801a      	strh	r2, [r3, #0]
             return ((void *)0);
 8001f60:	2300      	movs	r3, #0
 8001f62:	e09d      	b.n	80020a0 <OSQPend+0x1bc>
             break;
 8001f64:	bf00      	nop
    }
#endif

#if (OS_CFG_OBJ_TYPE_CHK_EN > 0u)
    if (p_q->Type != OS_OBJ_TYPE_Q) {                           /* Make sure message queue was created                  */
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a51      	ldr	r2, [pc, #324]	@ (80020b0 <OSQPend+0x1cc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d005      	beq.n	8001f7c <OSQPend+0x98>
        OS_TRACE_Q_PEND_FAILED(p_q);
        OS_TRACE_Q_PEND_EXIT(OS_ERR_OBJ_TYPE);
       *p_err = OS_ERR_OBJ_TYPE;
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	f645 52c4 	movw	r2, #24004	@ 0x5dc4
 8001f76:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e091      	b.n	80020a0 <OSQPend+0x1bc>
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <OSQPend+0xa4>
       *p_ts = 0u;                                              /* Initialize the returned timestamp                    */
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 8001f88:	2040      	movs	r0, #64	@ 0x40
 8001f8a:	f7fe f921 	bl	80001d0 <CPU_SR_Save>
 8001f8e:	6138      	str	r0, [r7, #16]
    p_void = OS_MsgQGet(&p_q->MsgQ,                             /* Any message waiting in the message queue?            */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f103 000c 	add.w	r0, r3, #12
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f98:	6a3a      	ldr	r2, [r7, #32]
 8001f9a:	6839      	ldr	r1, [r7, #0]
 8001f9c:	f7ff fb60 	bl	8001660 <OS_MsgQGet>
 8001fa0:	6178      	str	r0, [r7, #20]
                        p_msg_size,
                        p_ts,
                        p_err);
    if (*p_err == OS_ERR_NONE) {
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d104      	bne.n	8001fb4 <OSQPend+0xd0>
        OS_TRACE_Q_PEND(p_q);
        CPU_CRITICAL_EXIT();
 8001faa:	6938      	ldr	r0, [r7, #16]
 8001fac:	f7fe f91e 	bl	80001ec <CPU_SR_Restore>
        OS_TRACE_Q_PEND_EXIT(OS_ERR_NONE);
        return (p_void);                                        /* Yes, Return message received                         */
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	e075      	b.n	80020a0 <OSQPend+0x1bc>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {               /* Caller wants to block if not available?              */
 8001fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	da08      	bge.n	8001fce <OSQPend+0xea>
        CPU_CRITICAL_EXIT();
 8001fbc:	6938      	ldr	r0, [r7, #16]
 8001fbe:	f7fe f915 	bl	80001ec <CPU_SR_Restore>
        OS_TRACE_Q_PEND_FAILED(p_q);
        OS_TRACE_Q_PEND_EXIT(OS_ERR_PEND_WOULD_BLOCK);
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                        /* No                                                   */
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc4:	f246 12b0 	movw	r2, #25008	@ 0x61b0
 8001fc8:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e068      	b.n	80020a0 <OSQPend+0x1bc>
    } else {
        if (OSSchedLockNestingCtr > 0u) {                       /* Can't pend when the scheduler is locked              */
 8001fce:	4b39      	ldr	r3, [pc, #228]	@ (80020b4 <OSQPend+0x1d0>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d008      	beq.n	8001fe8 <OSQPend+0x104>
            CPU_CRITICAL_EXIT();
 8001fd6:	6938      	ldr	r0, [r7, #16]
 8001fd8:	f7fe f908 	bl	80001ec <CPU_SR_Restore>
            OS_TRACE_Q_PEND_FAILED(p_q);
            OS_TRACE_Q_PEND_EXIT(OS_ERR_SCHED_LOCKED);
           *p_err = OS_ERR_SCHED_LOCKED;
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	f646 5263 	movw	r2, #28003	@ 0x6d63
 8001fe2:	801a      	strh	r2, [r3, #0]
            return ((void *)0);
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e05b      	b.n	80020a0 <OSQPend+0x1bc>
        }
    }

    OS_Pend((OS_PEND_OBJ *)((void *)p_q),                       /* Block task pending on Message Queue                  */
 8001fe8:	4b33      	ldr	r3, [pc, #204]	@ (80020b8 <OSQPend+0x1d4>)
 8001fea:	6819      	ldr	r1, [r3, #0]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2205      	movs	r2, #5
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f7fe ff47 	bl	8000e84 <OS_Pend>
            OSTCBCurPtr,
            OS_TASK_PEND_ON_Q,
            timeout);
    CPU_CRITICAL_EXIT();
 8001ff6:	6938      	ldr	r0, [r7, #16]
 8001ff8:	f7fe f8f8 	bl	80001ec <CPU_SR_Restore>
    OS_TRACE_Q_PEND_BLOCK(p_q);
    OSSched();                                                  /* Find the next highest priority task ready to run     */
 8001ffc:	f7fe fe44 	bl	8000c88 <OSSched>

    CPU_CRITICAL_ENTER();
 8002000:	2040      	movs	r0, #64	@ 0x40
 8002002:	f7fe f8e5 	bl	80001d0 <CPU_SR_Save>
 8002006:	6138      	str	r0, [r7, #16]
    switch (OSTCBCurPtr->PendStatus) {
 8002008:	4b2b      	ldr	r3, [pc, #172]	@ (80020b8 <OSQPend+0x1d4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8002010:	2b03      	cmp	r3, #3
 8002012:	d837      	bhi.n	8002084 <OSQPend+0x1a0>
 8002014:	a201      	add	r2, pc, #4	@ (adr r2, 800201c <OSQPend+0x138>)
 8002016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201a:	bf00      	nop
 800201c:	0800202d 	.word	0x0800202d
 8002020:	08002049 	.word	0x08002049
 8002024:	08002071 	.word	0x08002071
 8002028:	0800205d 	.word	0x0800205d
        case OS_STATUS_PEND_OK:                                 /* Extract message from TCB (Put there by Post)         */
             p_void     = OSTCBCurPtr->MsgPtr;
 800202c:	4b22      	ldr	r3, [pc, #136]	@ (80020b8 <OSQPend+0x1d4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002032:	617b      	str	r3, [r7, #20]
            *p_msg_size = OSTCBCurPtr->MsgSize;
 8002034:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <OSQPend+0x1d4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
                *p_ts  =  OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_Q_PEND(p_q);
            *p_err      = OS_ERR_NONE;
 8002040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002042:	2200      	movs	r2, #0
 8002044:	801a      	strh	r2, [r3, #0]
             break;
 8002046:	e027      	b.n	8002098 <OSQPend+0x1b4>

        case OS_STATUS_PEND_ABORT:                              /* Indicate that we aborted                             */
             p_void     = (void *)0;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
            *p_msg_size =         0u;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	2200      	movs	r2, #0
 8002050:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
                *p_ts  =  OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_Q_PEND_FAILED(p_q);
            *p_err      = OS_ERR_PEND_ABORT;
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	f246 12a9 	movw	r2, #25001	@ 0x61a9
 8002058:	801a      	strh	r2, [r3, #0]
             break;
 800205a:	e01d      	b.n	8002098 <OSQPend+0x1b4>

        case OS_STATUS_PEND_TIMEOUT:                            /* Indicate that we didn't get event within TO          */
             p_void     = (void *)0;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
            *p_msg_size =         0u;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2200      	movs	r2, #0
 8002064:	801a      	strh	r2, [r3, #0]
             OS_TRACE_Q_PEND_FAILED(p_q);
            *p_err      = OS_ERR_TIMEOUT;
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	f247 22d9 	movw	r2, #29401	@ 0x72d9
 800206c:	801a      	strh	r2, [r3, #0]
             break;
 800206e:	e013      	b.n	8002098 <OSQPend+0x1b4>

        case OS_STATUS_PEND_DEL:                                /* Indicate that object pended on has been deleted      */
             p_void     = (void *)0;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
            *p_msg_size =         0u;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2200      	movs	r2, #0
 8002078:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
                *p_ts  =  OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_Q_PEND_FAILED(p_q);
            *p_err      = OS_ERR_OBJ_DEL;
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	f645 52c2 	movw	r2, #24002	@ 0x5dc2
 8002080:	801a      	strh	r2, [r3, #0]
             break;
 8002082:	e009      	b.n	8002098 <OSQPend+0x1b4>

        default:
             p_void     = (void *)0;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
            *p_msg_size =         0u;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2200      	movs	r2, #0
 800208c:	801a      	strh	r2, [r3, #0]
             OS_TRACE_Q_PEND_FAILED(p_q);
            *p_err      = OS_ERR_STATUS_INVALID;
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	f646 622e 	movw	r2, #28206	@ 0x6e2e
 8002094:	801a      	strh	r2, [r3, #0]
             break;
 8002096:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
 8002098:	6938      	ldr	r0, [r7, #16]
 800209a:	f7fe f8a7 	bl	80001ec <CPU_SR_Restore>
    OS_TRACE_Q_PEND_EXIT(*p_err);
    return (p_void);
 800209e:	697b      	ldr	r3, [r7, #20]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20001334 	.word	0x20001334
 80020ac:	20001335 	.word	0x20001335
 80020b0:	55455551 	.word	0x55455551
 80020b4:	20001554 	.word	0x20001554
 80020b8:	20001708 	.word	0x20001708

080020bc <OSQPost>:
void  OSQPost (OS_Q         *p_q,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               OS_OPT        opt,
               OS_ERR       *p_err)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	@ 0x30
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	4611      	mov	r1, r2
 80020c8:	461a      	mov	r2, r3
 80020ca:	460b      	mov	r3, r1
 80020cc:	80fb      	strh	r3, [r7, #6]
 80020ce:	4613      	mov	r3, r2
 80020d0:	80bb      	strh	r3, [r7, #4]
    OS_OPT         post_type;
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    OS_TCB        *p_tcb_next;
    CPU_TS         ts;
    CPU_SR_ALLOC();
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
#endif

    OS_TRACE_Q_POST_ENTER(p_q, p_void, msg_size, opt);

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 80020d6:	4b50      	ldr	r3, [pc, #320]	@ (8002218 <OSQPost+0x15c>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d004      	beq.n	80020e8 <OSQPost+0x2c>
        OS_TRACE_Q_POST_EXIT(OS_ERR_OS_NOT_RUNNING);
       *p_err = OS_ERR_OS_NOT_RUNNING;
 80020de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e0:	f645 6289 	movw	r2, #24201	@ 0x5e89
 80020e4:	801a      	strh	r2, [r3, #0]
        return;
 80020e6:	e094      	b.n	8002212 <OSQPost+0x156>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_q == (OS_Q *)0) {                                     /* Validate 'p_q'                                       */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d104      	bne.n	80020f8 <OSQPost+0x3c>
        OS_TRACE_Q_POST_FAILED(p_q);
        OS_TRACE_Q_POST_EXIT(OS_ERR_OBJ_PTR_NULL);
       *p_err = OS_ERR_OBJ_PTR_NULL;
 80020ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f0:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 80020f4:	801a      	strh	r2, [r3, #0]
        return;
 80020f6:	e08c      	b.n	8002212 <OSQPost+0x156>
    }
    switch (opt) {                                              /* Validate 'opt'                                       */
 80020f8:	88bb      	ldrh	r3, [r7, #4]
 80020fa:	f248 2210 	movw	r2, #33296	@ 0x8210
 80020fe:	4293      	cmp	r3, r2
 8002100:	d02c      	beq.n	800215c <OSQPost+0xa0>
 8002102:	f248 2210 	movw	r2, #33296	@ 0x8210
 8002106:	4293      	cmp	r3, r2
 8002108:	dc23      	bgt.n	8002152 <OSQPost+0x96>
 800210a:	f5b3 4f02 	cmp.w	r3, #33280	@ 0x8200
 800210e:	d025      	beq.n	800215c <OSQPost+0xa0>
 8002110:	f5b3 4f02 	cmp.w	r3, #33280	@ 0x8200
 8002114:	dc1d      	bgt.n	8002152 <OSQPost+0x96>
 8002116:	f248 0210 	movw	r2, #32784	@ 0x8010
 800211a:	4293      	cmp	r3, r2
 800211c:	d01e      	beq.n	800215c <OSQPost+0xa0>
 800211e:	f248 0210 	movw	r2, #32784	@ 0x8010
 8002122:	4293      	cmp	r3, r2
 8002124:	dc15      	bgt.n	8002152 <OSQPost+0x96>
 8002126:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800212a:	d017      	beq.n	800215c <OSQPost+0xa0>
 800212c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002130:	dc0f      	bgt.n	8002152 <OSQPost+0x96>
 8002132:	f5b3 7f04 	cmp.w	r3, #528	@ 0x210
 8002136:	d011      	beq.n	800215c <OSQPost+0xa0>
 8002138:	f5b3 7f04 	cmp.w	r3, #528	@ 0x210
 800213c:	dc09      	bgt.n	8002152 <OSQPost+0x96>
 800213e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002142:	d00b      	beq.n	800215c <OSQPost+0xa0>
 8002144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002148:	dc03      	bgt.n	8002152 <OSQPost+0x96>
 800214a:	2b00      	cmp	r3, #0
 800214c:	d006      	beq.n	800215c <OSQPost+0xa0>
 800214e:	2b10      	cmp	r3, #16
 8002150:	d004      	beq.n	800215c <OSQPost+0xa0>
             break;

        default:
             OS_TRACE_Q_POST_FAILED(p_q);
             OS_TRACE_Q_POST_EXIT(OS_ERR_OPT_INVALID);
            *p_err =  OS_ERR_OPT_INVALID;
 8002152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002154:	f645 6225 	movw	r2, #24101	@ 0x5e25
 8002158:	801a      	strh	r2, [r3, #0]
             return;
 800215a:	e05a      	b.n	8002212 <OSQPost+0x156>
             break;
 800215c:	bf00      	nop
    }
#endif

#if (OS_CFG_OBJ_TYPE_CHK_EN > 0u)
    if (p_q->Type != OS_OBJ_TYPE_Q) {                           /* Make sure message queue was created                  */
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a2e      	ldr	r2, [pc, #184]	@ (800221c <OSQPost+0x160>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d004      	beq.n	8002172 <OSQPost+0xb6>
        OS_TRACE_Q_POST_FAILED(p_q);
        OS_TRACE_Q_POST_EXIT(OS_ERR_OBJ_TYPE);
       *p_err = OS_ERR_OBJ_TYPE;
 8002168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800216a:	f645 52c4 	movw	r2, #24004	@ 0x5dc4
 800216e:	801a      	strh	r2, [r3, #0]
        return;
 8002170:	e04f      	b.n	8002212 <OSQPost+0x156>
    }
#endif
#if (OS_CFG_TS_EN > 0u)
    ts = OS_TS_GET();                                           /* Get timestamp                                        */
#else
    ts = 0u;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
#endif

    OS_TRACE_Q_POST(p_q);

    CPU_CRITICAL_ENTER();
 8002176:	2040      	movs	r0, #64	@ 0x40
 8002178:	f7fe f82a 	bl	80001d0 <CPU_SR_Save>
 800217c:	61f8      	str	r0, [r7, #28]
    p_pend_list = &p_q->PendList;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3304      	adds	r3, #4
 8002182:	617b      	str	r3, [r7, #20]
    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* Any task waiting on message queue?                   */
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d11a      	bne.n	80021c2 <OSQPost+0x106>
        if ((opt & OS_OPT_POST_LIFO) == 0u) {                   /* Determine whether we post FIFO or LIFO               */
 800218c:	88bb      	ldrh	r3, [r7, #4]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b00      	cmp	r3, #0
 8002194:	d102      	bne.n	800219c <OSQPost+0xe0>
            post_type = OS_OPT_POST_FIFO;
 8002196:	2300      	movs	r3, #0
 8002198:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800219a:	e001      	b.n	80021a0 <OSQPost+0xe4>
        } else {
            post_type = OS_OPT_POST_LIFO;
 800219c:	2310      	movs	r3, #16
 800219e:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        OS_MsgQPut(&p_q->MsgQ,                                  /* Place message in the message queue                   */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f103 000c 	add.w	r0, r3, #12
 80021a6:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 80021a8:	88fa      	ldrh	r2, [r7, #6]
 80021aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	460b      	mov	r3, r1
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	f7ff faa5 	bl	8001704 <OS_MsgQPut>
                   p_void,
                   msg_size,
                   post_type,
                   ts,
                   p_err);
        CPU_CRITICAL_EXIT();
 80021ba:	69f8      	ldr	r0, [r7, #28]
 80021bc:	f7fe f816 	bl	80001ec <CPU_SR_Restore>
        OS_TRACE_Q_POST_EXIT(*p_err);
        return;
 80021c0:	e027      	b.n	8002212 <OSQPost+0x156>
    }

    p_tcb = p_pend_list->HeadPtr;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	623b      	str	r3, [r7, #32]
    while (p_tcb != (OS_TCB *)0) {
 80021c8:	e012      	b.n	80021f0 <OSQPost+0x134>
        p_tcb_next = p_tcb->PendNextPtr;
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	613b      	str	r3, [r7, #16]
        OS_Post((OS_PEND_OBJ *)((void *)p_q),
 80021d0:	88fa      	ldrh	r2, [r7, #6]
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	4613      	mov	r3, r2
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	6a39      	ldr	r1, [r7, #32]
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f7fe ff59 	bl	8001094 <OS_Post>
                p_tcb,
                p_void,
                msg_size,
                ts);
        if ((opt & OS_OPT_POST_ALL) == 0u)  {                   /* Post message to all tasks waiting?                   */
 80021e2:	88bb      	ldrh	r3, [r7, #4]
 80021e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <OSQPost+0x13c>
            break;                                              /* No                                                   */
        }
        p_tcb = p_tcb_next;
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	623b      	str	r3, [r7, #32]
    while (p_tcb != (OS_TCB *)0) {
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1e9      	bne.n	80021ca <OSQPost+0x10e>
 80021f6:	e000      	b.n	80021fa <OSQPost+0x13e>
            break;                                              /* No                                                   */
 80021f8:	bf00      	nop
    }

    CPU_CRITICAL_EXIT();
 80021fa:	69f8      	ldr	r0, [r7, #28]
 80021fc:	f7fd fff6 	bl	80001ec <CPU_SR_Restore>

    if ((opt & OS_OPT_POST_NO_SCHED) == 0u) {
 8002200:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	db01      	blt.n	800220c <OSQPost+0x150>
        OSSched();                                              /* Run the scheduler                                    */
 8002208:	f7fe fd3e 	bl	8000c88 <OSSched>
    }

   *p_err = OS_ERR_NONE;
 800220c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800220e:	2200      	movs	r2, #0
 8002210:	801a      	strh	r2, [r3, #0]
    OS_TRACE_Q_POST_EXIT(*p_err);
}
 8002212:	3728      	adds	r7, #40	@ 0x28
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20001335 	.word	0x20001335
 800221c:	55455551 	.word	0x55455551

08002220 <OSStatReset>:
* Note(s)    : none
************************************************************************************************************************
*/

void  OSStatReset (OS_ERR  *p_err)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
#endif
#if (OS_CFG_Q_EN > 0u)
    OS_Q        *p_q;
#endif
#endif
    CPU_SR_ALLOC();
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 800222c:	2040      	movs	r0, #64	@ 0x40
 800222e:	f7fd ffcf 	bl	80001d0 <CPU_SR_Save>
 8002232:	60f8      	str	r0, [r7, #12]
#if (OS_CFG_STAT_TASK_EN > 0u)
    OSStatTaskCPUUsageMax = 0u;
 8002234:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <OSStatReset+0x30>)
 8002236:	2200      	movs	r2, #0
 8002238:	801a      	strh	r2, [r3, #0]
#endif

#if ((OS_MSG_EN > 0u) && (OS_CFG_DBG_EN > 0u))
    OSMsgPool.NbrUsedMax  = 0u;
#endif
    CPU_CRITICAL_EXIT();
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f7fd ffd6 	bl	80001ec <CPU_SR_Restore>
        CPU_CRITICAL_EXIT();
    }
#endif


   *p_err = OS_ERR_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	801a      	strh	r2, [r3, #0]
}
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20001560 	.word	0x20001560

08002254 <OS_StatTask>:
*              4) This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTask (void  *p_arg)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08c      	sub	sp, #48	@ 0x30
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) && (OS_CFG_ISR_STK_SIZE > 0u)
    CPU_STK     *p_stk;
    CPU_INT32U   free_stk;
    CPU_INT32U   size_stk;
#endif
    CPU_SR_ALLOC();
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]


    (void)p_arg;                                                /* Prevent compiler warning for not using 'p_arg'       */

    while (OSStatTaskRdy != OS_TRUE) {
 8002260:	e008      	b.n	8002274 <OS_StatTask+0x20>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,                   /* Wait until statistic task is ready                   */
 8002262:	4b64      	ldr	r3, [pc, #400]	@ (80023f4 <OS_StatTask+0x1a0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	f107 020e 	add.w	r2, r7, #14
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f000 ff3a 	bl	80030e8 <OSTimeDly>
    while (OSStatTaskRdy != OS_TRUE) {
 8002274:	4b60      	ldr	r3, [pc, #384]	@ (80023f8 <OS_StatTask+0x1a4>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d1f2      	bne.n	8002262 <OS_StatTask+0xe>
                  OS_OPT_TIME_DLY,
                  &err);
    }
    OSStatReset(&err);                                          /* Reset statistics                                     */
 800227c:	f107 030e 	add.w	r3, r7, #14
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ffcd 	bl	8002220 <OSStatReset>

    dly = (OS_TICK)0;                                           /* Compute statistic task sleep delay                   */
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	@ 0x24
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 800228a:	4b5c      	ldr	r3, [pc, #368]	@ (80023fc <OS_StatTask+0x1a8>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4b59      	ldr	r3, [pc, #356]	@ (80023f4 <OS_StatTask+0x1a0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d906      	bls.n	80022a4 <OS_StatTask+0x50>
        dly = (OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 8002296:	4b59      	ldr	r3, [pc, #356]	@ (80023fc <OS_StatTask+0x1a8>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b56      	ldr	r3, [pc, #344]	@ (80023f4 <OS_StatTask+0x1a0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    if (dly == 0u) {
 80022a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <OS_StatTask+0x64>
        dly =  (OSCfg_TickRate_Hz / 10u);
 80022aa:	4b54      	ldr	r3, [pc, #336]	@ (80023fc <OS_StatTask+0x1a8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a54      	ldr	r2, [pc, #336]	@ (8002400 <OS_StatTask+0x1ac>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	08db      	lsrs	r3, r3, #3
 80022b6:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef  CPU_CFG_INT_DIS_MEAS_EN
        OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
#endif
#endif

        CPU_CRITICAL_ENTER();                                   /* ---------------- OVERALL CPU USAGE ----------------- */
 80022b8:	2040      	movs	r0, #64	@ 0x40
 80022ba:	f7fd ff89 	bl	80001d0 <CPU_SR_Save>
 80022be:	61b8      	str	r0, [r7, #24]
        OSStatTaskCtrRun   = OSStatTaskCtr;                     /* Obtain the of the stat counter for the past .1 second*/
 80022c0:	4b50      	ldr	r3, [pc, #320]	@ (8002404 <OS_StatTask+0x1b0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a50      	ldr	r2, [pc, #320]	@ (8002408 <OS_StatTask+0x1b4>)
 80022c6:	6013      	str	r3, [r2, #0]
        OSStatTaskCtr      = 0u;                                /* Reset the stat counter for the next .1 second        */
 80022c8:	4b4e      	ldr	r3, [pc, #312]	@ (8002404 <OS_StatTask+0x1b0>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
        CPU_CRITICAL_EXIT();
 80022ce:	69b8      	ldr	r0, [r7, #24]
 80022d0:	f7fd ff8c 	bl	80001ec <CPU_SR_Restore>

        if (OSStatTaskCtrMax > OSStatTaskCtrRun) {              /* Compute CPU Usage with best resolution               */
 80022d4:	4b4d      	ldr	r3, [pc, #308]	@ (800240c <OS_StatTask+0x1b8>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002408 <OS_StatTask+0x1b4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d94f      	bls.n	8002380 <OS_StatTask+0x12c>
            if (OSStatTaskCtrMax < 400000u) {                   /* 1 to       400,000                                   */
 80022e0:	4b4a      	ldr	r3, [pc, #296]	@ (800240c <OS_StatTask+0x1b8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a4a      	ldr	r2, [pc, #296]	@ (8002410 <OS_StatTask+0x1bc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d805      	bhi.n	80022f6 <OS_StatTask+0xa2>
                ctr_mult = 10000u;
 80022ea:	f242 7310 	movw	r3, #10000	@ 0x2710
 80022ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =     1u;
 80022f0:	2301      	movs	r3, #1
 80022f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022f4:	e024      	b.n	8002340 <OS_StatTask+0xec>
            } else if (OSStatTaskCtrMax <   4000000u) {         /* 400,000 to     4,000,000                             */
 80022f6:	4b45      	ldr	r3, [pc, #276]	@ (800240c <OS_StatTask+0x1b8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a46      	ldr	r2, [pc, #280]	@ (8002414 <OS_StatTask+0x1c0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d805      	bhi.n	800230c <OS_StatTask+0xb8>
                ctr_mult =  1000u;
 8002300:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002304:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =    10u;
 8002306:	230a      	movs	r3, #10
 8002308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800230a:	e019      	b.n	8002340 <OS_StatTask+0xec>
            } else if (OSStatTaskCtrMax <  40000000u) {         /* 4,000,000 to    40,000,000                           */
 800230c:	4b3f      	ldr	r3, [pc, #252]	@ (800240c <OS_StatTask+0x1b8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a41      	ldr	r2, [pc, #260]	@ (8002418 <OS_StatTask+0x1c4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d204      	bcs.n	8002320 <OS_StatTask+0xcc>
                ctr_mult =   100u;
 8002316:	2364      	movs	r3, #100	@ 0x64
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =   100u;
 800231a:	2364      	movs	r3, #100	@ 0x64
 800231c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800231e:	e00f      	b.n	8002340 <OS_StatTask+0xec>
            } else if (OSStatTaskCtrMax < 400000000u) {         /* 40,000,000 to   400,000,000                          */
 8002320:	4b3a      	ldr	r3, [pc, #232]	@ (800240c <OS_StatTask+0x1b8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a3d      	ldr	r2, [pc, #244]	@ (800241c <OS_StatTask+0x1c8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d805      	bhi.n	8002336 <OS_StatTask+0xe2>
                ctr_mult =    10u;
 800232a:	230a      	movs	r3, #10
 800232c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =  1000u;
 800232e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002332:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002334:	e004      	b.n	8002340 <OS_StatTask+0xec>
            } else {                                            /* 400,000,000 and up                                   */
                ctr_mult =     1u;
 8002336:	2301      	movs	r3, #1
 8002338:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  = 10000u;
 800233a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800233e:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
            ctr_max            = OSStatTaskCtrMax / ctr_div;
 8002340:	4b32      	ldr	r3, [pc, #200]	@ (800240c <OS_StatTask+0x1b8>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002346:	fbb2 f3f3 	udiv	r3, r2, r3
 800234a:	617b      	str	r3, [r7, #20]
            OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ((ctr_mult * OSStatTaskCtrRun) / ctr_max));
 800234c:	4b2e      	ldr	r3, [pc, #184]	@ (8002408 <OS_StatTask+0x1b4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002352:	fb03 f202 	mul.w	r2, r3, r2
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	fbb2 f3f3 	udiv	r3, r2, r3
 800235c:	b29b      	uxth	r3, r3
 800235e:	f5c3 531c 	rsb	r3, r3, #9984	@ 0x2700
 8002362:	3310      	adds	r3, #16
 8002364:	b29a      	uxth	r2, r3
 8002366:	4b2e      	ldr	r3, [pc, #184]	@ (8002420 <OS_StatTask+0x1cc>)
 8002368:	801a      	strh	r2, [r3, #0]
            if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
 800236a:	4b2e      	ldr	r3, [pc, #184]	@ (8002424 <OS_StatTask+0x1d0>)
 800236c:	881a      	ldrh	r2, [r3, #0]
 800236e:	4b2c      	ldr	r3, [pc, #176]	@ (8002420 <OS_StatTask+0x1cc>)
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d207      	bcs.n	8002386 <OS_StatTask+0x132>
                OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
 8002376:	4b2a      	ldr	r3, [pc, #168]	@ (8002420 <OS_StatTask+0x1cc>)
 8002378:	881a      	ldrh	r2, [r3, #0]
 800237a:	4b2a      	ldr	r3, [pc, #168]	@ (8002424 <OS_StatTask+0x1d0>)
 800237c:	801a      	strh	r2, [r3, #0]
 800237e:	e002      	b.n	8002386 <OS_StatTask+0x132>
            }
        } else {
            OSStatTaskCPUUsage = 0u;
 8002380:	4b27      	ldr	r3, [pc, #156]	@ (8002420 <OS_StatTask+0x1cc>)
 8002382:	2200      	movs	r2, #0
 8002384:	801a      	strh	r2, [r3, #0]
        }

        OSStatTaskHook();                                       /* Invoke user definable hook                           */
 8002386:	f7fe f9f9 	bl	800077c <OSStatTaskHook>
        }
#endif

                                                                /*------------------ Check ISR Stack -------------------*/
#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) && (OS_CFG_ISR_STK_SIZE > 0u)
        free_stk  = 0u;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
        p_stk     = OSCfg_ISRStkBasePtr;                        /*   Start at the lowest memory and go up               */
 800238e:	4b26      	ldr	r3, [pc, #152]	@ (8002428 <OS_StatTask+0x1d4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	623b      	str	r3, [r7, #32]
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
        p_stk    += OS_CFG_TASK_STK_REDZONE_DEPTH;
        size_stk  = OSCfg_ISRStkSize - OS_CFG_TASK_STK_REDZONE_DEPTH;
#else
        size_stk  = OSCfg_ISRStkSize;
 8002394:	4b25      	ldr	r3, [pc, #148]	@ (800242c <OS_StatTask+0x1d8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	613b      	str	r3, [r7, #16]
#endif
        while ((*p_stk == 0u) && (free_stk < size_stk)) {       /*   Compute the number of zero entries on the stk      */
 800239a:	e005      	b.n	80023a8 <OS_StatTask+0x154>
            p_stk++;
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	3304      	adds	r3, #4
 80023a0:	623b      	str	r3, [r7, #32]
            free_stk++;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3301      	adds	r3, #1
 80023a6:	61fb      	str	r3, [r7, #28]
        while ((*p_stk == 0u) && (free_stk < size_stk)) {       /*   Compute the number of zero entries on the stk      */
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d103      	bne.n	80023b8 <OS_StatTask+0x164>
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d3f1      	bcc.n	800239c <OS_StatTask+0x148>
        while ((*p_stk == 0u) && (free_stk < size_stk)) {       /*   Compute the number of zero entries on the stk      */
            free_stk++;
            p_stk--;
        }
#endif
        OSISRStkFree = free_stk;
 80023b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002430 <OS_StatTask+0x1dc>)
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	6013      	str	r3, [r2, #0]
        OSISRStkUsed = OSCfg_ISRStkSize - free_stk;
 80023be:	4b1b      	ldr	r3, [pc, #108]	@ (800242c <OS_StatTask+0x1d8>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002434 <OS_StatTask+0x1e0>)
 80023c8:	6013      	str	r3, [r2, #0]
#endif

        if (OSStatResetFlag == OS_TRUE) {                       /* Check if need to reset statistics                    */
 80023ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002438 <OS_StatTask+0x1e4>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d107      	bne.n	80023e2 <OS_StatTask+0x18e>
            OSStatResetFlag  = OS_FALSE;
 80023d2:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <OS_StatTask+0x1e4>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
            OSStatReset(&err);
 80023d8:	f107 030e 	add.w	r3, r7, #14
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff1f 	bl	8002220 <OSStatReset>
        if (OSStatTaskTimeMax < OSStatTaskTime) {
            OSStatTaskTimeMax = OSStatTaskTime;
        }
#endif

        OSTimeDly(dly,
 80023e2:	f107 030e 	add.w	r3, r7, #14
 80023e6:	461a      	mov	r2, r3
 80023e8:	2100      	movs	r1, #0
 80023ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80023ec:	f000 fe7c 	bl	80030e8 <OSTimeDly>
        CPU_CRITICAL_ENTER();                                   /* ---------------- OVERALL CPU USAGE ----------------- */
 80023f0:	e762      	b.n	80022b8 <OS_StatTask+0x64>
 80023f2:	bf00      	nop
 80023f4:	08004790 	.word	0x08004790
 80023f8:	20001570 	.word	0x20001570
 80023fc:	080047a4 	.word	0x080047a4
 8002400:	cccccccd 	.word	0xcccccccd
 8002404:	20001564 	.word	0x20001564
 8002408:	2000156c 	.word	0x2000156c
 800240c:	20001568 	.word	0x20001568
 8002410:	00061a7f 	.word	0x00061a7f
 8002414:	003d08ff 	.word	0x003d08ff
 8002418:	02625a00 	.word	0x02625a00
 800241c:	17d783ff 	.word	0x17d783ff
 8002420:	2000155e 	.word	0x2000155e
 8002424:	20001560 	.word	0x20001560
 8002428:	0800477c 	.word	0x0800477c
 800242c:	08004780 	.word	0x08004780
 8002430:	20001338 	.word	0x20001338
 8002434:	2000133c 	.word	0x2000133c
 8002438:	2000155d 	.word	0x2000155d

0800243c <OS_StatTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTaskInit (OS_ERR  *p_err)
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b08d      	sub	sp, #52	@ 0x34
 8002440:	af0a      	add	r7, sp, #40	@ 0x28
 8002442:	6078      	str	r0, [r7, #4]
    OSStatTaskCtr    = 0u;
 8002444:	4b28      	ldr	r3, [pc, #160]	@ (80024e8 <OS_StatTaskInit+0xac>)
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrRun = 0u;
 800244a:	4b28      	ldr	r3, [pc, #160]	@ (80024ec <OS_StatTaskInit+0xb0>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrMax = 0u;
 8002450:	4b27      	ldr	r3, [pc, #156]	@ (80024f0 <OS_StatTaskInit+0xb4>)
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
    OSStatTaskRdy    = OS_STATE_NOT_RDY;                        /* Statistic task is not ready                          */
 8002456:	4b27      	ldr	r3, [pc, #156]	@ (80024f4 <OS_StatTaskInit+0xb8>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
    OSStatResetFlag  = OS_FALSE;
 800245c:	4b26      	ldr	r3, [pc, #152]	@ (80024f8 <OS_StatTaskInit+0xbc>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]

#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) && (OS_CFG_ISR_STK_SIZE > 0u)
    OSISRStkFree     = 0u;
 8002462:	4b26      	ldr	r3, [pc, #152]	@ (80024fc <OS_StatTaskInit+0xc0>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
    OSISRStkUsed     = 0u;
 8002468:	4b25      	ldr	r3, [pc, #148]	@ (8002500 <OS_StatTaskInit+0xc4>)
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
#endif
                                                                /* --------------- CREATE THE STAT TASK --------------- */
    if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
 800246e:	4b25      	ldr	r3, [pc, #148]	@ (8002504 <OS_StatTaskInit+0xc8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d104      	bne.n	8002480 <OS_StatTaskInit+0x44>
       *p_err = OS_ERR_STAT_STK_INVALID;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f646 622b 	movw	r2, #28203	@ 0x6e2b
 800247c:	801a      	strh	r2, [r3, #0]
        return;
 800247e:	e02f      	b.n	80024e0 <OS_StatTaskInit+0xa4>
    }

    if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
 8002480:	4b21      	ldr	r3, [pc, #132]	@ (8002508 <OS_StatTaskInit+0xcc>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b21      	ldr	r3, [pc, #132]	@ (800250c <OS_StatTaskInit+0xd0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d204      	bcs.n	8002496 <OS_StatTaskInit+0x5a>
       *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f646 622c 	movw	r2, #28204	@ 0x6e2c
 8002492:	801a      	strh	r2, [r3, #0]
        return;
 8002494:	e024      	b.n	80024e0 <OS_StatTaskInit+0xa4>
    }

    if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 8002496:	4b1e      	ldr	r3, [pc, #120]	@ (8002510 <OS_StatTaskInit+0xd4>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b3e      	cmp	r3, #62	@ 0x3e
 800249c:	d904      	bls.n	80024a8 <OS_StatTaskInit+0x6c>
       *p_err = OS_ERR_STAT_PRIO_INVALID;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f646 622a 	movw	r2, #28202	@ 0x6e2a
 80024a4:	801a      	strh	r2, [r3, #0]
        return;
 80024a6:	e01b      	b.n	80024e0 <OS_StatTaskInit+0xa4>
    }

    OSTaskCreate(&OSStatTaskTCB,
 80024a8:	4b19      	ldr	r3, [pc, #100]	@ (8002510 <OS_StatTaskInit+0xd4>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	4a15      	ldr	r2, [pc, #84]	@ (8002504 <OS_StatTaskInit+0xc8>)
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	4918      	ldr	r1, [pc, #96]	@ (8002514 <OS_StatTaskInit+0xd8>)
 80024b2:	6809      	ldr	r1, [r1, #0]
 80024b4:	4814      	ldr	r0, [pc, #80]	@ (8002508 <OS_StatTaskInit+0xcc>)
 80024b6:	6800      	ldr	r0, [r0, #0]
 80024b8:	687c      	ldr	r4, [r7, #4]
 80024ba:	9408      	str	r4, [sp, #32]
 80024bc:	2403      	movs	r4, #3
 80024be:	9407      	str	r4, [sp, #28]
 80024c0:	2400      	movs	r4, #0
 80024c2:	9406      	str	r4, [sp, #24]
 80024c4:	2400      	movs	r4, #0
 80024c6:	9405      	str	r4, [sp, #20]
 80024c8:	2400      	movs	r4, #0
 80024ca:	9404      	str	r4, [sp, #16]
 80024cc:	9003      	str	r0, [sp, #12]
 80024ce:	9102      	str	r1, [sp, #8]
 80024d0:	9201      	str	r2, [sp, #4]
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	2300      	movs	r3, #0
 80024d6:	4a10      	ldr	r2, [pc, #64]	@ (8002518 <OS_StatTaskInit+0xdc>)
 80024d8:	2100      	movs	r1, #0
 80024da:	4810      	ldr	r0, [pc, #64]	@ (800251c <OS_StatTaskInit+0xe0>)
 80024dc:	f000 f820 	bl	8002520 <OSTaskCreate>
                  0u,
                  0u,
                 (void       *)0,
                 (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                  p_err);
}
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd90      	pop	{r4, r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20001564 	.word	0x20001564
 80024ec:	2000156c 	.word	0x2000156c
 80024f0:	20001568 	.word	0x20001568
 80024f4:	20001570 	.word	0x20001570
 80024f8:	2000155d 	.word	0x2000155d
 80024fc:	20001338 	.word	0x20001338
 8002500:	2000133c 	.word	0x2000133c
 8002504:	08004794 	.word	0x08004794
 8002508:	0800479c 	.word	0x0800479c
 800250c:	080047a0 	.word	0x080047a0
 8002510:	0800478c 	.word	0x0800478c
 8002514:	08004798 	.word	0x08004798
 8002518:	08002255 	.word	0x08002255
 800251c:	20001574 	.word	0x20001574

08002520 <OSTaskCreate>:
                    OS_MSG_QTY     q_size,
                    OS_TICK        time_quanta,
                    void          *p_ext,
                    OS_OPT         opt,
                    OS_ERR        *p_err)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	@ 0x30
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	603b      	str	r3, [r7, #0]
    OS_TLS_ID      id;
#endif

    CPU_STK       *p_sp;
    CPU_STK       *p_stk_limit;
    CPU_SR_ALLOC();
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* --------- CANNOT CREATE A TASK FROM AN ISR --------- */
 8002532:	4b7f      	ldr	r3, [pc, #508]	@ (8002730 <OSTaskCreate+0x210>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d004      	beq.n	8002544 <OSTaskCreate+0x24>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_TASK_CREATE_ISR;
 800253a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800253c:	f247 124a 	movw	r2, #29002	@ 0x714a
 8002540:	801a      	strh	r2, [r3, #0]
        return;
 8002542:	e0f2      	b.n	800272a <OSTaskCreate+0x20a>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)                                    /* ---------------- VALIDATE ARGUMENTS ---------------- */
    if (p_tcb == (OS_TCB *)0) {                                 /* User must supply a valid OS_TCB                      */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d104      	bne.n	8002554 <OSTaskCreate+0x34>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_TCB_INVALID;
 800254a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800254c:	f247 12ad 	movw	r2, #29101	@ 0x71ad
 8002550:	801a      	strh	r2, [r3, #0]
        return;
 8002552:	e0ea      	b.n	800272a <OSTaskCreate+0x20a>
    }
    if (p_task == (OS_TASK_PTR)0u) {                            /* User must supply a valid task                        */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d104      	bne.n	8002564 <OSTaskCreate+0x44>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_TASK_INVALID;
 800255a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800255c:	f247 124f 	movw	r2, #29007	@ 0x714f
 8002560:	801a      	strh	r2, [r3, #0]
        return;
 8002562:	e0e2      	b.n	800272a <OSTaskCreate+0x20a>
    }
    if (p_stk_base == (CPU_STK *)0) {                           /* User must supply a valid stack base address          */
 8002564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002566:	2b00      	cmp	r3, #0
 8002568:	d104      	bne.n	8002574 <OSTaskCreate+0x54>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_STK_INVALID;
 800256a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800256c:	f646 622f 	movw	r2, #28207	@ 0x6e2f
 8002570:	801a      	strh	r2, [r3, #0]
        return;
 8002572:	e0da      	b.n	800272a <OSTaskCreate+0x20a>
    }
    if (stk_size < OSCfg_StkSizeMin) {                          /* User must supply a valid minimum stack size          */
 8002574:	4b6f      	ldr	r3, [pc, #444]	@ (8002734 <OSTaskCreate+0x214>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800257a:	429a      	cmp	r2, r3
 800257c:	d204      	bcs.n	8002588 <OSTaskCreate+0x68>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_STK_SIZE_INVALID;
 800257e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002580:	f646 6230 	movw	r2, #28208	@ 0x6e30
 8002584:	801a      	strh	r2, [r3, #0]
        return;
 8002586:	e0d0      	b.n	800272a <OSTaskCreate+0x20a>
    }
    if (stk_limit >= stk_size) {                                /* User must supply a valid stack limit                 */
 8002588:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800258a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800258c:	429a      	cmp	r2, r3
 800258e:	d304      	bcc.n	800259a <OSTaskCreate+0x7a>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_STK_LIMIT_INVALID;
 8002590:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002592:	f646 6231 	movw	r2, #28209	@ 0x6e31
 8002596:	801a      	strh	r2, [r3, #0]
        return;
 8002598:	e0c7      	b.n	800272a <OSTaskCreate+0x20a>
    }
    if ((prio  > (OS_CFG_PRIO_MAX - 2u)) &&                     /* Priority must be within 0 and OS_CFG_PRIO_MAX-1      */
 800259a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800259e:	2b3e      	cmp	r3, #62	@ 0x3e
 80025a0:	d908      	bls.n	80025b4 <OSTaskCreate+0x94>
 80025a2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80025a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80025a8:	d004      	beq.n	80025b4 <OSTaskCreate+0x94>
        (prio != (OS_CFG_PRIO_MAX - 1u))) {
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_PRIO_INVALID;
 80025aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025ac:	f246 2273 	movw	r2, #25203	@ 0x6273
 80025b0:	801a      	strh	r2, [r3, #0]
        return;
 80025b2:	e0ba      	b.n	800272a <OSTaskCreate+0x20a>
    }
#endif

    if (prio == (OS_CFG_PRIO_MAX - 1u)) {
 80025b4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80025b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80025ba:	d108      	bne.n	80025ce <OSTaskCreate+0xae>
#if (OS_CFG_TASK_IDLE_EN > 0u)
        if (p_tcb != &OSIdleTaskTCB) {
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4a5e      	ldr	r2, [pc, #376]	@ (8002738 <OSTaskCreate+0x218>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d004      	beq.n	80025ce <OSTaskCreate+0xae>
            OS_TRACE_TASK_CREATE_FAILED(p_tcb);
           *p_err = OS_ERR_PRIO_INVALID;                        /* Not allowed to use same priority as idle task        */
 80025c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025c6:	f246 2273 	movw	r2, #25203	@ 0x6273
 80025ca:	801a      	strh	r2, [r3, #0]
            return;
 80025cc:	e0ad      	b.n	800272a <OSTaskCreate+0x20a>
       *p_err = OS_ERR_PRIO_INVALID;                            /* Not allowed to use same priority as idle task        */
        return;
#endif
    }

    OS_TaskInitTCB(p_tcb);                                      /* Initialize the TCB to default values                 */
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f9da 	bl	8002988 <OS_TaskInitTCB>

   *p_err = OS_ERR_NONE;
 80025d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025d6:	2200      	movs	r2, #0
 80025d8:	801a      	strh	r2, [r3, #0]
                                                                /* -------------- CLEAR THE TASK'S STACK -------------- */
    if (((opt & OS_OPT_TASK_STK_CHK) != 0u) ||                  /* See if stack checking has been enabled               */
 80025da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d105      	bne.n	80025f2 <OSTaskCreate+0xd2>
        ((opt & OS_OPT_TASK_STK_CLR) != 0u)) {                  /* See if stack needs to be cleared                     */
 80025e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80025ea:	f003 0302 	and.w	r3, r3, #2
    if (((opt & OS_OPT_TASK_STK_CHK) != 0u) ||                  /* See if stack checking has been enabled               */
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d017      	beq.n	8002622 <OSTaskCreate+0x102>
        if ((opt & OS_OPT_TASK_STK_CLR) != 0u) {
 80025f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d011      	beq.n	8002622 <OSTaskCreate+0x102>
            p_sp = p_stk_base;
 80025fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002600:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {                   /* Stack grows from HIGH to LOW memory                  */
 8002602:	2300      	movs	r3, #0
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
 8002606:	e008      	b.n	800261a <OSTaskCreate+0xfa>
               *p_sp = 0u;                                      /* Clear from bottom of stack and up!                   */
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
                p_sp++;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3304      	adds	r3, #4
 8002612:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {                   /* Stack grows from HIGH to LOW memory                  */
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	3301      	adds	r3, #1
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
 800261a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800261c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800261e:	429a      	cmp	r2, r3
 8002620:	d3f2      	bcc.n	8002608 <OSTaskCreate+0xe8>
            }
        }
    }
                                                                /* ------ INITIALIZE THE STACK FRAME OF THE TASK ------ */
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    p_stk_limit = p_stk_base + stk_limit;
 8002622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002628:	4413      	add	r3, r2
 800262a:	617b      	str	r3, [r7, #20]
#else
    p_stk_limit = p_stk_base + (stk_size - 1u) - stk_limit;
#endif

    p_sp = OSTaskStkInit(p_task,
 800262c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800263a:	6839      	ldr	r1, [r7, #0]
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7fe f8e1 	bl	8000804 <OSTaskStkInit>
 8002642:	61f8      	str	r0, [r7, #28]
                         p_stk_limit,
                         stk_size,
                         opt);

#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)             /* Check if we overflown the stack during init          */
    if (p_sp < p_stk_base) {
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002648:	429a      	cmp	r2, r3
 800264a:	d204      	bcs.n	8002656 <OSTaskCreate+0x136>
       *p_err = OS_ERR_STK_OVF;
 800264c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800264e:	f646 6232 	movw	r2, #28210	@ 0x6e32
 8002652:	801a      	strh	r2, [r3, #0]
        return;
 8002654:	e069      	b.n	800272a <OSTaskCreate+0x20a>
    p_tcb->NamePtr       = p_name;                              /* Save task name                                       */
#else
    (void)p_name;
#endif

    p_tcb->Prio          = prio;                                /* Save the task's priority                             */
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800265c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

#if (OS_CFG_MUTEX_EN > 0u)
    p_tcb->BasePrio      = prio;                                /* Set the base priority                                */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002666:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
#endif

    p_tcb->StkPtr        = p_sp;                                /* Save the new top-of-stack pointer                    */
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	601a      	str	r2, [r3, #0]
    p_tcb->StkLimitPtr   = p_stk_limit;                         /* Save the stack limit pointer                         */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	609a      	str	r2, [r3, #8]

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
    p_tcb->TimeQuanta    = time_quanta;                         /* Save the #ticks for time slice (0 means not sliced)  */
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800267a:	64da      	str	r2, [r3, #76]	@ 0x4c
    if (time_quanta == 0u) {
 800267c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800267e:	2b00      	cmp	r3, #0
 8002680:	d104      	bne.n	800268c <OSTaskCreate+0x16c>
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
 8002682:	4b2e      	ldr	r3, [pc, #184]	@ (800273c <OSTaskCreate+0x21c>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	651a      	str	r2, [r3, #80]	@ 0x50
 800268a:	e002      	b.n	8002692 <OSTaskCreate+0x172>
    } else {
        p_tcb->TimeQuantaCtr = time_quanta;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002690:	651a      	str	r2, [r3, #80]	@ 0x50
    }
#else
    (void)time_quanta;
#endif

    p_tcb->ExtPtr        = p_ext;                               /* Save pointer to TCB extension                        */
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002696:	605a      	str	r2, [r3, #4]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) || (OS_CFG_TASK_STK_REDZONE_EN > 0u))
    p_tcb->StkBasePtr    = p_stk_base;                          /* Save pointer to the base address of the stack        */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800269c:	61da      	str	r2, [r3, #28]
    p_tcb->StkSize       = stk_size;                            /* Save the stack size (in number of CPU_STK elements)  */
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026a2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif
    p_tcb->Opt           = opt;                                 /* Save task options                                    */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80026aa:	879a      	strh	r2, [r3, #60]	@ 0x3c

#if (OS_CFG_TASK_REG_TBL_SIZE > 0u)
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 80026ac:	2300      	movs	r3, #0
 80026ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80026b2:	e00b      	b.n	80026cc <OSTaskCreate+0x1ac>
        p_tcb->RegTbl[reg_nbr] = 0u;
 80026b4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	321c      	adds	r2, #28
 80026bc:	2100      	movs	r1, #0
 80026be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 80026c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026c6:	3301      	adds	r3, #1
 80026c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80026cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0ef      	beq.n	80026b4 <OSTaskCreate+0x194>
    }
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
    OS_MsgQInit(&p_tcb->MsgQ,                                   /* Initialize the task's message queue                  */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	335c      	adds	r3, #92	@ 0x5c
 80026d8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe ffa6 	bl	8001630 <OS_MsgQInit>
                q_size);
#else
    (void)q_size;
#endif

    OSTaskCreateHook(p_tcb);                                    /* Call user defined hook                               */
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f7fe f857 	bl	8000798 <OSTaskCreateHook>
        p_tcb->TLS_Tbl[id] = 0u;
    }
    OS_TLS_TaskCreate(p_tcb);                                   /* Call TLS hook                                        */
#endif
                                                                /* -------------- ADD TASK TO READY LIST -------------- */
    CPU_CRITICAL_ENTER();
 80026ea:	2040      	movs	r0, #64	@ 0x40
 80026ec:	f7fd fd70 	bl	80001d0 <CPU_SR_Save>
 80026f0:	61b8      	str	r0, [r7, #24]
    OS_PrioInsert(p_tcb->Prio);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fb55 	bl	8001da8 <OS_PrioInsert>
    OS_RdyListInsertTail(p_tcb);
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f7fe fda6 	bl	8001250 <OS_RdyListInsertTail>

#if (OS_CFG_DBG_EN > 0u)
    OS_TaskDbgListAdd(p_tcb);
#endif

    OSTaskQty++;                                                /* Increment the #tasks counter                         */
 8002704:	4b0e      	ldr	r3, [pc, #56]	@ (8002740 <OSTaskCreate+0x220>)
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	3301      	adds	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	4b0c      	ldr	r3, [pc, #48]	@ (8002740 <OSTaskCreate+0x220>)
 800270e:	801a      	strh	r2, [r3, #0]

    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Return if multitasking has not started               */
 8002710:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <OSTaskCreate+0x224>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d003      	beq.n	8002720 <OSTaskCreate+0x200>
        CPU_CRITICAL_EXIT();
 8002718:	69b8      	ldr	r0, [r7, #24]
 800271a:	f7fd fd67 	bl	80001ec <CPU_SR_Restore>
        return;
 800271e:	e004      	b.n	800272a <OSTaskCreate+0x20a>
    }

    CPU_CRITICAL_EXIT();
 8002720:	69b8      	ldr	r0, [r7, #24]
 8002722:	f7fd fd63 	bl	80001ec <CPU_SR_Restore>

    OSSched();
 8002726:	f7fe faaf 	bl	8000c88 <OSSched>
}
 800272a:	3728      	adds	r7, #40	@ 0x28
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20001334 	.word	0x20001334
 8002734:	080047a0 	.word	0x080047a0
 8002738:	2000128c 	.word	0x2000128c
 800273c:	20001558 	.word	0x20001558
 8002740:	20001620 	.word	0x20001620
 8002744:	20001335 	.word	0x20001335

08002748 <OSTaskDel>:
*/

#if (OS_CFG_TASK_DEL_EN > 0u)
void  OSTaskDel (OS_TCB  *p_tcb,
                 OS_ERR  *p_err)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
#if (OS_CFG_MUTEX_EN > 0u)
    OS_TCB   *p_tcb_owner;
    OS_PRIO   prio_new;
#endif
    CPU_SR_ALLOC();
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* See if trying to delete from ISR                     */
 8002756:	4b7b      	ldr	r3, [pc, #492]	@ (8002944 <OSTaskDel+0x1fc>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d004      	beq.n	8002768 <OSTaskDel+0x20>
       *p_err = OS_ERR_TASK_DEL_ISR;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	f247 124e 	movw	r2, #29006	@ 0x714e
 8002764:	801a      	strh	r2, [r3, #0]
        return;
 8002766:	e0ea      	b.n	800293e <OSTaskDel+0x1f6>
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8002768:	4b77      	ldr	r3, [pc, #476]	@ (8002948 <OSTaskDel+0x200>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d004      	beq.n	800277a <OSTaskDel+0x32>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	f645 6289 	movw	r2, #24201	@ 0x5e89
 8002776:	801a      	strh	r2, [r3, #0]
        return;
 8002778:	e0e1      	b.n	800293e <OSTaskDel+0x1f6>
    }
#endif

#if (OS_CFG_TASK_IDLE_EN > 0u)
    if (p_tcb == &OSIdleTaskTCB) {                              /* Not allowed to delete the idle task                  */
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a73      	ldr	r2, [pc, #460]	@ (800294c <OSTaskDel+0x204>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d104      	bne.n	800278c <OSTaskDel+0x44>
       *p_err = OS_ERR_TASK_DEL_IDLE;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	f247 124c 	movw	r2, #29004	@ 0x714c
 8002788:	801a      	strh	r2, [r3, #0]
        return;
 800278a:	e0d8      	b.n	800293e <OSTaskDel+0x1f6>
    }
#endif

    if (p_tcb == (OS_TCB *)0) {                                 /* Delete 'Self'?                                       */
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <OSTaskDel+0x5e>
        CPU_CRITICAL_ENTER();
 8002792:	2040      	movs	r0, #64	@ 0x40
 8002794:	f7fd fd1c 	bl	80001d0 <CPU_SR_Save>
 8002798:	6138      	str	r0, [r7, #16]
        p_tcb  = OSTCBCurPtr;                                   /* Yes.                                                 */
 800279a:	4b6d      	ldr	r3, [pc, #436]	@ (8002950 <OSTaskDel+0x208>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	607b      	str	r3, [r7, #4]
        CPU_CRITICAL_EXIT();
 80027a0:	6938      	ldr	r0, [r7, #16]
 80027a2:	f7fd fd23 	bl	80001ec <CPU_SR_Restore>
    }

    CPU_CRITICAL_ENTER();
 80027a6:	2040      	movs	r0, #64	@ 0x40
 80027a8:	f7fd fd12 	bl	80001d0 <CPU_SR_Save>
 80027ac:	6138      	str	r0, [r7, #16]
    switch (p_tcb->TaskState) {
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80027b4:	2b07      	cmp	r3, #7
 80027b6:	f200 8093 	bhi.w	80028e0 <OSTaskDel+0x198>
 80027ba:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <OSTaskDel+0x78>)
 80027bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c0:	080027e1 	.word	0x080027e1
 80027c4:	080027e9 	.word	0x080027e9
 80027c8:	080027f1 	.word	0x080027f1
 80027cc:	080027f1 	.word	0x080027f1
 80027d0:	080028f1 	.word	0x080028f1
 80027d4:	080027e9 	.word	0x080027e9
 80027d8:	080027f1 	.word	0x080027f1
 80027dc:	080027f1 	.word	0x080027f1
        case OS_TASK_STATE_RDY:
             OS_RdyListRemove(p_tcb);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7fe fdb5 	bl	8001350 <OS_RdyListRemove>
             break;
 80027e6:	e086      	b.n	80028f6 <OSTaskDel+0x1ae>
             break;

        case OS_TASK_STATE_DLY:                                 /* Task is only delayed, not on any wait list           */
        case OS_TASK_STATE_DLY_SUSPENDED:
#if (OS_CFG_TICK_EN > 0u)
             OS_TickListRemove(p_tcb);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 fb6b 	bl	8002ec4 <OS_TickListRemove>
#endif
             break;
 80027ee:	e082      	b.n	80028f6 <OSTaskDel+0x1ae>

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             switch (p_tcb->PendOn) {                           /* See what we are pending on                           */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80027f6:	2b07      	cmp	r3, #7
 80027f8:	bf8c      	ite	hi
 80027fa:	2201      	movhi	r2, #1
 80027fc:	2200      	movls	r2, #0
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	2a00      	cmp	r2, #0
 8002802:	d15a      	bne.n	80028ba <OSTaskDel+0x172>
 8002804:	2201      	movs	r2, #1
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	f003 0262 	and.w	r2, r3, #98	@ 0x62
 800280e:	2a00      	cmp	r2, #0
 8002810:	bf14      	ite	ne
 8002812:	2201      	movne	r2, #1
 8002814:	2200      	moveq	r2, #0
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	2a00      	cmp	r2, #0
 800281a:	d112      	bne.n	8002842 <OSTaskDel+0xfa>
 800281c:	f003 0285 	and.w	r2, r3, #133	@ 0x85
 8002820:	2a00      	cmp	r2, #0
 8002822:	bf14      	ite	ne
 8002824:	2201      	movne	r2, #1
 8002826:	2200      	moveq	r2, #0
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	2a00      	cmp	r2, #0
 800282c:	d147      	bne.n	80028be <OSTaskDel+0x176>
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	bf14      	ite	ne
 8002836:	2301      	movne	r3, #1
 8002838:	2300      	moveq	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d104      	bne.n	800284a <OSTaskDel+0x102>
                      break;
#endif

                 default:
                                                                /* Default case.                                        */
                      break;
 8002840:	e03b      	b.n	80028ba <OSTaskDel+0x172>
                      OS_PendListRemove(p_tcb);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe fbd7 	bl	8000ff6 <OS_PendListRemove>
                      break;
 8002848:	e03c      	b.n	80028c4 <OSTaskDel+0x17c>
                      p_tcb_owner = ((OS_MUTEX *)((void *)p_tcb->PendObjPtr))->OwnerTCBPtr;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	60fb      	str	r3, [r7, #12]
                      prio_new = p_tcb_owner->Prio;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002858:	75fb      	strb	r3, [r7, #23]
                      OS_PendListRemove(p_tcb);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe fbcb 	bl	8000ff6 <OS_PendListRemove>
                      if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800286c:	429a      	cmp	r2, r3
 800286e:	d014      	beq.n	800289a <OSTaskDel+0x152>
                          (p_tcb_owner->Prio == p_tcb->Prio)) { /* Has the owner inherited a priority?                  */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
                      if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 800287c:	429a      	cmp	r2, r3
 800287e:	d10c      	bne.n	800289a <OSTaskDel+0x152>
                          prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7ff f9f2 	bl	8001c6a <OS_MutexGrpPrioFindHighest>
 8002886:	4603      	mov	r3, r0
 8002888:	75fb      	strb	r3, [r7, #23]
                          prio_new = (prio_new > p_tcb_owner->BasePrio) ? p_tcb_owner->BasePrio : prio_new;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002890:	7dfa      	ldrb	r2, [r7, #23]
 8002892:	4293      	cmp	r3, r2
 8002894:	bf28      	it	cs
 8002896:	4613      	movcs	r3, r2
 8002898:	75fb      	strb	r3, [r7, #23]
                      p_tcb->PendOn = OS_TASK_PEND_ON_NOTHING;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                      if (prio_new != p_tcb_owner->Prio) {
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80028a8:	7dfa      	ldrb	r2, [r7, #23]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d009      	beq.n	80028c2 <OSTaskDel+0x17a>
                          OS_TaskChangePrio(p_tcb_owner, prio_new);
 80028ae:	7dfb      	ldrb	r3, [r7, #23]
 80028b0:	4619      	mov	r1, r3
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 f92a 	bl	8002b0c <OS_TaskChangePrio>
                      break;
 80028b8:	e003      	b.n	80028c2 <OSTaskDel+0x17a>
                      break;
 80028ba:	bf00      	nop
 80028bc:	e002      	b.n	80028c4 <OSTaskDel+0x17c>
                      break;
 80028be:	bf00      	nop
 80028c0:	e000      	b.n	80028c4 <OSTaskDel+0x17c>
                      break;
 80028c2:	bf00      	nop
             }
#if (OS_CFG_TICK_EN > 0u)
             if ((p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) ||
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d004      	beq.n	80028d8 <OSTaskDel+0x190>
                 (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED)) {
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
             if ((p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) ||
 80028d4:	2b07      	cmp	r3, #7
 80028d6:	d10d      	bne.n	80028f4 <OSTaskDel+0x1ac>
                 OS_TickListRemove(p_tcb);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 faf3 	bl	8002ec4 <OS_TickListRemove>
             }
#endif
             break;
 80028de:	e009      	b.n	80028f4 <OSTaskDel+0x1ac>

        default:
            CPU_CRITICAL_EXIT();
 80028e0:	6938      	ldr	r0, [r7, #16]
 80028e2:	f7fd fc83 	bl	80001ec <CPU_SR_Restore>
           *p_err = OS_ERR_STATE_INVALID;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	f646 622d 	movw	r2, #28205	@ 0x6e2d
 80028ec:	801a      	strh	r2, [r3, #0]
            return;
 80028ee:	e026      	b.n	800293e <OSTaskDel+0x1f6>
             break;
 80028f0:	bf00      	nop
 80028f2:	e000      	b.n	80028f6 <OSTaskDel+0x1ae>
             break;
 80028f4:	bf00      	nop
    }

#if (OS_CFG_MUTEX_EN > 0u)
    if(p_tcb->MutexGrpHeadPtr != (OS_MUTEX *)0) {
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <OSTaskDel+0x1bc>
        OS_MutexGrpPostAll(p_tcb);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff f9dd 	bl	8001cbe <OS_MutexGrpPostAll>
    }
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
    (void)OS_MsgQFreeAll(&p_tcb->MsgQ);                         /* Free task's message queue messages                   */
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	335c      	adds	r3, #92	@ 0x5c
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe fe59 	bl	80015c0 <OS_MsgQFreeAll>
#endif

    OSTaskDelHook(p_tcb);                                       /* Call user defined hook                               */
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fd ff54 	bl	80007bc <OSTaskDelHook>

#if (OS_CFG_DBG_EN > 0u)
    OS_TaskDbgListRemove(p_tcb);
#endif

    OSTaskQty--;                                                /* One less task being managed                          */
 8002914:	4b0f      	ldr	r3, [pc, #60]	@ (8002954 <OSTaskDel+0x20c>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	4b0d      	ldr	r3, [pc, #52]	@ (8002954 <OSTaskDel+0x20c>)
 800291e:	801a      	strh	r2, [r3, #0]

    OS_TRACE_TASK_DEL(p_tcb);

#if (OS_CFG_TASK_STK_REDZONE_EN == 0u)                          /* Don't clear the TCB before checking the red-zone     */
    OS_TaskInitTCB(p_tcb);                                      /* Initialize the TCB to default values                 */
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f831 	bl	8002988 <OS_TaskInitTCB>
#endif
    p_tcb->TaskState = (OS_STATE)OS_TASK_STATE_DEL;             /* Indicate that the task was deleted                   */
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	22ff      	movs	r2, #255	@ 0xff
 800292a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

   *p_err = OS_ERR_NONE;                                        /* See Note #1.                                         */
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2200      	movs	r2, #0
 8002932:	801a      	strh	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 8002934:	6938      	ldr	r0, [r7, #16]
 8002936:	f7fd fc59 	bl	80001ec <CPU_SR_Restore>

    OSSched();                                                  /* Find new highest priority task                       */
 800293a:	f7fe f9a5 	bl	8000c88 <OSSched>
}
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20001334 	.word	0x20001334
 8002948:	20001335 	.word	0x20001335
 800294c:	2000128c 	.word	0x2000128c
 8002950:	20001708 	.word	0x20001708
 8002954:	20001620 	.word	0x20001620

08002958 <OS_TaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInit (OS_ERR  *p_err)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSTaskDbgListPtr = (OS_TCB *)0;
#endif

    OSTaskQty        = 0u;                                      /* Clear the number of tasks                            */
 8002960:	4b07      	ldr	r3, [pc, #28]	@ (8002980 <OS_TaskInit+0x28>)
 8002962:	2200      	movs	r2, #0
 8002964:	801a      	strh	r2, [r3, #0]

#if ((OS_CFG_TASK_PROFILE_EN > 0u) || (OS_CFG_DBG_EN > 0u))
    OSTaskCtxSwCtr   = 0u;                                      /* Clear the context switch counter                     */
 8002966:	4b07      	ldr	r3, [pc, #28]	@ (8002984 <OS_TaskInit+0x2c>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
#endif

   *p_err            = OS_ERR_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	801a      	strh	r2, [r3, #0]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20001620 	.word	0x20001620
 8002984:	2000161c 	.word	0x2000161c

08002988 <OS_TaskInitTCB>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInitTCB (OS_TCB  *p_tcb)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_ID   id;
#endif


    p_tcb->StkPtr               = (CPU_STK          *)0;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
    p_tcb->StkLimitPtr          = (CPU_STK          *)0;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]

    p_tcb->ExtPtr               = (void             *)0;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	605a      	str	r2, [r3, #4]

    p_tcb->NextPtr              = (OS_TCB           *)0;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	60da      	str	r2, [r3, #12]
    p_tcb->PrevPtr              = (OS_TCB           *)0;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	611a      	str	r2, [r3, #16]

#if (OS_CFG_TICK_EN > 0u)
    p_tcb->TickNextPtr          = (OS_TCB           *)0;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	615a      	str	r2, [r3, #20]
    p_tcb->TickPrevPtr          = (OS_TCB           *)0;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	619a      	str	r2, [r3, #24]
#if (OS_CFG_DBG_EN > 0u)
    p_tcb->NamePtr              = (CPU_CHAR *)((void *)"?Task");
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkBasePtr           = (CPU_STK          *)0;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	61da      	str	r2, [r3, #28]
#if (OS_CFG_TS_EN > 0u)
    p_tcb->TS                   =                     0u;
#endif

#if (OS_MSG_EN > 0u)
    p_tcb->MsgPtr               = (void             *)0;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	655a      	str	r2, [r3, #84]	@ 0x54
    p_tcb->MsgSize              =                     0u;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
    OS_MsgQInit(&p_tcb->MsgQ,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	335c      	adds	r3, #92	@ 0x5c
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe fe2b 	bl	8001630 <OS_MsgQInit>
                 0u);
#if (OS_CFG_TASK_PROFILE_EN > 0u)
    p_tcb->MsgQPendTime         =                     0u;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	669a      	str	r2, [r3, #104]	@ 0x68
    p_tcb->MsgQPendTimeMax      =                     0u;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	66da      	str	r2, [r3, #108]	@ 0x6c
#endif
#endif

#if (OS_CFG_FLAG_EN > 0u)
    p_tcb->FlagsPend            =                     0u;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	675a      	str	r2, [r3, #116]	@ 0x74
    p_tcb->FlagsOpt             =                     0u;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    p_tcb->FlagsRdy             =                     0u;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif

#if (OS_CFG_TASK_REG_TBL_SIZE > 0u)
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]
 80029fe:	e008      	b.n	8002a12 <OS_TaskInitTCB+0x8a>
        p_tcb->RegTbl[reg_id]   =                     0u;
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	321c      	adds	r2, #28
 8002a06:	2100      	movs	r1, #0
 8002a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f3      	beq.n	8002a00 <OS_TaskInitTCB+0x78>
    for (id = 0u; id < OS_CFG_TLS_TBL_SIZE; id++) {
        p_tcb->TLS_Tbl[id]      =                     0u;
    }
#endif

    p_tcb->SemCtr               =                     0u;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	641a      	str	r2, [r3, #64]	@ 0x40
#if (OS_CFG_TASK_PROFILE_EN > 0u)
    p_tcb->SemPendTime          =                     0u;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    p_tcb->SemPendTimeMax       =                     0u;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkSize              =                     0u;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	639a      	str	r2, [r3, #56]	@ 0x38
#endif


#if (OS_CFG_TASK_SUSPEND_EN > 0u)
    p_tcb->SuspendCtr           =                     0u;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
#endif

#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u)
    p_tcb->StkFree              =                     0u;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    p_tcb->StkUsed              =                     0u;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
#endif

    p_tcb->Opt                  =                     0u;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	879a      	strh	r2, [r3, #60]	@ 0x3c

#if (OS_CFG_TICK_EN > 0u)
    p_tcb->TickRemain           =                     0u;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	645a      	str	r2, [r3, #68]	@ 0x44
    p_tcb->TickCtrPrev          =                     0u;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
    p_tcb->TimeQuanta           =                     0u;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	64da      	str	r2, [r3, #76]	@ 0x4c
    p_tcb->TimeQuantaCtr        =                     0u;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	651a      	str	r2, [r3, #80]	@ 0x50
#endif

#if (OS_CFG_TASK_PROFILE_EN > 0u)
    p_tcb->CPUUsage             =                     0u;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    p_tcb->CPUUsageMax          =                     0u;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    p_tcb->CtxSwCtr             =                     0u;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    p_tcb->CyclesDelta          =                     0u;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#if (OS_CFG_TS_EN > 0u)
    p_tcb->CyclesStart          =  OS_TS_GET();                 /* Read the current timestamp and save                  */
#else
    p_tcb->CyclesStart          =                     0u;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#endif
    p_tcb->CyclesTotal          =                     0u;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#endif
#if (OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u)
    p_tcb->SchedLockTimeMax     =                     0u;
#endif

    p_tcb->PendNextPtr          = (OS_TCB           *)0;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	621a      	str	r2, [r3, #32]
    p_tcb->PendPrevPtr          = (OS_TCB           *)0;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    p_tcb->PendObjPtr           = (OS_PEND_OBJ      *)0;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	629a      	str	r2, [r3, #40]	@ 0x28
    p_tcb->PendOn               =  OS_TASK_PEND_ON_NOTHING;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    p_tcb->PendStatus           =  OS_STATUS_PEND_OK;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    p_tcb->TaskState            =  OS_TASK_STATE_RDY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

    p_tcb->Prio                 =  OS_PRIO_INIT;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2240      	movs	r2, #64	@ 0x40
 8002ac8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
#if (OS_CFG_MUTEX_EN > 0u)
    p_tcb->BasePrio             =  OS_PRIO_INIT;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2240      	movs	r2, #64	@ 0x40
 8002ad0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    p_tcb->MutexGrpHeadPtr      = (OS_MUTEX         *)0;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (OS_CFG_DBG_EN > 0u)
    p_tcb->DbgPrevPtr           = (OS_TCB           *)0;
    p_tcb->DbgNextPtr           = (OS_TCB           *)0;
    p_tcb->DbgNamePtr           = (CPU_CHAR *)((void *)" ");
#endif
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
    OS_ERR  err;



    OSTaskReturnHook(OSTCBCurPtr);                              /* Call hook to let user decide on what to do           */
 8002aea:	4b07      	ldr	r3, [pc, #28]	@ (8002b08 <OS_TaskReturn+0x24>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fd fe76 	bl	80007e0 <OSTaskReturnHook>
#if (OS_CFG_TASK_DEL_EN > 0u)
    OSTaskDel((OS_TCB *)0,                                      /* Delete task if it accidentally returns!              */
 8002af4:	1dbb      	adds	r3, r7, #6
 8002af6:	4619      	mov	r1, r3
 8002af8:	2000      	movs	r0, #0
 8002afa:	f7ff fe25 	bl	8002748 <OSTaskDel>
        OSTimeDly(OSCfg_TickRate_Hz,
                  OS_OPT_TIME_DLY,
                  &err);
    }
#endif
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20001708 	.word	0x20001708

08002b0c <OS_TaskChangePrio>:
************************************************************************************************************************
*/

void  OS_TaskChangePrio(OS_TCB  *p_tcb,
                        OS_PRIO  prio_new)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	70fb      	strb	r3, [r7, #3]
    OS_PRIO  prio_cur;
#endif


    do {
        p_tcb_owner = (OS_TCB *)0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_MUTEX_EN > 0u)
        prio_cur    =  p_tcb->Prio;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002b22:	72fb      	strb	r3, [r7, #11]
#endif
        switch (p_tcb->TaskState) {
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8002b2a:	2b07      	cmp	r3, #7
 8002b2c:	f200 8085 	bhi.w	8002c3a <OS_TaskChangePrio+0x12e>
 8002b30:	a201      	add	r2, pc, #4	@ (adr r2, 8002b38 <OS_TaskChangePrio+0x2c>)
 8002b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b36:	bf00      	nop
 8002b38:	08002b59 	.word	0x08002b59
 8002b3c:	08002b8d 	.word	0x08002b8d
 8002b40:	08002b97 	.word	0x08002b97
 8002b44:	08002b97 	.word	0x08002b97
 8002b48:	08002b8d 	.word	0x08002b8d
 8002b4c:	08002b8d 	.word	0x08002b8d
 8002b50:	08002b97 	.word	0x08002b97
 8002b54:	08002b97 	.word	0x08002b97
            case OS_TASK_STATE_RDY:
                 OS_RdyListRemove(p_tcb);                       /* Remove from current priority                         */
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7fe fbf9 	bl	8001350 <OS_RdyListRemove>
                 p_tcb->Prio = prio_new;                        /* Set new task priority                                */
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
                 OS_PrioInsert(p_tcb->Prio);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff f91b 	bl	8001da8 <OS_PrioInsert>
                 if (p_tcb == OSTCBCurPtr) {
 8002b72:	4b34      	ldr	r3, [pc, #208]	@ (8002c44 <OS_TaskChangePrio+0x138>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d103      	bne.n	8002b84 <OS_TaskChangePrio+0x78>
                     OS_RdyListInsertHead(p_tcb);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7fe fb33 	bl	80011e8 <OS_RdyListInsertHead>
                 } else {
                     OS_RdyListInsertTail(p_tcb);
                 }
                 break;
 8002b82:	e053      	b.n	8002c2c <OS_TaskChangePrio+0x120>
                     OS_RdyListInsertTail(p_tcb);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7fe fb63 	bl	8001250 <OS_RdyListInsertTail>
                 break;
 8002b8a:	e04f      	b.n	8002c2c <OS_TaskChangePrio+0x120>

            case OS_TASK_STATE_DLY:                             /* Nothing to do except change the priority in the OS_TCB*/
            case OS_TASK_STATE_SUSPENDED:
            case OS_TASK_STATE_DLY_SUSPENDED:
                 p_tcb->Prio = prio_new;                        /* Set new task priority                                */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
                 break;
 8002b94:	e04a      	b.n	8002c2c <OS_TaskChangePrio+0x120>

            case OS_TASK_STATE_PEND:
            case OS_TASK_STATE_PEND_TIMEOUT:
            case OS_TASK_STATE_PEND_SUSPENDED:
            case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                 p_tcb->Prio = prio_new;                        /* Set new task priority                                */
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
                 switch (p_tcb->PendOn) {                       /* What to do depends on what we are pending on         */
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002ba4:	2b06      	cmp	r3, #6
 8002ba6:	dc3d      	bgt.n	8002c24 <OS_TaskChangePrio+0x118>
 8002ba8:	2b05      	cmp	r3, #5
 8002baa:	da04      	bge.n	8002bb6 <OS_TaskChangePrio+0xaa>
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d002      	beq.n	8002bb6 <OS_TaskChangePrio+0xaa>
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d004      	beq.n	8002bbe <OS_TaskChangePrio+0xb2>

                     case OS_TASK_PEND_ON_TASK_Q:
                     case OS_TASK_PEND_ON_TASK_SEM:
                     default:
                                                                /* Default case.                                        */
                          break;
 8002bb4:	e036      	b.n	8002c24 <OS_TaskChangePrio+0x118>
                          OS_PendListChangePrio(p_tcb);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fe f98d 	bl	8000ed6 <OS_PendListChangePrio>
                          break;
 8002bbc:	e035      	b.n	8002c2a <OS_TaskChangePrio+0x11e>
                          OS_PendListChangePrio(p_tcb);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fe f989 	bl	8000ed6 <OS_PendListChangePrio>
                          p_tcb_owner = ((OS_MUTEX *)((void *)p_tcb->PendObjPtr))->OwnerTCBPtr;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	60fb      	str	r3, [r7, #12]
                          if (prio_cur > prio_new) {            /* Are we increasing the priority?                      */
 8002bcc:	7afa      	ldrb	r2, [r7, #11]
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d908      	bls.n	8002be6 <OS_TaskChangePrio+0xda>
                              if (p_tcb_owner->Prio <= prio_new) { /* Yes, do we need to give this prio to the owner?   */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d323      	bcc.n	8002c28 <OS_TaskChangePrio+0x11c>
                                  p_tcb_owner = (OS_TCB *)0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
                          break;
 8002be4:	e020      	b.n	8002c28 <OS_TaskChangePrio+0x11c>
                              if (p_tcb_owner->Prio == prio_cur) { /* No, is it required to check for a lower prio?     */
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002bec:	7afa      	ldrb	r2, [r7, #11]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d115      	bne.n	8002c1e <OS_TaskChangePrio+0x112>
                                  prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f7ff f839 	bl	8001c6a <OS_MutexGrpPrioFindHighest>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	70fb      	strb	r3, [r7, #3]
                                  prio_new = (prio_new > p_tcb_owner->BasePrio) ? p_tcb_owner->BasePrio : prio_new;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c02:	78fa      	ldrb	r2, [r7, #3]
 8002c04:	4293      	cmp	r3, r2
 8002c06:	bf28      	it	cs
 8002c08:	4613      	movcs	r3, r2
 8002c0a:	70fb      	strb	r3, [r7, #3]
                                  if (prio_new == p_tcb_owner->Prio) {
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d107      	bne.n	8002c28 <OS_TaskChangePrio+0x11c>
                                      p_tcb_owner = (OS_TCB *)0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
                          break;
 8002c1c:	e004      	b.n	8002c28 <OS_TaskChangePrio+0x11c>
                                  p_tcb_owner = (OS_TCB *)0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
                          break;
 8002c22:	e001      	b.n	8002c28 <OS_TaskChangePrio+0x11c>
                          break;
 8002c24:	bf00      	nop
 8002c26:	e000      	b.n	8002c2a <OS_TaskChangePrio+0x11e>
                          break;
 8002c28:	bf00      	nop
                 }
                 break;
 8002c2a:	bf00      	nop

            default:
                 return;
        }
        p_tcb = p_tcb_owner;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	607b      	str	r3, [r7, #4]
    } while (p_tcb != (OS_TCB *)0);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f47f af70 	bne.w	8002b18 <OS_TaskChangePrio+0xc>
 8002c38:	e000      	b.n	8002c3c <OS_TaskChangePrio+0x130>
                 return;
 8002c3a:	bf00      	nop
}
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20001708 	.word	0x20001708

08002c48 <OS_TickInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickInit (OS_ERR  *p_err)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
    *p_err                = OS_ERR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	801a      	strh	r2, [r3, #0]

    OSTickCtr             = 0u;                               /* Clear the tick counter                               */
 8002c56:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <OS_TickInit+0x28>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]

#if (OS_CFG_DYN_TICK_EN > 0u)
    OSTickCtrStep         = 0u;
#endif

    OSTickList.TCB_Ptr    = (OS_TCB *)0;
 8002c5c:	4b05      	ldr	r3, [pc, #20]	@ (8002c74 <OS_TickInit+0x2c>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]

#if (OS_CFG_DBG_EN > 0u)
    OSTickList.NbrEntries = 0u;
    OSTickList.NbrUpdated = 0u;
#endif
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20001624 	.word	0x20001624
 8002c74:	20001628 	.word	0x20001628

08002c78 <OS_TickUpdate>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickUpdate (OS_TICK  ticks)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
#if (OS_CFG_TS_EN > 0u)
    CPU_TS  ts_start;
#endif
    CPU_SR_ALLOC();
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 8002c84:	2040      	movs	r0, #64	@ 0x40
 8002c86:	f7fd faa3 	bl	80001d0 <CPU_SR_Save>
 8002c8a:	60f8      	str	r0, [r7, #12]

    OSTickCtr += ticks;                                         /* Keep track of the number of ticks                    */
 8002c8c:	4b07      	ldr	r3, [pc, #28]	@ (8002cac <OS_TickUpdate+0x34>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4413      	add	r3, r2
 8002c94:	4a05      	ldr	r2, [pc, #20]	@ (8002cac <OS_TickUpdate+0x34>)
 8002c96:	6013      	str	r3, [r2, #0]
    OSTickTime = OS_TS_GET() - ts_start;
    if (OSTickTimeMax < OSTickTime) {
        OSTickTimeMax = OSTickTime;
    }
#else
    OS_TickListUpdate(ticks);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f961 	bl	8002f60 <OS_TickListUpdate>
        OSTickCtrStep = 0u;
    }

    OS_DynTickSet(OSTickCtrStep);
#endif
    CPU_CRITICAL_EXIT();
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f7fd faa4 	bl	80001ec <CPU_SR_Restore>
}
 8002ca4:	bf00      	nop
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20001624 	.word	0x20001624

08002cb0 <OS_TickListInsert>:

CPU_BOOLEAN  OS_TickListInsert (OS_TCB   *p_tcb,
                                OS_TICK   elapsed,
                                OS_TICK   tick_base,
                                OS_TICK   time)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b08b      	sub	sp, #44	@ 0x2c
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
    OS_TICK_LIST  *p_list;
    OS_TICK        delta;
    OS_TICK        remain;


    delta = (time + tick_base) - (OSTickCtr + elapsed);         /* How many ticks until our delay expires?              */
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	441a      	add	r2, r3
 8002cc4:	4b49      	ldr	r3, [pc, #292]	@ (8002dec <OS_TickListInsert+0x13c>)
 8002cc6:	6819      	ldr	r1, [r3, #0]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	440b      	add	r3, r1
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	61fb      	str	r3, [r7, #28]

    if (delta == 0u) {
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d104      	bne.n	8002ce0 <OS_TickListInsert+0x30>
        p_tcb->TickRemain = 0u;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	645a      	str	r2, [r3, #68]	@ 0x44
        return (OS_FALSE);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e07e      	b.n	8002dde <OS_TickListInsert+0x12e>
    }

    OS_TRACE_TASK_DLY(delta);

    p_list = &OSTickList;
 8002ce0:	4b43      	ldr	r3, [pc, #268]	@ (8002df0 <OS_TickListInsert+0x140>)
 8002ce2:	61bb      	str	r3, [r7, #24]
    if (p_list->TCB_Ptr == (OS_TCB *)0) {                       /* Is the list empty?                                   */
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10d      	bne.n	8002d08 <OS_TickListInsert+0x58>
        p_tcb->TickRemain   = delta;                            /* Yes, Store time in TCB                               */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	645a      	str	r2, [r3, #68]	@ 0x44
        p_tcb->TickNextPtr  = (OS_TCB *)0;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	615a      	str	r2, [r3, #20]
        p_tcb->TickPrevPtr  = (OS_TCB *)0;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	619a      	str	r2, [r3, #24]
        p_list->TCB_Ptr     = p_tcb;                            /* Point to TCB of task to place in the list            */
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	601a      	str	r2, [r3, #0]
        OS_DynTickSet(OSTickCtrStep);
#endif
#if (OS_CFG_DBG_EN > 0u)
        p_list->NbrEntries  = 1u;                               /* List contains 1 entry                                */
#endif
        return (OS_TRUE);
 8002d04:	2301      	movs	r3, #1
 8002d06:	e06a      	b.n	8002dde <OS_TickListInsert+0x12e>

#if (OS_CFG_DBG_EN > 0u)
    p_list->NbrEntries++;                                       /* Update debug counter to reflect the new entry.       */
#endif

    p_tcb2 = p_list->TCB_Ptr;
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	623b      	str	r3, [r7, #32]
    remain = p_tcb2->TickRemain - elapsed;                      /* How many ticks until the head's delay expires?       */
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	617b      	str	r3, [r7, #20]

    if ((delta               <   remain) &&                     /* If our entry is the new head of the tick list    ... */
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d219      	bcs.n	8002d54 <OS_TickListInsert+0xa4>
        (p_tcb2->TickPrevPtr == (OS_TCB *)0)) {
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	699b      	ldr	r3, [r3, #24]
    if ((delta               <   remain) &&                     /* If our entry is the new head of the tick list    ... */
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d115      	bne.n	8002d54 <OS_TickListInsert+0xa4>
        p_tcb->TickRemain    =  delta;                          /* ... the delta is equivalent to the full delay    ... */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	645a      	str	r2, [r3, #68]	@ 0x44
        p_tcb2->TickRemain   =  remain - delta;                 /* ... the previous head's delta is now relative to it. */
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	1ad2      	subs	r2, r2, r3
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	645a      	str	r2, [r3, #68]	@ 0x44

        p_tcb->TickPrevPtr   = (OS_TCB *)0;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	619a      	str	r2, [r3, #24]
        p_tcb->TickNextPtr   =  p_tcb2;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a3a      	ldr	r2, [r7, #32]
 8002d42:	615a      	str	r2, [r3, #20]
        p_tcb2->TickPrevPtr  =  p_tcb;
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	619a      	str	r2, [r3, #24]
        p_list->TCB_Ptr      =  p_tcb;
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	601a      	str	r2, [r3, #0]
                                                                /* In DTM, a new list head must update the tick     ... */
        OSTickCtrStep        =  delta;                          /* ... timer to interrupt at the new delay value.       */
        OS_DynTickSet(OSTickCtrStep);
#endif

        return (OS_TRUE);
 8002d50:	2301      	movs	r3, #1
 8002d52:	e044      	b.n	8002dde <OS_TickListInsert+0x12e>
    }

                                                                /* Our entry comes after the current list head.         */
    delta  -= remain;                                           /* Make delta relative to the head.                     */
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	61fb      	str	r3, [r7, #28]
    p_tcb1  = p_tcb2;
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	627b      	str	r3, [r7, #36]	@ 0x24
    p_tcb2  = p_tcb1->TickNextPtr;
 8002d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	623b      	str	r3, [r7, #32]

    while ((p_tcb2 !=        (OS_TCB *)0) &&                    /* Find the appropriate position in the delta list.     */
 8002d66:	e009      	b.n	8002d7c <OS_TickListInsert+0xcc>
           (delta  >= p_tcb2->TickRemain)) {
        delta  -= p_tcb2->TickRemain;
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	61fb      	str	r3, [r7, #28]
        p_tcb1  = p_tcb2;
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
        p_tcb2  = p_tcb2->TickNextPtr;
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	623b      	str	r3, [r7, #32]
    while ((p_tcb2 !=        (OS_TCB *)0) &&                    /* Find the appropriate position in the delta list.     */
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d004      	beq.n	8002d8c <OS_TickListInsert+0xdc>
           (delta  >= p_tcb2->TickRemain)) {
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    while ((p_tcb2 !=        (OS_TCB *)0) &&                    /* Find the appropriate position in the delta list.     */
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d2ed      	bcs.n	8002d68 <OS_TickListInsert+0xb8>
    }

    if (p_tcb2 != (OS_TCB *)0) {                                /* Our entry is not the last element in the list.       */
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d018      	beq.n	8002dc4 <OS_TickListInsert+0x114>
        p_tcb1               = p_tcb2->TickPrevPtr;
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	627b      	str	r3, [r7, #36]	@ 0x24
        p_tcb->TickRemain    = delta;                           /* Store remaining time                                 */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	645a      	str	r2, [r3, #68]	@ 0x44
        p_tcb->TickPrevPtr   = p_tcb1;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da2:	619a      	str	r2, [r3, #24]
        p_tcb->TickNextPtr   = p_tcb2;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a3a      	ldr	r2, [r7, #32]
 8002da8:	615a      	str	r2, [r3, #20]
        p_tcb2->TickRemain  -= delta;                           /* Reduce time of next entry in the list                */
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	1ad2      	subs	r2, r2, r3
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	645a      	str	r2, [r3, #68]	@ 0x44
        p_tcb2->TickPrevPtr  = p_tcb;
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	619a      	str	r2, [r3, #24]
        p_tcb1->TickNextPtr  = p_tcb;
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	615a      	str	r2, [r3, #20]
 8002dc2:	e00b      	b.n	8002ddc <OS_TickListInsert+0x12c>

    } else {                                                    /* Our entry belongs at the end of the list.            */
        p_tcb->TickRemain    = delta;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	69fa      	ldr	r2, [r7, #28]
 8002dc8:	645a      	str	r2, [r3, #68]	@ 0x44
        p_tcb->TickPrevPtr   = p_tcb1;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dce:	619a      	str	r2, [r3, #24]
        p_tcb->TickNextPtr   = (OS_TCB *)0;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	615a      	str	r2, [r3, #20]
        p_tcb1->TickNextPtr  = p_tcb;
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	615a      	str	r2, [r3, #20]
    }

    return (OS_TRUE);
 8002ddc:	2301      	movs	r3, #1
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	372c      	adds	r7, #44	@ 0x2c
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20001624 	.word	0x20001624
 8002df0:	20001628 	.word	0x20001628

08002df4 <OS_TickListInsertDly>:

void  OS_TickListInsertDly (OS_TCB   *p_tcb,
                            OS_TICK   time,
                            OS_OPT    opt,
                            OS_ERR   *p_err)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	80fb      	strh	r3, [r7, #6]


#if (OS_CFG_DYN_TICK_EN > 0u)
    elapsed  = OS_DynTickGet();
#else
    elapsed  = 0u;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61bb      	str	r3, [r7, #24]
#endif

    if (opt == OS_OPT_TIME_MATCH) {                             /* MATCH to absolute tick ctr value mode                */
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d102      	bne.n	8002e14 <OS_TickListInsertDly+0x20>
        tick_base = 0u;                                         /* tick_base + time == time                             */
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	e03b      	b.n	8002e8c <OS_TickListInsertDly+0x98>

    } else if (opt == OS_OPT_TIME_PERIODIC) {                   /* PERIODIC mode.                                       */
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d135      	bne.n	8002e86 <OS_TickListInsertDly+0x92>
        if (time == 0u) {
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d104      	bne.n	8002e2a <OS_TickListInsertDly+0x36>
           *p_err = OS_ERR_TIME_ZERO_DLY;                       /* Infinite frequency is invalid.                       */
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	f247 227e 	movw	r2, #29310	@ 0x727e
 8002e26:	801a      	strh	r2, [r3, #0]
            return;
 8002e28:	e047      	b.n	8002eba <OS_TickListInsertDly+0xc6>
        }

        tick_base = p_tcb->TickCtrPrev;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e2e:	61fb      	str	r3, [r7, #28]

#if (OS_CFG_DYN_TICK_EN > 0u)                                   /* How far is our tick-base from the system time?       */
        base_offset = OSTickCtr + elapsed - tick_base;
#else
        base_offset = OSTickCtr - tick_base;
 8002e30:	4b23      	ldr	r3, [pc, #140]	@ (8002ec0 <OS_TickListInsertDly+0xcc>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	617b      	str	r3, [r7, #20]
#endif

        if (base_offset >= time) {                              /* If our task missed the last period, move         ... */
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d31a      	bcc.n	8002e78 <OS_TickListInsertDly+0x84>
            tick_base += time * (base_offset / time);           /* ... tick_base up to the next one.                    */
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	fb02 f303 	mul.w	r3, r2, r3
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	4413      	add	r3, r2
 8002e54:	61fb      	str	r3, [r7, #28]
            if ((base_offset % time) != 0u) {
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	fb01 f202 	mul.w	r2, r1, r2
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <OS_TickListInsertDly+0x7e>
                tick_base += time;                              /* Account for rounding errors with integer division    */
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4413      	add	r3, r2
 8002e70:	61fb      	str	r3, [r7, #28]
            }

            p_tcb->TickCtrPrev = tick_base;                     /* Adjust the periodic tick base                        */
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        p_tcb->TickCtrPrev += time;                             /* Update for the next time we perform a periodic dly.  */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	441a      	add	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	649a      	str	r2, [r3, #72]	@ 0x48
 8002e84:	e002      	b.n	8002e8c <OS_TickListInsertDly+0x98>

    } else {                                                    /* RELATIVE time delay mode                             */
#if (OS_CFG_DYN_TICK_EN > 0u)                                   /* Our base is always the current system time.          */
        tick_base = OSTickCtr + elapsed;
#else
        tick_base = OSTickCtr;
 8002e86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec0 <OS_TickListInsertDly+0xcc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	61fb      	str	r3, [r7, #28]
#endif
    }

    valid_dly = OS_TickListInsert(p_tcb, elapsed, tick_base, time);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	69b9      	ldr	r1, [r7, #24]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff ff0c 	bl	8002cb0 <OS_TickListInsert>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	74fb      	strb	r3, [r7, #19]

    if (valid_dly == OS_TRUE) {
 8002e9c:	7cfb      	ldrb	r3, [r7, #19]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <OS_TickListInsertDly+0xbe>
        p_tcb->TaskState = OS_TASK_STATE_DLY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
       *p_err            = OS_ERR_NONE;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2200      	movs	r2, #0
 8002eae:	801a      	strh	r2, [r3, #0]
 8002eb0:	e003      	b.n	8002eba <OS_TickListInsertDly+0xc6>
    } else {
       *p_err = OS_ERR_TIME_ZERO_DLY;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f247 227e 	movw	r2, #29310	@ 0x727e
 8002eb8:	801a      	strh	r2, [r3, #0]
    }
}
 8002eba:	3720      	adds	r7, #32
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20001624 	.word	0x20001624

08002ec4 <OS_TickListRemove>:
*              2) This function is assumed to be called with interrupts disabled.
************************************************************************************************************************
*/

void  OS_TickListRemove (OS_TCB  *p_tcb)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

#if (OS_CFG_DYN_TICK_EN > 0u)
    elapsed = OS_DynTickGet();
#endif

    p_tcb1 = p_tcb->TickPrevPtr;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	617b      	str	r3, [r7, #20]
    p_tcb2 = p_tcb->TickNextPtr;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	613b      	str	r3, [r7, #16]
    p_list = &OSTickList;
 8002ed8:	4b20      	ldr	r3, [pc, #128]	@ (8002f5c <OS_TickListRemove+0x98>)
 8002eda:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d11d      	bne.n	8002f1e <OS_TickListRemove+0x5a>
        if (p_tcb2 == (OS_TCB *)0) {                            /* Remove the ONLY entry in the list?                   */
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d106      	bne.n	8002ef6 <OS_TickListRemove+0x32>
            p_list->TCB_Ptr      = (OS_TCB *)0;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
#if (OS_CFG_DBG_EN > 0u)
            p_list->NbrEntries   =           0u;
#endif
            p_tcb->TickRemain    =           0u;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	645a      	str	r2, [r3, #68]	@ 0x44
        p_list->NbrEntries--;
#endif
        p_tcb->TickNextPtr       = (OS_TCB *)0;
        p_tcb->TickRemain        =           0u;
    }
}
 8002ef4:	e02c      	b.n	8002f50 <OS_TickListRemove+0x8c>
            p_tcb2->TickPrevPtr  = (OS_TCB *)0;
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain  += p_tcb->TickRemain;           /* Add back the ticks to the delta                      */
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f04:	441a      	add	r2, r3
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	645a      	str	r2, [r3, #68]	@ 0x44
            p_list->TCB_Ptr      = p_tcb2;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	601a      	str	r2, [r3, #0]
            p_tcb->TickNextPtr          = (OS_TCB *)0;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	615a      	str	r2, [r3, #20]
            p_tcb->TickRemain           =           0u;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8002f1c:	e018      	b.n	8002f50 <OS_TickListRemove+0x8c>
        p_tcb1->TickNextPtr = p_tcb2;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	615a      	str	r2, [r3, #20]
        if (p_tcb2 != (OS_TCB *)0) {
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <OS_TickListRemove+0x7a>
            p_tcb2->TickPrevPtr  = p_tcb1;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain  += p_tcb->TickRemain;            /* Add back the ticks to the delta list                 */
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f38:	441a      	add	r2, r3
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	645a      	str	r2, [r3, #68]	@ 0x44
        p_tcb->TickPrevPtr       = (OS_TCB *)0;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	619a      	str	r2, [r3, #24]
        p_tcb->TickNextPtr       = (OS_TCB *)0;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	615a      	str	r2, [r3, #20]
        p_tcb->TickRemain        =           0u;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8002f50:	bf00      	nop
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	20001628 	.word	0x20001628

08002f60 <OS_TickListUpdate>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TickListUpdate (OS_TICK  ticks)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]


#if (OS_CFG_DBG_EN > 0u)
    nbr_updated = 0u;
#endif
    p_list      = &OSTickList;
 8002f68:	4b5e      	ldr	r3, [pc, #376]	@ (80030e4 <OS_TickListUpdate+0x184>)
 8002f6a:	60fb      	str	r3, [r7, #12]
    p_tcb       = p_list->TCB_Ptr;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	617b      	str	r3, [r7, #20]
    if (p_tcb != (OS_TCB *)0) {
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 80b0 	beq.w	80030da <OS_TickListUpdate+0x17a>
        if (p_tcb->TickRemain <= ticks) {
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d308      	bcc.n	8002f96 <OS_TickListUpdate+0x36>
            ticks              = ticks - p_tcb->TickRemain;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	607b      	str	r3, [r7, #4]
            p_tcb->TickRemain  = 0u;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2200      	movs	r2, #0
 8002f92:	645a      	str	r2, [r3, #68]	@ 0x44
 8002f94:	e09a      	b.n	80030cc <OS_TickListUpdate+0x16c>
        } else {
            p_tcb->TickRemain -= ticks;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	1ad2      	subs	r2, r2, r3
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        while (p_tcb->TickRemain == 0u) {
 8002fa2:	e093      	b.n	80030cc <OS_TickListUpdate+0x16c>
#if (OS_CFG_DBG_EN > 0u)
            nbr_updated++;
#endif

            switch (p_tcb->TaskState) {
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d002      	beq.n	8002fb4 <OS_TickListUpdate+0x54>
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d008      	beq.n	8002fc4 <OS_TickListUpdate+0x64>
 8002fb2:	e00c      	b.n	8002fce <OS_TickListUpdate+0x6e>
                case OS_TASK_STATE_DLY:
                     p_tcb->TaskState = OS_TASK_STATE_RDY;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
                     OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                    */
 8002fbc:	6978      	ldr	r0, [r7, #20]
 8002fbe:	f7fe f8f5 	bl	80011ac <OS_RdyListInsert>
                     break;
 8002fc2:	e062      	b.n	800308a <OS_TickListUpdate+0x12a>

                case OS_TASK_STATE_DLY_SUSPENDED:
                     p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
                     break;
 8002fcc:	e05d      	b.n	800308a <OS_TickListUpdate+0x12a>

                default:
#if (OS_CFG_MUTEX_EN > 0u)
                     p_tcb_owner = (OS_TCB *)0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
                     if (p_tcb->PendOn == OS_TASK_PEND_ON_MUTEX) {
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d103      	bne.n	8002fe4 <OS_TickListUpdate+0x84>
                         p_tcb_owner = (OS_TCB *)((OS_MUTEX *)((void *)p_tcb->PendObjPtr))->OwnerTCBPtr;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	613b      	str	r3, [r7, #16]
                     }
#endif

#if (OS_MSG_EN > 0u)
                     p_tcb->MsgPtr  = (void *)0;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	655a      	str	r2, [r3, #84]	@ 0x54
                     p_tcb->MsgSize = 0u;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
#endif
#if (OS_CFG_TS_EN > 0u)
                     p_tcb->TS      = OS_TS_GET();
#endif
                     OS_PendListRemove(p_tcb);                           /* Remove task from pend list                           */
 8002ff2:	6978      	ldr	r0, [r7, #20]
 8002ff4:	f7fd ffff 	bl	8000ff6 <OS_PendListRemove>

                     switch (p_tcb->TaskState) {
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d002      	beq.n	8003008 <OS_TickListUpdate+0xa8>
 8003002:	2b07      	cmp	r3, #7
 8003004:	d008      	beq.n	8003018 <OS_TickListUpdate+0xb8>
                         case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                              p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
                              break;

                         default:
                              break;
 8003006:	e00c      	b.n	8003022 <OS_TickListUpdate+0xc2>
                              OS_RdyListInsert(p_tcb);                   /* Insert the task in the ready list                    */
 8003008:	6978      	ldr	r0, [r7, #20]
 800300a:	f7fe f8cf 	bl	80011ac <OS_RdyListInsert>
                              p_tcb->TaskState  = OS_TASK_STATE_RDY;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
                              break;
 8003016:	e004      	b.n	8003022 <OS_TickListUpdate+0xc2>
                              p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2204      	movs	r2, #4
 800301c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
                              break;
 8003020:	bf00      	nop
                     }
                     p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;         /* Indicate pend timed out                              */
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2203      	movs	r2, #3
 8003026:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                     p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                           */
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

#if (OS_CFG_MUTEX_EN > 0u)
                     if (p_tcb_owner != (OS_TCB *)0) {
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d027      	beq.n	8003088 <OS_TickListUpdate+0x128>
                         if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003044:	429a      	cmp	r2, r3
 8003046:	d01f      	beq.n	8003088 <OS_TickListUpdate+0x128>
                             (p_tcb_owner->Prio == p_tcb->Prio)) {       /* Has the owner inherited a priority?                  */
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
                         if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8003054:	429a      	cmp	r2, r3
 8003056:	d117      	bne.n	8003088 <OS_TickListUpdate+0x128>
                             prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8003058:	6938      	ldr	r0, [r7, #16]
 800305a:	f7fe fe06 	bl	8001c6a <OS_MutexGrpPrioFindHighest>
 800305e:	4603      	mov	r3, r0
 8003060:	72fb      	strb	r3, [r7, #11]
                             prio_new = (prio_new > p_tcb_owner->BasePrio) ? p_tcb_owner->BasePrio : prio_new;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003068:	7afa      	ldrb	r2, [r7, #11]
 800306a:	4293      	cmp	r3, r2
 800306c:	bf28      	it	cs
 800306e:	4613      	movcs	r3, r2
 8003070:	72fb      	strb	r3, [r7, #11]
                             if (prio_new != p_tcb_owner->Prio) {
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003078:	7afa      	ldrb	r2, [r7, #11]
 800307a:	429a      	cmp	r2, r3
 800307c:	d004      	beq.n	8003088 <OS_TickListUpdate+0x128>
                                 OS_TaskChangePrio(p_tcb_owner, prio_new);
 800307e:	7afb      	ldrb	r3, [r7, #11]
 8003080:	4619      	mov	r1, r3
 8003082:	6938      	ldr	r0, [r7, #16]
 8003084:	f7ff fd42 	bl	8002b0c <OS_TaskChangePrio>
                                 OS_TRACE_MUTEX_TASK_PRIO_DISINHERIT(p_tcb_owner, p_tcb_owner->Prio);
                             }
                         }
                     }
#endif
                     break;
 8003088:	bf00      	nop
            }

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	601a      	str	r2, [r3, #0]
            p_tcb           = p_list->TCB_Ptr;                           /* Get 'p_tcb' again for loop                           */
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	617b      	str	r3, [r7, #20]
            if (p_tcb == (OS_TCB *)0) {
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01c      	beq.n	80030d8 <OS_TickListUpdate+0x178>
                break;
            } else {
#if (OS_CFG_DBG_EN > 0u)
                p_list->NbrEntries--;
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2200      	movs	r2, #0
 80030a2:	619a      	str	r2, [r3, #24]
                if (p_tcb->TickRemain <= ticks) {
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d308      	bcc.n	80030c0 <OS_TickListUpdate+0x160>
                    ticks              = ticks - p_tcb->TickRemain;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	607b      	str	r3, [r7, #4]
                    p_tcb->TickRemain  = 0u;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2200      	movs	r2, #0
 80030bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80030be:	e005      	b.n	80030cc <OS_TickListUpdate+0x16c>
                } else {
                    p_tcb->TickRemain -= ticks;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	1ad2      	subs	r2, r2, r3
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	645a      	str	r2, [r3, #68]	@ 0x44
        while (p_tcb->TickRemain == 0u) {
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f43f af67 	beq.w	8002fa4 <OS_TickListUpdate+0x44>
        }
    }
#if (OS_CFG_DBG_EN > 0u)
    p_list->NbrUpdated = nbr_updated;
#endif
}
 80030d6:	e000      	b.n	80030da <OS_TickListUpdate+0x17a>
                break;
 80030d8:	bf00      	nop
}
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20001628 	.word	0x20001628

080030e8 <OSTimeDly>:
*/

void  OSTimeDly (OS_TICK   dly,
                 OS_OPT    opt,
                 OS_ERR   *p_err)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	460b      	mov	r3, r1
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	817b      	strh	r3, [r7, #10]
#if (OS_CFG_TICK_EN > 0u)
    CPU_SR_ALLOC();
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
    *p_err = OS_ERR_TICK_DISABLED;
    return;
#else

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
 80030fa:	4b2b      	ldr	r3, [pc, #172]	@ (80031a8 <OSTimeDly+0xc0>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <OSTimeDly+0x24>
       *p_err = OS_ERR_TIME_DLY_ISR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f247 2275 	movw	r2, #29301	@ 0x7275
 8003108:	801a      	strh	r2, [r3, #0]
        return;
 800310a:	e049      	b.n	80031a0 <OSTimeDly+0xb8>
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 800310c:	4b27      	ldr	r3, [pc, #156]	@ (80031ac <OSTimeDly+0xc4>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d004      	beq.n	800311e <OSTimeDly+0x36>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f645 6289 	movw	r2, #24201	@ 0x5e89
 800311a:	801a      	strh	r2, [r3, #0]
        return;
 800311c:	e040      	b.n	80031a0 <OSTimeDly+0xb8>
    }
#endif

    if (OSSchedLockNestingCtr > 0u) {                           /* Can't delay when the scheduler is locked             */
 800311e:	4b24      	ldr	r3, [pc, #144]	@ (80031b0 <OSTimeDly+0xc8>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d004      	beq.n	8003130 <OSTimeDly+0x48>
       *p_err = OS_ERR_SCHED_LOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f646 5263 	movw	r2, #28003	@ 0x6d63
 800312c:	801a      	strh	r2, [r3, #0]
        return;
 800312e:	e037      	b.n	80031a0 <OSTimeDly+0xb8>
    }

    switch (opt) {
 8003130:	897b      	ldrh	r3, [r7, #10]
 8003132:	2b08      	cmp	r3, #8
 8003134:	bf8c      	ite	hi
 8003136:	2201      	movhi	r2, #1
 8003138:	2200      	movls	r2, #0
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	2a00      	cmp	r2, #0
 800313e:	d10c      	bne.n	800315a <OSTimeDly+0x72>
 8003140:	f240 1215 	movw	r2, #277	@ 0x115
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d104      	bne.n	8003164 <OSTimeDly+0x7c>
        case OS_OPT_TIME_PERIODIC:
        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f645 6225 	movw	r2, #24101	@ 0x5e25
 8003160:	801a      	strh	r2, [r3, #0]
             return;
 8003162:	e01d      	b.n	80031a0 <OSTimeDly+0xb8>
             break;
 8003164:	bf00      	nop
    }

#if (OS_CFG_TICK_EN > 0u)
    CPU_CRITICAL_ENTER();
 8003166:	2040      	movs	r0, #64	@ 0x40
 8003168:	f7fd f832 	bl	80001d0 <CPU_SR_Save>
 800316c:	6178      	str	r0, [r7, #20]
    OS_TickListInsertDly(OSTCBCurPtr,
 800316e:	4b11      	ldr	r3, [pc, #68]	@ (80031b4 <OSTimeDly+0xcc>)
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	897a      	ldrh	r2, [r7, #10]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68f9      	ldr	r1, [r7, #12]
 8003178:	f7ff fe3c 	bl	8002df4 <OS_TickListInsertDly>
                         dly,
                         opt,
                         p_err);
    if (*p_err != OS_ERR_NONE) {
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <OSTimeDly+0xa4>
         CPU_CRITICAL_EXIT();
 8003184:	6978      	ldr	r0, [r7, #20]
 8003186:	f7fd f831 	bl	80001ec <CPU_SR_Restore>
         return;
 800318a:	e009      	b.n	80031a0 <OSTimeDly+0xb8>
    }

    OS_RdyListRemove(OSTCBCurPtr);                              /* Remove current task from ready list                  */
 800318c:	4b09      	ldr	r3, [pc, #36]	@ (80031b4 <OSTimeDly+0xcc>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fe f8dd 	bl	8001350 <OS_RdyListRemove>
    CPU_CRITICAL_EXIT();
 8003196:	6978      	ldr	r0, [r7, #20]
 8003198:	f7fd f828 	bl	80001ec <CPU_SR_Restore>
    OSSched();                                                  /* Find next task to run!                               */
 800319c:	f7fd fd74 	bl	8000c88 <OSSched>
#endif
#endif
}
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20001334 	.word	0x20001334
 80031ac:	20001335 	.word	0x20001335
 80031b0:	20001554 	.word	0x20001554
 80031b4:	20001708 	.word	0x20001708

080031b8 <OSTimeTick>:
* Note(s)    : none
************************************************************************************************************************
*/

void  OSTimeTick (void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
    if (OSRunning != OS_STATE_OS_RUNNING) {
 80031bc:	4b09      	ldr	r3, [pc, #36]	@ (80031e4 <OSTimeTick+0x2c>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d10d      	bne.n	80031e0 <OSTimeTick+0x28>
        return;
    }

    OSTimeTickHook();                                           /* Call user definable hook                             */
 80031c4:	f7fd fbe2 	bl	800098c <OSTimeTickHook>

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
    OS_SchedRoundRobin(&OSRdyList[OSPrioCur]);                  /* Update quanta ctr for the task which just ran        */
 80031c8:	4b07      	ldr	r3, [pc, #28]	@ (80031e8 <OSTimeTick+0x30>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4a07      	ldr	r2, [pc, #28]	@ (80031ec <OSTimeTick+0x34>)
 80031d0:	4413      	add	r3, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fe f900 	bl	80013d8 <OS_SchedRoundRobin>
#endif

#if (OS_CFG_TICK_EN > 0u)
    OS_TickUpdate(1u);                                          /* Update from the ISR                                  */
 80031d8:	2001      	movs	r0, #1
 80031da:	f7ff fd4d 	bl	8002c78 <OS_TickUpdate>
 80031de:	e000      	b.n	80031e2 <OSTimeTick+0x2a>
        return;
 80031e0:	bf00      	nop
#endif
}
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20001335 	.word	0x20001335
 80031e8:	20001348 	.word	0x20001348
 80031ec:	20001354 	.word	0x20001354

080031f0 <OS_TmrInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrInit (OS_ERR  *p_err)
{
 80031f0:	b590      	push	{r4, r7, lr}
 80031f2:	b08d      	sub	sp, #52	@ 0x34
 80031f4:	af0a      	add	r7, sp, #40	@ 0x28
 80031f6:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSTmrQty             =           0u;                        /* Keep track of the number of timers created           */
    OSTmrDbgListPtr      = (OS_TMR *)0;
#endif

    OSTmrListPtr         = (OS_TMR *)0;                         /* Create an empty timer list                           */
 80031f8:	4b29      	ldr	r3, [pc, #164]	@ (80032a0 <OS_TmrInit+0xb0>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
#if (OS_CFG_DBG_EN > 0u)
    OSTmrListEntries     =           0u;
#endif
                                                                /* Calculate Timer to Ticks multiplier                  */
    OSTmrToTicksMult = OSCfg_TickRate_Hz / OSCfg_TmrTaskRate_Hz;
 80031fe:	4b29      	ldr	r3, [pc, #164]	@ (80032a4 <OS_TmrInit+0xb4>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4b29      	ldr	r3, [pc, #164]	@ (80032a8 <OS_TmrInit+0xb8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	4a28      	ldr	r2, [pc, #160]	@ (80032ac <OS_TmrInit+0xbc>)
 800320c:	6013      	str	r3, [r2, #0]
#if (OS_CFG_TS_EN > 0u)
    OSTmrTaskTime        =           0u;
    OSTmrTaskTimeMax     =           0u;
#endif

    OSMutexCreate(&OSTmrMutex,                                  /* Use a mutex to protect the timers                    */
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	2100      	movs	r1, #0
 8003212:	4827      	ldr	r0, [pc, #156]	@ (80032b0 <OS_TmrInit+0xc0>)
 8003214:	f7fe fae8 	bl	80017e8 <OSMutexCreate>
                  (CPU_CHAR *)0,
#else
                  (CPU_CHAR *)"OS Tmr Mutex",
#endif
                  p_err);
    if (*p_err != OS_ERR_NONE) {
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d13b      	bne.n	8003298 <OS_TmrInit+0xa8>
        return;
    }

    OS_TmrCondCreate();
 8003220:	f000 fa24 	bl	800366c <OS_TmrCondCreate>
                                                                /* -------------- CREATE THE TIMER TASK --------------- */
    if (OSCfg_TmrTaskStkBasePtr == (CPU_STK *)0) {
 8003224:	4b23      	ldr	r3, [pc, #140]	@ (80032b4 <OS_TmrInit+0xc4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d104      	bne.n	8003236 <OS_TmrInit+0x46>
       *p_err = OS_ERR_TMR_STK_INVALID;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f247 3247 	movw	r2, #29511	@ 0x7347
 8003232:	801a      	strh	r2, [r3, #0]
        return;
 8003234:	e031      	b.n	800329a <OS_TmrInit+0xaa>
    }

    if (OSCfg_TmrTaskStkSize < OSCfg_StkSizeMin) {
 8003236:	4b20      	ldr	r3, [pc, #128]	@ (80032b8 <OS_TmrInit+0xc8>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4b20      	ldr	r3, [pc, #128]	@ (80032bc <OS_TmrInit+0xcc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d204      	bcs.n	800324c <OS_TmrInit+0x5c>
       *p_err = OS_ERR_TMR_STK_SIZE_INVALID;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f247 3248 	movw	r2, #29512	@ 0x7348
 8003248:	801a      	strh	r2, [r3, #0]
        return;
 800324a:	e026      	b.n	800329a <OS_TmrInit+0xaa>
    }

    if (OSCfg_TmrTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 800324c:	4b1c      	ldr	r3, [pc, #112]	@ (80032c0 <OS_TmrInit+0xd0>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b3e      	cmp	r3, #62	@ 0x3e
 8003252:	d904      	bls.n	800325e <OS_TmrInit+0x6e>
       *p_err = OS_ERR_TMR_PRIO_INVALID;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f247 3246 	movw	r2, #29510	@ 0x7346
 800325a:	801a      	strh	r2, [r3, #0]
        return;
 800325c:	e01d      	b.n	800329a <OS_TmrInit+0xaa>
    }

    OSTaskCreate(&OSTmrTaskTCB,
 800325e:	4b18      	ldr	r3, [pc, #96]	@ (80032c0 <OS_TmrInit+0xd0>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	4a14      	ldr	r2, [pc, #80]	@ (80032b4 <OS_TmrInit+0xc4>)
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	4917      	ldr	r1, [pc, #92]	@ (80032c4 <OS_TmrInit+0xd4>)
 8003268:	6809      	ldr	r1, [r1, #0]
 800326a:	4813      	ldr	r0, [pc, #76]	@ (80032b8 <OS_TmrInit+0xc8>)
 800326c:	6800      	ldr	r0, [r0, #0]
 800326e:	687c      	ldr	r4, [r7, #4]
 8003270:	9408      	str	r4, [sp, #32]
 8003272:	240b      	movs	r4, #11
 8003274:	9407      	str	r4, [sp, #28]
 8003276:	2400      	movs	r4, #0
 8003278:	9406      	str	r4, [sp, #24]
 800327a:	2400      	movs	r4, #0
 800327c:	9405      	str	r4, [sp, #20]
 800327e:	2400      	movs	r4, #0
 8003280:	9404      	str	r4, [sp, #16]
 8003282:	9003      	str	r0, [sp, #12]
 8003284:	9102      	str	r1, [sp, #8]
 8003286:	9201      	str	r2, [sp, #4]
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	2300      	movs	r3, #0
 800328c:	4a0e      	ldr	r2, [pc, #56]	@ (80032c8 <OS_TmrInit+0xd8>)
 800328e:	2100      	movs	r1, #0
 8003290:	480e      	ldr	r0, [pc, #56]	@ (80032cc <OS_TmrInit+0xdc>)
 8003292:	f7ff f945 	bl	8002520 <OSTaskCreate>
 8003296:	e000      	b.n	800329a <OS_TmrInit+0xaa>
        return;
 8003298:	bf00      	nop
                  0u,
                  0u,
                 (void     *)0,
                 (OS_OPT_TASK_STK_CHK | (OS_OPT)(OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS)),
                  p_err);
}
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	bd90      	pop	{r4, r7, pc}
 80032a0:	2000162c 	.word	0x2000162c
 80032a4:	080047a4 	.word	0x080047a4
 80032a8:	080047ac 	.word	0x080047ac
 80032ac:	20001704 	.word	0x20001704
 80032b0:	20001640 	.word	0x20001640
 80032b4:	080047b0 	.word	0x080047b0
 80032b8:	080047b8 	.word	0x080047b8
 80032bc:	080047a0 	.word	0x080047a0
 80032c0:	080047a8 	.word	0x080047a8
 80032c4:	080047b4 	.word	0x080047b4
 80032c8:	08003505 	.word	0x08003505
 80032cc:	20001658 	.word	0x20001658

080032d0 <OS_TmrLink>:
************************************************************************************************************************
*/

void OS_TmrLink (OS_TMR   *p_tmr,
                 OS_TICK   time)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
    OS_TMR   *p_tmr2;
    OS_TICK   remain;
    OS_TICK   delta;


    if (OSTmrListPtr == (OS_TMR *)0) {                          /* Is the list empty?                                   */
 80032da:	4b43      	ldr	r3, [pc, #268]	@ (80033e8 <OS_TmrLink+0x118>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10e      	bne.n	8003300 <OS_TmrLink+0x30>
        p_tmr->NextPtr    = (OS_TMR *)0;                        /* Yes, this is the first entry                         */
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	60da      	str	r2, [r3, #12]
        p_tmr->PrevPtr    = (OS_TMR *)0;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	611a      	str	r2, [r3, #16]
        OSTmrListPtr      = p_tmr;
 80032ee:	4a3e      	ldr	r2, [pc, #248]	@ (80033e8 <OS_TmrLink+0x118>)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6013      	str	r3, [r2, #0]
#if (OS_CFG_DBG_EN > 0u)
        OSTmrListEntries  = 1u;
#endif
        OSTmrTaskTickBase = time;
 80032f4:	4a3d      	ldr	r2, [pc, #244]	@ (80033ec <OS_TmrLink+0x11c>)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6013      	str	r3, [r2, #0]
        OS_TmrCondSignal();
 80032fa:	f000 fa6b 	bl	80037d4 <OS_TmrCondSignal>

        return;
 80032fe:	e070      	b.n	80033e2 <OS_TmrLink+0x112>

#if (OS_CFG_DBG_EN > 0u)
    OSTmrListEntries++;
#endif

    delta = (time + p_tmr->Remain) - OSTmrTaskTickBase;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	441a      	add	r2, r3
 8003308:	4b38      	ldr	r3, [pc, #224]	@ (80033ec <OS_TmrLink+0x11c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	60fb      	str	r3, [r7, #12]

    p_tmr2 = OSTmrListPtr;                                      /* No,  Insert somewhere in the list in delta order     */
 8003310:	4b35      	ldr	r3, [pc, #212]	@ (80033e8 <OS_TmrLink+0x118>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	613b      	str	r3, [r7, #16]
    remain = p_tmr2->Remain;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	60bb      	str	r3, [r7, #8]

    if ((delta           <     remain) &&
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	429a      	cmp	r2, r3
 8003322:	d21a      	bcs.n	800335a <OS_TmrLink+0x8a>
        (p_tmr2->PrevPtr == (OS_TMR *)0)) {                     /* Are we the new head of the list?                     */
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	691b      	ldr	r3, [r3, #16]
    if ((delta           <     remain) &&
 8003328:	2b00      	cmp	r3, #0
 800332a:	d116      	bne.n	800335a <OS_TmrLink+0x8a>
        p_tmr2->Remain    =  remain - delta;
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1ad2      	subs	r2, r2, r3
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	615a      	str	r2, [r3, #20]
        p_tmr->PrevPtr    = (OS_TMR *)0;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	611a      	str	r2, [r3, #16]
        p_tmr->NextPtr    =  p_tmr2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	60da      	str	r2, [r3, #12]
        p_tmr2->PrevPtr   =  p_tmr;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	611a      	str	r2, [r3, #16]
        OSTmrListPtr      =  p_tmr;
 8003348:	4a27      	ldr	r2, [pc, #156]	@ (80033e8 <OS_TmrLink+0x118>)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6013      	str	r3, [r2, #0]

        OSTmrTaskTickBase = time;
 800334e:	4a27      	ldr	r2, [pc, #156]	@ (80033ec <OS_TmrLink+0x11c>)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6013      	str	r3, [r2, #0]
        OS_TmrCondSignal();
 8003354:	f000 fa3e 	bl	80037d4 <OS_TmrCondSignal>

        return;
 8003358:	e043      	b.n	80033e2 <OS_TmrLink+0x112>
    }

                                                                /* No                                                   */
    delta  -= remain;                                           /* Make delta relative to the current head.             */
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	60fb      	str	r3, [r7, #12]
    p_tmr1  = p_tmr2;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	617b      	str	r3, [r7, #20]
    p_tmr2  = p_tmr1->NextPtr;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	613b      	str	r3, [r7, #16]


    while ((p_tmr2 !=        (OS_TMR *)0) &&                    /* Find the appropriate position in the delta list.     */
 800336c:	e009      	b.n	8003382 <OS_TmrLink+0xb2>
           (delta  >= p_tmr2->Remain)) {
        delta  -= p_tmr2->Remain;                               /* Update our delta as we traverse the list.            */
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	60fb      	str	r3, [r7, #12]
        p_tmr1  = p_tmr2;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	617b      	str	r3, [r7, #20]
        p_tmr2  = p_tmr2->NextPtr;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	613b      	str	r3, [r7, #16]
    while ((p_tmr2 !=        (OS_TMR *)0) &&                    /* Find the appropriate position in the delta list.     */
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d004      	beq.n	8003392 <OS_TmrLink+0xc2>
           (delta  >= p_tmr2->Remain)) {
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	695b      	ldr	r3, [r3, #20]
    while ((p_tmr2 !=        (OS_TMR *)0) &&                    /* Find the appropriate position in the delta list.     */
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	429a      	cmp	r2, r3
 8003390:	d2ed      	bcs.n	800336e <OS_TmrLink+0x9e>
    }


    if (p_tmr2 != (OS_TMR *)0) {                                /* Our entry is not the last element in the list.       */
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d018      	beq.n	80033ca <OS_TmrLink+0xfa>
        p_tmr1           = p_tmr2->PrevPtr;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	617b      	str	r3, [r7, #20]
        p_tmr->Remain    = delta;                               /* Store remaining time                                 */
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	615a      	str	r2, [r3, #20]
        p_tmr->PrevPtr   = p_tmr1;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	611a      	str	r2, [r3, #16]
        p_tmr->NextPtr   = p_tmr2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	60da      	str	r2, [r3, #12]
        p_tmr2->Remain  -= delta;                               /* Reduce time of next entry in the list                */
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	695a      	ldr	r2, [r3, #20]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1ad2      	subs	r2, r2, r3
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	615a      	str	r2, [r3, #20]
        p_tmr2->PrevPtr  = p_tmr;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	611a      	str	r2, [r3, #16]
        p_tmr1->NextPtr  = p_tmr;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	60da      	str	r2, [r3, #12]
 80033c8:	e00b      	b.n	80033e2 <OS_TmrLink+0x112>

    } else {                                                    /* Our entry belongs at the end of the list.            */
        p_tmr->Remain    = delta;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	615a      	str	r2, [r3, #20]
        p_tmr->PrevPtr   = p_tmr1;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	611a      	str	r2, [r3, #16]
        p_tmr->NextPtr   = (OS_TMR *)0;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	60da      	str	r2, [r3, #12]
        p_tmr1->NextPtr  = p_tmr;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	60da      	str	r2, [r3, #12]
    }
}
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	2000162c 	.word	0x2000162c
 80033ec:	20001700 	.word	0x20001700

080033f0 <OS_TmrUnlink>:
************************************************************************************************************************
*/

void  OS_TmrUnlink (OS_TMR   *p_tmr,
                    OS_TICK   time)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
    OS_TMR   *p_tmr1;
    OS_TMR   *p_tmr2;
    OS_TICK   elapsed;


    p_tmr1                          = p_tmr->PrevPtr;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	60fb      	str	r3, [r7, #12]
    p_tmr2                          = p_tmr->NextPtr;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	617b      	str	r3, [r7, #20]
    if (p_tmr1 == (OS_TMR *)0) {
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d15a      	bne.n	80034c2 <OS_TmrUnlink+0xd2>
        if (p_tmr2 == (OS_TMR *)0) {                            /* Remove the ONLY entry in the list?                   */
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10b      	bne.n	800342a <OS_TmrUnlink+0x3a>
            OSTmrListPtr            = (OS_TMR *)0;
 8003412:	4b3a      	ldr	r3, [pc, #232]	@ (80034fc <OS_TmrUnlink+0x10c>)
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
#if (OS_CFG_DBG_EN > 0u)
            OSTmrListEntries        = 0u;
#endif
            p_tmr->Remain           = 0u;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	615a      	str	r2, [r3, #20]

            OSTmrTaskTickBase       = time;
 800341e:	4a38      	ldr	r2, [pc, #224]	@ (8003500 <OS_TmrUnlink+0x110>)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6013      	str	r3, [r2, #0]
            OS_TmrCondSignal();
 8003424:	f000 f9d6 	bl	80037d4 <OS_TmrCondSignal>
        }
        p_tmr->PrevPtr              = (OS_TMR *)0;
        p_tmr->NextPtr              = (OS_TMR *)0;
        p_tmr->Remain               =           0u;
    }
}
 8003428:	e064      	b.n	80034f4 <OS_TmrUnlink+0x104>
            elapsed                 = time - OSTmrTaskTickBase;
 800342a:	4b35      	ldr	r3, [pc, #212]	@ (8003500 <OS_TmrUnlink+0x110>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	613b      	str	r3, [r7, #16]
            p_tmr2->PrevPtr         = (OS_TMR *)0;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2200      	movs	r2, #0
 8003438:	611a      	str	r2, [r3, #16]
            p_tmr2->Remain         += p_tmr->Remain;            /* Add back the ticks to the delta                      */
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	441a      	add	r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	615a      	str	r2, [r3, #20]
            OSTmrListPtr            = p_tmr2;
 8003448:	4a2c      	ldr	r2, [pc, #176]	@ (80034fc <OS_TmrUnlink+0x10c>)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	6013      	str	r3, [r2, #0]
            while ((elapsed >           0u) &&
 800344e:	e01a      	b.n	8003486 <OS_TmrUnlink+0x96>
                if (elapsed > p_tmr2->Remain) {
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	429a      	cmp	r2, r3
 8003458:	d908      	bls.n	800346c <OS_TmrUnlink+0x7c>
                    elapsed        -= p_tmr2->Remain;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	613b      	str	r3, [r7, #16]
                    p_tmr2->Remain  = 0u;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2200      	movs	r2, #0
 8003468:	615a      	str	r2, [r3, #20]
 800346a:	e007      	b.n	800347c <OS_TmrUnlink+0x8c>
                    p_tmr2->Remain -= elapsed;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad2      	subs	r2, r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	615a      	str	r2, [r3, #20]
                    elapsed         = 0u;
 8003478:	2300      	movs	r3, #0
 800347a:	613b      	str	r3, [r7, #16]
                p_tmr1              = p_tmr2;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	60fb      	str	r3, [r7, #12]
                p_tmr2              = p_tmr1->NextPtr;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	617b      	str	r3, [r7, #20]
            while ((elapsed >           0u) &&
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <OS_TmrUnlink+0xa2>
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1de      	bne.n	8003450 <OS_TmrUnlink+0x60>
            if ((OSTmrListPtr->Remain != p_tmr->Remain) ||      /* Reload if new head has a different delay         ... */
 8003492:	4b1a      	ldr	r3, [pc, #104]	@ (80034fc <OS_TmrUnlink+0x10c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	429a      	cmp	r2, r3
 800349e:	d104      	bne.n	80034aa <OS_TmrUnlink+0xba>
                (OSTmrListPtr->Remain ==            0u)) {      /* ... or has already timed out.                        */
 80034a0:	4b16      	ldr	r3, [pc, #88]	@ (80034fc <OS_TmrUnlink+0x10c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
            if ((OSTmrListPtr->Remain != p_tmr->Remain) ||      /* Reload if new head has a different delay         ... */
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d104      	bne.n	80034b4 <OS_TmrUnlink+0xc4>
                OSTmrTaskTickBase   = time;
 80034aa:	4a15      	ldr	r2, [pc, #84]	@ (8003500 <OS_TmrUnlink+0x110>)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6013      	str	r3, [r2, #0]
                OS_TmrCondSignal();
 80034b0:	f000 f990 	bl	80037d4 <OS_TmrCondSignal>
            p_tmr->NextPtr          = (OS_TMR *)0;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	60da      	str	r2, [r3, #12]
            p_tmr->Remain           =           0u;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	615a      	str	r2, [r3, #20]
}
 80034c0:	e018      	b.n	80034f4 <OS_TmrUnlink+0x104>
        p_tmr1->NextPtr             = p_tmr2;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	60da      	str	r2, [r3, #12]
        if (p_tmr2 != (OS_TMR *)0) {
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <OS_TmrUnlink+0xf2>
            p_tmr2->PrevPtr         = p_tmr1;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	611a      	str	r2, [r3, #16]
            p_tmr2->Remain         += p_tmr->Remain;            /* Add back the ticks to the delta list                 */
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	441a      	add	r2, r3
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	615a      	str	r2, [r3, #20]
        p_tmr->PrevPtr              = (OS_TMR *)0;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	611a      	str	r2, [r3, #16]
        p_tmr->NextPtr              = (OS_TMR *)0;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	60da      	str	r2, [r3, #12]
        p_tmr->Remain               =           0u;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	615a      	str	r2, [r3, #20]
}
 80034f4:	bf00      	nop
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	2000162c 	.word	0x2000162c
 8003500:	20001700 	.word	0x20001700

08003504 <OS_TmrTask>:
*              3) Timer callbacks are allowed to make calls to the Timer APIs.
************************************************************************************************************************
*/

void  OS_TmrTask (void  *p_arg)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
    OS_TICK               elapsed;
    OS_TICK               time;
#if (OS_CFG_TS_EN > 0u)
    CPU_TS                ts_start;
#endif
    CPU_SR_ALLOC();
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]


    (void)p_arg;                                                /* Not using 'p_arg', prevent compiler warning          */

    OS_TmrLock();
 8003510:	f000 f89a 	bl	8003648 <OS_TmrLock>

    for (;;) {
        if (OSTmrListPtr == (OS_TMR *)0) {
 8003514:	4b49      	ldr	r3, [pc, #292]	@ (800363c <OS_TmrTask+0x138>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d102      	bne.n	8003522 <OS_TmrTask+0x1e>
            timeout                = 0u;
 800351c:	2300      	movs	r3, #0
 800351e:	61bb      	str	r3, [r7, #24]
 8003520:	e003      	b.n	800352a <OS_TmrTask+0x26>
        } else {
            timeout                = OSTmrListPtr->Remain;
 8003522:	4b46      	ldr	r3, [pc, #280]	@ (800363c <OS_TmrTask+0x138>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	61bb      	str	r3, [r7, #24]
        }

        OS_TmrCondWait(timeout);                                /* Suspend the timer task until it needs to process ... */
 800352a:	69b8      	ldr	r0, [r7, #24]
 800352c:	f000 f8c0 	bl	80036b0 <OS_TmrCondWait>
                                                                /* ... the timer list again. Also release the mutex ... */
                                                                /* ... so that application tasks can add/remove timers. */

        if (OSTmrListPtr == (OS_TMR *)0) {                      /* Suppresses static analyzer warnings.                 */
 8003530:	4b42      	ldr	r3, [pc, #264]	@ (800363c <OS_TmrTask+0x138>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d07f      	beq.n	8003638 <OS_TmrTask+0x134>

#if (OS_CFG_TS_EN > 0u)
        ts_start = OS_TS_GET();
#endif

        CPU_CRITICAL_ENTER();
 8003538:	2040      	movs	r0, #64	@ 0x40
 800353a:	f7fc fe49 	bl	80001d0 <CPU_SR_Save>
 800353e:	6138      	str	r0, [r7, #16]
#if (OS_CFG_DYN_TICK_EN > 0u)
        time                       = OSTickCtr + OS_DynTickGet();
#else
        time                       = OSTickCtr;
 8003540:	4b3f      	ldr	r3, [pc, #252]	@ (8003640 <OS_TmrTask+0x13c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60fb      	str	r3, [r7, #12]
#endif
        CPU_CRITICAL_EXIT();
 8003546:	6938      	ldr	r0, [r7, #16]
 8003548:	f7fc fe50 	bl	80001ec <CPU_SR_Restore>
        elapsed                    = time - OSTmrTaskTickBase;
 800354c:	4b3d      	ldr	r3, [pc, #244]	@ (8003644 <OS_TmrTask+0x140>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	617b      	str	r3, [r7, #20]
        OSTmrTaskTickBase          = time;
 8003556:	4a3b      	ldr	r2, [pc, #236]	@ (8003644 <OS_TmrTask+0x140>)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6013      	str	r3, [r2, #0]

                                                                /* Update the delta values.                             */
        p_tmr = OSTmrListPtr;
 800355c:	4b37      	ldr	r3, [pc, #220]	@ (800363c <OS_TmrTask+0x138>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	61fb      	str	r3, [r7, #28]
        while ((elapsed !=          0u) &&
 8003562:	e018      	b.n	8003596 <OS_TmrTask+0x92>
               (p_tmr   != (OS_TMR *)0)) {

            if (elapsed > p_tmr->Remain) {
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	429a      	cmp	r2, r3
 800356c:	d908      	bls.n	8003580 <OS_TmrTask+0x7c>
                elapsed           -= p_tmr->Remain;
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	617b      	str	r3, [r7, #20]
                p_tmr->Remain      = 0u;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2200      	movs	r2, #0
 800357c:	615a      	str	r2, [r3, #20]
 800357e:	e007      	b.n	8003590 <OS_TmrTask+0x8c>
            } else {
                p_tmr->Remain     -= elapsed;
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	695a      	ldr	r2, [r3, #20]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	1ad2      	subs	r2, r2, r3
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	615a      	str	r2, [r3, #20]
                elapsed            = 0u;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
            }

            p_tmr                  = p_tmr->NextPtr;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	61fb      	str	r3, [r7, #28]
        while ((elapsed !=          0u) &&
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <OS_TmrTask+0x9e>
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e0      	bne.n	8003564 <OS_TmrTask+0x60>
        }

                                                                /* Process timers that have expired.                    */
        p_tmr                      = OSTmrListPtr;
 80035a2:	4b26      	ldr	r3, [pc, #152]	@ (800363c <OS_TmrTask+0x138>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	61fb      	str	r3, [r7, #28]

        while ((p_tmr         != (OS_TMR *)0) &&
 80035a8:	e03d      	b.n	8003626 <OS_TmrTask+0x122>
               (p_tmr->Remain ==          0u)) {
            p_tmr->State           = OS_TMR_STATE_TIMEOUT;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	2204      	movs	r2, #4
 80035ae:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                                                                /* Execute callback function if available               */
            p_fnct                 = p_tmr->CallbackPtr;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	60bb      	str	r3, [r7, #8]
            if (p_fnct != (OS_TMR_CALLBACK_PTR)0u) {
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <OS_TmrTask+0xc6>
                (*p_fnct)(p_tmr, p_tmr->CallbackPtrArg);
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4611      	mov	r1, r2
 80035c6:	69f8      	ldr	r0, [r7, #28]
 80035c8:	4798      	blx	r3
            }

            if (p_tmr->State == OS_TMR_STATE_TIMEOUT) {
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d125      	bne.n	8003620 <OS_TmrTask+0x11c>
                OS_TmrUnlink(p_tmr, OSTmrTaskTickBase);
 80035d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003644 <OS_TmrTask+0x140>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4619      	mov	r1, r3
 80035da:	69f8      	ldr	r0, [r7, #28]
 80035dc:	f7ff ff08 	bl	80033f0 <OS_TmrUnlink>

                if (p_tmr->Opt == OS_OPT_TMR_PERIODIC) {
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	8c1b      	ldrh	r3, [r3, #32]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d10e      	bne.n	8003606 <OS_TmrTask+0x102>
                    p_tmr->State   = OS_TMR_STATE_RUNNING;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                    p_tmr->Remain  = p_tmr->Period;
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	69da      	ldr	r2, [r3, #28]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	615a      	str	r2, [r3, #20]
                    OS_TmrLink(p_tmr, OSTmrTaskTickBase);
 80035f8:	4b12      	ldr	r3, [pc, #72]	@ (8003644 <OS_TmrTask+0x140>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4619      	mov	r1, r3
 80035fe:	69f8      	ldr	r0, [r7, #28]
 8003600:	f7ff fe66 	bl	80032d0 <OS_TmrLink>
 8003604:	e00c      	b.n	8003620 <OS_TmrTask+0x11c>
                } else {
                    p_tmr->PrevPtr = (OS_TMR *)0;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	2200      	movs	r2, #0
 800360a:	611a      	str	r2, [r3, #16]
                    p_tmr->NextPtr = (OS_TMR *)0;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	2200      	movs	r2, #0
 8003610:	60da      	str	r2, [r3, #12]
                    p_tmr->Remain  = 0u;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2200      	movs	r2, #0
 8003616:	615a      	str	r2, [r3, #20]
                    p_tmr->State   = OS_TMR_STATE_COMPLETED;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	2203      	movs	r2, #3
 800361c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                }
            }

            p_tmr                  = OSTmrListPtr;
 8003620:	4b06      	ldr	r3, [pc, #24]	@ (800363c <OS_TmrTask+0x138>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	61fb      	str	r3, [r7, #28]
        while ((p_tmr         != (OS_TMR *)0) &&
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	2b00      	cmp	r3, #0
 800362a:	f43f af73 	beq.w	8003514 <OS_TmrTask+0x10>
               (p_tmr->Remain ==          0u)) {
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	695b      	ldr	r3, [r3, #20]
        while ((p_tmr         != (OS_TMR *)0) &&
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0b9      	beq.n	80035aa <OS_TmrTask+0xa6>
 8003636:	e76d      	b.n	8003514 <OS_TmrTask+0x10>
            continue;
 8003638:	bf00      	nop
        if (OSTmrListPtr == (OS_TMR *)0) {
 800363a:	e76b      	b.n	8003514 <OS_TmrTask+0x10>
 800363c:	2000162c 	.word	0x2000162c
 8003640:	20001624 	.word	0x20001624
 8003644:	20001700 	.word	0x20001700

08003648 <OS_TmrLock>:
* Note(s)    : 1) These functions are INTERNAL to uC/OS-III and your application MUST NOT call them.
************************************************************************************************************************
*/

static  void  OS_TmrLock (void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af02      	add	r7, sp, #8
    OS_ERR  err;


    OSMutexPend(&OSTmrMutex, 0u, OS_OPT_PEND_BLOCKING, (CPU_TS *)0, &err);
 800364e:	1dbb      	adds	r3, r7, #6
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	2300      	movs	r3, #0
 8003654:	2200      	movs	r2, #0
 8003656:	2100      	movs	r1, #0
 8003658:	4803      	ldr	r0, [pc, #12]	@ (8003668 <OS_TmrLock+0x20>)
 800365a:	f7fe f90d 	bl	8001878 <OSMutexPend>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20001640 	.word	0x20001640

0800366c <OS_TmrCondCreate>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrCondCreate (void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8003672:	2300      	movs	r3, #0
 8003674:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 8003676:	2040      	movs	r0, #64	@ 0x40
 8003678:	f7fc fdaa 	bl	80001d0 <CPU_SR_Save>
 800367c:	6078      	str	r0, [r7, #4]
#if (OS_OBJ_TYPE_REQ > 0u)
    OSTmrCond.Type  = OS_OBJ_TYPE_COND;                         /* Mark the data structure as a condition variable.     */
 800367e:	4b08      	ldr	r3, [pc, #32]	@ (80036a0 <OS_TmrCondCreate+0x34>)
 8003680:	4a08      	ldr	r2, [pc, #32]	@ (80036a4 <OS_TmrCondCreate+0x38>)
 8003682:	601a      	str	r2, [r3, #0]
#endif
    OSTmrCond.Mutex = &OSTmrMutex;                              /* Bind the timer mutex to the condition variable.      */
 8003684:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <OS_TmrCondCreate+0x34>)
 8003686:	4a08      	ldr	r2, [pc, #32]	@ (80036a8 <OS_TmrCondCreate+0x3c>)
 8003688:	60da      	str	r2, [r3, #12]
    OS_PendListInit(&OSTmrCond.PendList);                       /* Initialize the waiting list                          */
 800368a:	4808      	ldr	r0, [pc, #32]	@ (80036ac <OS_TmrCondCreate+0x40>)
 800368c:	f7fd fc40 	bl	8000f10 <OS_PendListInit>
    CPU_CRITICAL_EXIT();
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7fc fdab 	bl	80001ec <CPU_SR_Restore>
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20001630 	.word	0x20001630
 80036a4:	444e4f43 	.word	0x444e4f43
 80036a8:	20001640 	.word	0x20001640
 80036ac:	20001634 	.word	0x20001634

080036b0 <OS_TmrCondWait>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrCondWait (OS_TICK  timeout)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	6078      	str	r0, [r7, #4]
    OS_TCB        *p_tcb;
    OS_PEND_LIST  *p_pend_list;
    CPU_TS         ts;
    CPU_SR_ALLOC();
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]


    CPU_CRITICAL_ENTER();
 80036bc:	2040      	movs	r0, #64	@ 0x40
 80036be:	f7fc fd87 	bl	80001d0 <CPU_SR_Save>
 80036c2:	6178      	str	r0, [r7, #20]
#if (OS_CFG_TS_EN > 0u)
    ts             = OS_TS_GET();                               /* Get timestamp                                        */
    OSTmrMutex.TS  = ts;
#else
    ts             = 0u;
 80036c4:	2300      	movs	r3, #0
 80036c6:	613b      	str	r3, [r7, #16]
#endif
                                                                /* Release mutex to other tasks.                        */
    OS_MutexGrpRemove(&OSTmrTaskTCB, &OSTmrMutex);
 80036c8:	493d      	ldr	r1, [pc, #244]	@ (80037c0 <OS_TmrCondWait+0x110>)
 80036ca:	483e      	ldr	r0, [pc, #248]	@ (80037c4 <OS_TmrCondWait+0x114>)
 80036cc:	f7fe fab0 	bl	8001c30 <OS_MutexGrpRemove>
    p_pend_list                    = &OSTmrMutex.PendList;
 80036d0:	4b3d      	ldr	r3, [pc, #244]	@ (80037c8 <OS_TmrCondWait+0x118>)
 80036d2:	60fb      	str	r3, [r7, #12]

    if (OSTmrTaskTCB.Prio != OSTmrTaskTCB.BasePrio) {           /* Restore our original prio.                           */
 80036d4:	4b3b      	ldr	r3, [pc, #236]	@ (80037c4 <OS_TmrCondWait+0x114>)
 80036d6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80036da:	4b3a      	ldr	r3, [pc, #232]	@ (80037c4 <OS_TmrCondWait+0x114>)
 80036dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d00a      	beq.n	80036fa <OS_TmrCondWait+0x4a>
        OS_TRACE_MUTEX_TASK_PRIO_DISINHERIT(&OSTmrTaskTCB, OSTmrTaskTCB.Prio);
        OSTmrTaskTCB.Prio          = OSTmrTaskTCB.BasePrio;
 80036e4:	4b37      	ldr	r3, [pc, #220]	@ (80037c4 <OS_TmrCondWait+0x114>)
 80036e6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80036ea:	4b36      	ldr	r3, [pc, #216]	@ (80037c4 <OS_TmrCondWait+0x114>)
 80036ec:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        OSPrioCur                  = OSTmrTaskTCB.BasePrio;
 80036f0:	4b34      	ldr	r3, [pc, #208]	@ (80037c4 <OS_TmrCondWait+0x114>)
 80036f2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80036f6:	4b35      	ldr	r3, [pc, #212]	@ (80037cc <OS_TmrCondWait+0x11c>)
 80036f8:	701a      	strb	r2, [r3, #0]
    }

    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* Any task waiting on mutex?                           */
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <OS_TmrCondWait+0x60>
        OSTmrMutex.OwnerTCBPtr     = (OS_TCB *)0;               /* No                                                   */
 8003702:	4b2f      	ldr	r3, [pc, #188]	@ (80037c0 <OS_TmrCondWait+0x110>)
 8003704:	2200      	movs	r2, #0
 8003706:	611a      	str	r2, [r3, #16]
        OSTmrMutex.OwnerNestingCtr =           0u;
 8003708:	4b2d      	ldr	r3, [pc, #180]	@ (80037c0 <OS_TmrCondWait+0x110>)
 800370a:	2200      	movs	r2, #0
 800370c:	751a      	strb	r2, [r3, #20]
 800370e:	e014      	b.n	800373a <OS_TmrCondWait+0x8a>
    } else {
        p_tcb                      = p_pend_list->HeadPtr;      /* Yes, give mutex to new owner                         */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60bb      	str	r3, [r7, #8]
        OSTmrMutex.OwnerTCBPtr     = p_tcb;
 8003716:	4a2a      	ldr	r2, [pc, #168]	@ (80037c0 <OS_TmrCondWait+0x110>)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	6113      	str	r3, [r2, #16]
        OSTmrMutex.OwnerNestingCtr =           1u;
 800371c:	4b28      	ldr	r3, [pc, #160]	@ (80037c0 <OS_TmrCondWait+0x110>)
 800371e:	2201      	movs	r2, #1
 8003720:	751a      	strb	r2, [r3, #20]
        OS_MutexGrpAdd(p_tcb, &OSTmrMutex);
 8003722:	4927      	ldr	r1, [pc, #156]	@ (80037c0 <OS_TmrCondWait+0x110>)
 8003724:	68b8      	ldr	r0, [r7, #8]
 8003726:	f7fe fa71 	bl	8001c0c <OS_MutexGrpAdd>
                                                                /* Post to mutex                                        */
        OS_Post((OS_PEND_OBJ *)((void *)&OSTmrMutex),
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	2300      	movs	r3, #0
 8003730:	2200      	movs	r2, #0
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	4822      	ldr	r0, [pc, #136]	@ (80037c0 <OS_TmrCondWait+0x110>)
 8003736:	f7fd fcad 	bl	8001094 <OS_Post>
                                (void *) 0,
                                         0u,
                                         ts);
    }

    OS_Pend((OS_PEND_OBJ *)((void *)&OSTmrCond),                /* Pend on the condition variable.                      */
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2203      	movs	r2, #3
 800373e:	4921      	ldr	r1, [pc, #132]	@ (80037c4 <OS_TmrCondWait+0x114>)
 8003740:	4823      	ldr	r0, [pc, #140]	@ (80037d0 <OS_TmrCondWait+0x120>)
 8003742:	f7fd fb9f 	bl	8000e84 <OS_Pend>
                                   &OSTmrTaskTCB,
                                    OS_TASK_PEND_ON_COND,
                                    timeout);
    CPU_CRITICAL_EXIT();
 8003746:	6978      	ldr	r0, [r7, #20]
 8003748:	f7fc fd50 	bl	80001ec <CPU_SR_Restore>

    OSSched();
 800374c:	f7fd fa9c 	bl	8000c88 <OSSched>

    CPU_CRITICAL_ENTER();                                       /* Either we timed out, or were signaled.               */
 8003750:	2040      	movs	r0, #64	@ 0x40
 8003752:	f7fc fd3d 	bl	80001d0 <CPU_SR_Save>
 8003756:	6178      	str	r0, [r7, #20]

    if (OSTmrMutex.OwnerTCBPtr == (OS_TCB *)0) {                /* Can we grab the mutex?                               */
 8003758:	4b19      	ldr	r3, [pc, #100]	@ (80037c0 <OS_TmrCondWait+0x110>)
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10d      	bne.n	800377c <OS_TmrCondWait+0xcc>
        OS_MutexGrpAdd(&OSTmrTaskTCB, &OSTmrMutex);             /* Yes, no-one else pending.                            */
 8003760:	4917      	ldr	r1, [pc, #92]	@ (80037c0 <OS_TmrCondWait+0x110>)
 8003762:	4818      	ldr	r0, [pc, #96]	@ (80037c4 <OS_TmrCondWait+0x114>)
 8003764:	f7fe fa52 	bl	8001c0c <OS_MutexGrpAdd>
        OSTmrMutex.OwnerTCBPtr     = &OSTmrTaskTCB;
 8003768:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <OS_TmrCondWait+0x110>)
 800376a:	4a16      	ldr	r2, [pc, #88]	@ (80037c4 <OS_TmrCondWait+0x114>)
 800376c:	611a      	str	r2, [r3, #16]
        OSTmrMutex.OwnerNestingCtr = 1u;
 800376e:	4b14      	ldr	r3, [pc, #80]	@ (80037c0 <OS_TmrCondWait+0x110>)
 8003770:	2201      	movs	r2, #1
 8003772:	751a      	strb	r2, [r3, #20]
        CPU_CRITICAL_EXIT();
 8003774:	6978      	ldr	r0, [r7, #20]
 8003776:	f7fc fd39 	bl	80001ec <CPU_SR_Restore>
                                         0u);
        CPU_CRITICAL_EXIT();

        OSSched();
    }
}
 800377a:	e01c      	b.n	80037b6 <OS_TmrCondWait+0x106>
        p_tcb = OSTmrMutex.OwnerTCBPtr;                         /* No, we need to wait for it.                          */
 800377c:	4b10      	ldr	r3, [pc, #64]	@ (80037c0 <OS_TmrCondWait+0x110>)
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	60bb      	str	r3, [r7, #8]
        if (p_tcb->Prio > OSTmrTaskTCB.Prio) {                  /* See if mutex owner has a lower priority than TmrTask.*/
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8003788:	4b0e      	ldr	r3, [pc, #56]	@ (80037c4 <OS_TmrCondWait+0x114>)
 800378a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800378e:	429a      	cmp	r2, r3
 8003790:	d906      	bls.n	80037a0 <OS_TmrCondWait+0xf0>
            OS_TaskChangePrio(p_tcb, OSTmrTaskTCB.Prio);
 8003792:	4b0c      	ldr	r3, [pc, #48]	@ (80037c4 <OS_TmrCondWait+0x114>)
 8003794:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003798:	4619      	mov	r1, r3
 800379a:	68b8      	ldr	r0, [r7, #8]
 800379c:	f7ff f9b6 	bl	8002b0c <OS_TaskChangePrio>
        OS_Pend((OS_PEND_OBJ *)((void *)&OSTmrMutex),           /* Block TmrTask until it gets the Mutex.               */
 80037a0:	2300      	movs	r3, #0
 80037a2:	2204      	movs	r2, #4
 80037a4:	4907      	ldr	r1, [pc, #28]	@ (80037c4 <OS_TmrCondWait+0x114>)
 80037a6:	4806      	ldr	r0, [pc, #24]	@ (80037c0 <OS_TmrCondWait+0x110>)
 80037a8:	f7fd fb6c 	bl	8000e84 <OS_Pend>
        CPU_CRITICAL_EXIT();
 80037ac:	6978      	ldr	r0, [r7, #20]
 80037ae:	f7fc fd1d 	bl	80001ec <CPU_SR_Restore>
        OSSched();
 80037b2:	f7fd fa69 	bl	8000c88 <OSSched>
}
 80037b6:	bf00      	nop
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20001640 	.word	0x20001640
 80037c4:	20001658 	.word	0x20001658
 80037c8:	20001644 	.word	0x20001644
 80037cc:	20001348 	.word	0x20001348
 80037d0:	20001630 	.word	0x20001630

080037d4 <OS_TmrCondSignal>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrCondSignal (void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af02      	add	r7, sp, #8
    OS_PEND_LIST  *p_pend_list;
    CPU_TS         ts;
    CPU_SR_ALLOC();
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 80037de:	2040      	movs	r0, #64	@ 0x40
 80037e0:	f7fc fcf6 	bl	80001d0 <CPU_SR_Save>
 80037e4:	60f8      	str	r0, [r7, #12]
#if (OS_CFG_TS_EN > 0u)
    ts             = OS_TS_GET();                               /* Get timestamp                                        */
    OSTmrMutex.TS  = ts;
#else
    ts             = 0u;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
#endif

    p_pend_list    = &OSTmrCond.PendList;
 80037ea:	4b0c      	ldr	r3, [pc, #48]	@ (800381c <OS_TmrCondSignal+0x48>)
 80037ec:	607b      	str	r3, [r7, #4]

    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* Timer task waiting on cond?                          */
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d103      	bne.n	80037fe <OS_TmrCondSignal+0x2a>
        CPU_CRITICAL_EXIT();
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f7fc fcf8 	bl	80001ec <CPU_SR_Restore>
        return;                                                 /* No, nothing to signal.                               */
 80037fc:	e00a      	b.n	8003814 <OS_TmrCondSignal+0x40>
    } else {
                                                                /* Yes, signal the timer task.                          */
        OS_Post((OS_PEND_OBJ *)((void *)&OSTmrCond),
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	2300      	movs	r3, #0
 8003804:	2200      	movs	r2, #0
 8003806:	4906      	ldr	r1, [pc, #24]	@ (8003820 <OS_TmrCondSignal+0x4c>)
 8003808:	4806      	ldr	r0, [pc, #24]	@ (8003824 <OS_TmrCondSignal+0x50>)
 800380a:	f7fd fc43 	bl	8001094 <OS_Post>
                                (void *) 0,
                                         0u,
                                         ts);
    }

    CPU_CRITICAL_EXIT();
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f7fc fcec 	bl	80001ec <CPU_SR_Restore>
}
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20001634 	.word	0x20001634
 8003820:	20001658 	.word	0x20001658
 8003824:	20001630 	.word	0x20001630

08003828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800382c:	4b0e      	ldr	r3, [pc, #56]	@ (8003868 <HAL_Init+0x40>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0d      	ldr	r2, [pc, #52]	@ (8003868 <HAL_Init+0x40>)
 8003832:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003836:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003838:	4b0b      	ldr	r3, [pc, #44]	@ (8003868 <HAL_Init+0x40>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a0a      	ldr	r2, [pc, #40]	@ (8003868 <HAL_Init+0x40>)
 800383e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003842:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003844:	4b08      	ldr	r3, [pc, #32]	@ (8003868 <HAL_Init+0x40>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a07      	ldr	r2, [pc, #28]	@ (8003868 <HAL_Init+0x40>)
 800384a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800384e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003850:	2003      	movs	r0, #3
 8003852:	f000 f8f9 	bl	8003a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003856:	200f      	movs	r0, #15
 8003858:	f000 f810 	bl	800387c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800385c:	f000 f806 	bl	800386c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40023c00 	.word	0x40023c00

0800386c <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8003884:	4b09      	ldr	r3, [pc, #36]	@ (80038ac <HAL_InitTick+0x30>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a09      	ldr	r2, [pc, #36]	@ (80038b0 <HAL_InitTick+0x34>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	099b      	lsrs	r3, r3, #6
 8003890:	4618      	mov	r0, r3
 8003892:	f000 f900 	bl	8003a96 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8003896:	2200      	movs	r2, #0
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	f04f 30ff 	mov.w	r0, #4294967295
 800389e:	f000 f8de 	bl	8003a5e <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20000010 	.word	0x20000010
 80038b0:	10624dd3 	.word	0x10624dd3

080038b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return uwTick;
 80038b8:	4b03      	ldr	r3, [pc, #12]	@ (80038c8 <HAL_GetTick+0x14>)
 80038ba:	681b      	ldr	r3, [r3, #0]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20001710 	.word	0x20001710

080038cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 80038d0:	4b03      	ldr	r3, [pc, #12]	@ (80038e0 <HAL_GetREVID+0x14>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	0c1b      	lsrs	r3, r3, #16
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	e0042000 	.word	0xe0042000

080038e4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003928 <NVIC_SetPriorityGrouping+0x44>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003900:	4013      	ands	r3, r2
 8003902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800390c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003916:	4a04      	ldr	r2, [pc, #16]	@ (8003928 <NVIC_SetPriorityGrouping+0x44>)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	60d3      	str	r3, [r2, #12]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003930:	4b04      	ldr	r3, [pc, #16]	@ (8003944 <NVIC_GetPriorityGrouping+0x18>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	0a1b      	lsrs	r3, r3, #8
 8003936:	f003 0307 	and.w	r3, r3, #7
}
 800393a:	4618      	mov	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	6039      	str	r1, [r7, #0]
 8003952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003958:	2b00      	cmp	r3, #0
 800395a:	da0b      	bge.n	8003974 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	b2da      	uxtb	r2, r3
 8003960:	490c      	ldr	r1, [pc, #48]	@ (8003994 <NVIC_SetPriority+0x4c>)
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	3b04      	subs	r3, #4
 800396a:	0112      	lsls	r2, r2, #4
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	440b      	add	r3, r1
 8003970:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003972:	e009      	b.n	8003988 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	b2da      	uxtb	r2, r3
 8003978:	4907      	ldr	r1, [pc, #28]	@ (8003998 <NVIC_SetPriority+0x50>)
 800397a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397e:	0112      	lsls	r2, r2, #4
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	440b      	add	r3, r1
 8003984:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	e000ed00 	.word	0xe000ed00
 8003998:	e000e100 	.word	0xe000e100

0800399c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800399c:	b480      	push	{r7}
 800399e:	b089      	sub	sp, #36	@ 0x24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f1c3 0307 	rsb	r3, r3, #7
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	bf28      	it	cs
 80039ba:	2304      	movcs	r3, #4
 80039bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3304      	adds	r3, #4
 80039c2:	2b06      	cmp	r3, #6
 80039c4:	d902      	bls.n	80039cc <NVIC_EncodePriority+0x30>
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	3b03      	subs	r3, #3
 80039ca:	e000      	b.n	80039ce <NVIC_EncodePriority+0x32>
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d0:	f04f 32ff 	mov.w	r2, #4294967295
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43da      	mvns	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	401a      	ands	r2, r3
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039e4:	f04f 31ff 	mov.w	r1, #4294967295
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	fa01 f303 	lsl.w	r3, r1, r3
 80039ee:	43d9      	mvns	r1, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f4:	4313      	orrs	r3, r2
         );
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3724      	adds	r7, #36	@ 0x24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a14:	d301      	bcc.n	8003a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a16:	2301      	movs	r3, #1
 8003a18:	e00f      	b.n	8003a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a44 <SysTick_Config+0x40>)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a22:	210f      	movs	r1, #15
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	f7ff ff8e 	bl	8003948 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a2c:	4b05      	ldr	r3, [pc, #20]	@ (8003a44 <SysTick_Config+0x40>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a32:	4b04      	ldr	r3, [pc, #16]	@ (8003a44 <SysTick_Config+0x40>)
 8003a34:	2207      	movs	r2, #7
 8003a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	e000e010 	.word	0xe000e010

08003a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff ff47 	bl	80038e4 <NVIC_SetPriorityGrouping>
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b086      	sub	sp, #24
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	4603      	mov	r3, r0
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a70:	f7ff ff5c 	bl	800392c <NVIC_GetPriorityGrouping>
 8003a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	6978      	ldr	r0, [r7, #20]
 8003a7c:	f7ff ff8e 	bl	800399c <NVIC_EncodePriority>
 8003a80:	4602      	mov	r2, r0
 8003a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a86:	4611      	mov	r1, r2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff ff5d 	bl	8003948 <NVIC_SetPriority>
}
 8003a8e:	bf00      	nop
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff ffb0 	bl	8003a04 <SysTick_Config>
 8003aa4:	4603      	mov	r3, r0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b089      	sub	sp, #36	@ 0x24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	e16b      	b.n	8003da4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8003acc:	2201      	movs	r2, #1
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	f040 815a 	bne.w	8003d9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d003      	beq.n	8003afa <HAL_GPIO_Init+0x4a>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b12      	cmp	r3, #18
 8003af8:	d123      	bne.n	8003b42 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	08da      	lsrs	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3208      	adds	r2, #8
 8003b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	220f      	movs	r2, #15
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43db      	mvns	r3, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	08da      	lsrs	r2, r3, #3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3208      	adds	r2, #8
 8003b3c:	69b9      	ldr	r1, [r7, #24]
 8003b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43db      	mvns	r3, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4013      	ands	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 0203 	and.w	r2, r3, #3
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d00b      	beq.n	8003b96 <HAL_GPIO_Init+0xe6>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d007      	beq.n	8003b96 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b8a:	2b11      	cmp	r3, #17
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b12      	cmp	r3, #18
 8003b94:	d130      	bne.n	8003bf8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bcc:	2201      	movs	r2, #1
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	f003 0201 	and.w	r2, r3, #1
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	2203      	movs	r2, #3
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80b4 	beq.w	8003d9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	4b60      	ldr	r3, [pc, #384]	@ (8003dbc <HAL_GPIO_Init+0x30c>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3e:	4a5f      	ldr	r2, [pc, #380]	@ (8003dbc <HAL_GPIO_Init+0x30c>)
 8003c40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c46:	4b5d      	ldr	r3, [pc, #372]	@ (8003dbc <HAL_GPIO_Init+0x30c>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c52:	4a5b      	ldr	r2, [pc, #364]	@ (8003dc0 <HAL_GPIO_Init+0x310>)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	089b      	lsrs	r3, r3, #2
 8003c58:	3302      	adds	r3, #2
 8003c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	220f      	movs	r2, #15
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a52      	ldr	r2, [pc, #328]	@ (8003dc4 <HAL_GPIO_Init+0x314>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d02b      	beq.n	8003cd6 <HAL_GPIO_Init+0x226>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a51      	ldr	r2, [pc, #324]	@ (8003dc8 <HAL_GPIO_Init+0x318>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d025      	beq.n	8003cd2 <HAL_GPIO_Init+0x222>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a50      	ldr	r2, [pc, #320]	@ (8003dcc <HAL_GPIO_Init+0x31c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d01f      	beq.n	8003cce <HAL_GPIO_Init+0x21e>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a4f      	ldr	r2, [pc, #316]	@ (8003dd0 <HAL_GPIO_Init+0x320>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d019      	beq.n	8003cca <HAL_GPIO_Init+0x21a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a4e      	ldr	r2, [pc, #312]	@ (8003dd4 <HAL_GPIO_Init+0x324>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d013      	beq.n	8003cc6 <HAL_GPIO_Init+0x216>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a4d      	ldr	r2, [pc, #308]	@ (8003dd8 <HAL_GPIO_Init+0x328>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00d      	beq.n	8003cc2 <HAL_GPIO_Init+0x212>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a4c      	ldr	r2, [pc, #304]	@ (8003ddc <HAL_GPIO_Init+0x32c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d007      	beq.n	8003cbe <HAL_GPIO_Init+0x20e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a4b      	ldr	r2, [pc, #300]	@ (8003de0 <HAL_GPIO_Init+0x330>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d101      	bne.n	8003cba <HAL_GPIO_Init+0x20a>
 8003cb6:	2307      	movs	r3, #7
 8003cb8:	e00e      	b.n	8003cd8 <HAL_GPIO_Init+0x228>
 8003cba:	2308      	movs	r3, #8
 8003cbc:	e00c      	b.n	8003cd8 <HAL_GPIO_Init+0x228>
 8003cbe:	2306      	movs	r3, #6
 8003cc0:	e00a      	b.n	8003cd8 <HAL_GPIO_Init+0x228>
 8003cc2:	2305      	movs	r3, #5
 8003cc4:	e008      	b.n	8003cd8 <HAL_GPIO_Init+0x228>
 8003cc6:	2304      	movs	r3, #4
 8003cc8:	e006      	b.n	8003cd8 <HAL_GPIO_Init+0x228>
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e004      	b.n	8003cd8 <HAL_GPIO_Init+0x228>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e002      	b.n	8003cd8 <HAL_GPIO_Init+0x228>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <HAL_GPIO_Init+0x228>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	f002 0203 	and.w	r2, r2, #3
 8003cde:	0092      	lsls	r2, r2, #2
 8003ce0:	4093      	lsls	r3, r2
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ce8:	4935      	ldr	r1, [pc, #212]	@ (8003dc0 <HAL_GPIO_Init+0x310>)
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	089b      	lsrs	r3, r3, #2
 8003cee:	3302      	adds	r3, #2
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8003de4 <HAL_GPIO_Init+0x334>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d1a:	4a32      	ldr	r2, [pc, #200]	@ (8003de4 <HAL_GPIO_Init+0x334>)
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d20:	4b30      	ldr	r3, [pc, #192]	@ (8003de4 <HAL_GPIO_Init+0x334>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d44:	4a27      	ldr	r2, [pc, #156]	@ (8003de4 <HAL_GPIO_Init+0x334>)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d4a:	4b26      	ldr	r3, [pc, #152]	@ (8003de4 <HAL_GPIO_Init+0x334>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	43db      	mvns	r3, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4013      	ands	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003de4 <HAL_GPIO_Init+0x334>)
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d74:	4b1b      	ldr	r3, [pc, #108]	@ (8003de4 <HAL_GPIO_Init+0x334>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d98:	4a12      	ldr	r2, [pc, #72]	@ (8003de4 <HAL_GPIO_Init+0x334>)
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	3301      	adds	r3, #1
 8003da2:	61fb      	str	r3, [r7, #28]
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	2b0f      	cmp	r3, #15
 8003da8:	f67f ae90 	bls.w	8003acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dac:	bf00      	nop
 8003dae:	bf00      	nop
 8003db0:	3724      	adds	r7, #36	@ 0x24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40013800 	.word	0x40013800
 8003dc4:	40020000 	.word	0x40020000
 8003dc8:	40020400 	.word	0x40020400
 8003dcc:	40020800 	.word	0x40020800
 8003dd0:	40020c00 	.word	0x40020c00
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	40021400 	.word	0x40021400
 8003ddc:	40021800 	.word	0x40021800
 8003de0:	40021c00 	.word	0x40021c00
 8003de4:	40013c00 	.word	0x40013c00

08003de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	807b      	strh	r3, [r7, #2]
 8003df4:	4613      	mov	r3, r2
 8003df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003df8:	787b      	ldrb	r3, [r7, #1]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dfe:	887a      	ldrh	r2, [r7, #2]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e04:	e003      	b.n	8003e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e06:	887b      	ldrh	r3, [r7, #2]
 8003e08:	041a      	lsls	r2, r3, #16
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	619a      	str	r2, [r3, #24]
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	460b      	mov	r3, r1
 8003e24:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	887b      	ldrh	r3, [r7, #2]
 8003e2c:	405a      	eors	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	615a      	str	r2, [r3, #20]
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
	...

08003e40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08e      	sub	sp, #56	@ 0x38
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 uint32_t tickstart = 0U;  
 8003e48:	2300      	movs	r3, #0
 8003e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d050      	beq.n	8003efa <HAL_RCC_OscConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e58:	4b96      	ldr	r3, [pc, #600]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 030c 	and.w	r3, r3, #12
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d00c      	beq.n	8003e7e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e64:	4b93      	ldr	r3, [pc, #588]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d112      	bne.n	8003e96 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e70:	4b90      	ldr	r3, [pc, #576]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e7c:	d10b      	bne.n	8003e96 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e7e:	4b8d      	ldr	r3, [pc, #564]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d036      	beq.n	8003ef8 <HAL_RCC_OscConfig+0xb8>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d132      	bne.n	8003ef8 <HAL_RCC_OscConfig+0xb8>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e1de      	b.n	8004254 <HAL_RCC_OscConfig+0x414>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	4b87      	ldr	r3, [pc, #540]	@ (80040b8 <HAL_RCC_OscConfig+0x278>)
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d013      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x90>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7ff fd04 	bl	80038b4 <HAL_GetTick>
 8003eac:	6378      	str	r0, [r7, #52]	@ 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x82>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eb0:	f7ff fd00 	bl	80038b4 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b64      	cmp	r3, #100	@ 0x64
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x82>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e1c8      	b.n	8004254 <HAL_RCC_OscConfig+0x414>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec2:	4b7c      	ldr	r3, [pc, #496]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x70>
 8003ece:	e014      	b.n	8003efa <HAL_RCC_OscConfig+0xba>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7ff fcf0 	bl	80038b4 <HAL_GetTick>
 8003ed4:	6378      	str	r0, [r7, #52]	@ 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0xaa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ed8:	f7ff fcec 	bl	80038b4 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b64      	cmp	r3, #100	@ 0x64
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e1b4      	b.n	8004254 <HAL_RCC_OscConfig+0x414>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eea:	4b72      	ldr	r3, [pc, #456]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x98>
 8003ef6:	e000      	b.n	8003efa <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d077      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x1b6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f06:	4b6b      	ldr	r3, [pc, #428]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00b      	beq.n	8003f2a <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f12:	4b68      	ldr	r3, [pc, #416]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d126      	bne.n	8003f6c <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f1e:	4b65      	ldr	r3, [pc, #404]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d120      	bne.n	8003f6c <HAL_RCC_OscConfig+0x12c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2a:	4b62      	ldr	r3, [pc, #392]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d005      	beq.n	8003f42 <HAL_RCC_OscConfig+0x102>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d001      	beq.n	8003f42 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e188      	b.n	8004254 <HAL_RCC_OscConfig+0x414>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f42:	4b5c      	ldr	r3, [pc, #368]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6919      	ldr	r1, [r3, #16]
 8003f4e:	23f8      	movs	r3, #248	@ 0xf8
 8003f50:	633b      	str	r3, [r7, #48]	@ 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f54:	fa93 f3a3 	rbit	r3, r3
 8003f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5c:	fab3 f383 	clz	r3, r3
 8003f60:	fa01 f303 	lsl.w	r3, r1, r3
 8003f64:	4953      	ldr	r1, [pc, #332]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f6a:	e044      	b.n	8003ff6 <HAL_RCC_OscConfig+0x1b6>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d02a      	beq.n	8003fca <HAL_RCC_OscConfig+0x18a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f74:	4b51      	ldr	r3, [pc, #324]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7a:	f7ff fc9b 	bl	80038b4 <HAL_GetTick>
 8003f7e:	6378      	str	r0, [r7, #52]	@ 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f82:	f7ff fc97 	bl	80038b4 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e15f      	b.n	8004254 <HAL_RCC_OscConfig+0x414>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f94:	4b47      	ldr	r3, [pc, #284]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0f0      	beq.n	8003f82 <HAL_RCC_OscConfig+0x142>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa0:	4b44      	ldr	r3, [pc, #272]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6919      	ldr	r1, [r3, #16]
 8003fac:	23f8      	movs	r3, #248	@ 0xf8
 8003fae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb2:	fa93 f3a3 	rbit	r3, r3
 8003fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fba:	fab3 f383 	clz	r3, r3
 8003fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc2:	493c      	ldr	r1, [pc, #240]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	600b      	str	r3, [r1, #0]
 8003fc8:	e015      	b.n	8003ff6 <HAL_RCC_OscConfig+0x1b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fca:	4b3c      	ldr	r3, [pc, #240]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7ff fc70 	bl	80038b4 <HAL_GetTick>
 8003fd4:	6378      	str	r0, [r7, #52]	@ 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x1aa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fd8:	f7ff fc6c 	bl	80038b4 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e134      	b.n	8004254 <HAL_RCC_OscConfig+0x414>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fea:	4b32      	ldr	r3, [pc, #200]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x198>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d030      	beq.n	8004064 <HAL_RCC_OscConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d016      	beq.n	8004038 <HAL_RCC_OscConfig+0x1f8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800400a:	4b2d      	ldr	r3, [pc, #180]	@ (80040c0 <HAL_RCC_OscConfig+0x280>)
 800400c:	2201      	movs	r2, #1
 800400e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004010:	f7ff fc50 	bl	80038b4 <HAL_GetTick>
 8004014:	6378      	str	r0, [r7, #52]	@ 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004018:	f7ff fc4c 	bl	80038b4 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x1ea>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e114      	b.n	8004254 <HAL_RCC_OscConfig+0x414>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402a:	4b22      	ldr	r3, [pc, #136]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 800402c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0x1d8>
 8004036:	e015      	b.n	8004064 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004038:	4b21      	ldr	r3, [pc, #132]	@ (80040c0 <HAL_RCC_OscConfig+0x280>)
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403e:	f7ff fc39 	bl	80038b4 <HAL_GetTick>
 8004042:	6378      	str	r0, [r7, #52]	@ 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x218>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004046:	f7ff fc35 	bl	80038b4 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x218>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e0fd      	b.n	8004254 <HAL_RCC_OscConfig+0x414>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004058:	4b16      	ldr	r3, [pc, #88]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 800405a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f0      	bne.n	8004046 <HAL_RCC_OscConfig+0x206>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d065      	beq.n	800413c <HAL_RCC_OscConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004070:	2300      	movs	r3, #0
 8004072:	60bb      	str	r3, [r7, #8]
 8004074:	4b0f      	ldr	r3, [pc, #60]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	4a0e      	ldr	r2, [pc, #56]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 800407a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800407e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004080:	4b0c      	ldr	r3, [pc, #48]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800408c:	4b0d      	ldr	r3, [pc, #52]	@ (80040c4 <HAL_RCC_OscConfig+0x284>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a0c      	ldr	r2, [pc, #48]	@ (80040c4 <HAL_RCC_OscConfig+0x284>)
 8004092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004096:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8004098:	f7ff fc0c 	bl	80038b4 <HAL_GetTick>
 800409c:	6378      	str	r0, [r7, #52]	@ 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800409e:	e013      	b.n	80040c8 <HAL_RCC_OscConfig+0x288>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040a0:	f7ff fc08 	bl	80038b4 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d90c      	bls.n	80040c8 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e0d0      	b.n	8004254 <HAL_RCC_OscConfig+0x414>
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40023802 	.word	0x40023802
 80040bc:	42470000 	.word	0x42470000
 80040c0:	42470e80 	.word	0x42470e80
 80040c4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040c8:	4b64      	ldr	r3, [pc, #400]	@ (800425c <HAL_RCC_OscConfig+0x41c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0e5      	beq.n	80040a0 <HAL_RCC_OscConfig+0x260>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	4b61      	ldr	r3, [pc, #388]	@ (8004260 <HAL_RCC_OscConfig+0x420>)
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d015      	beq.n	8004112 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e6:	f7ff fbe5 	bl	80038b4 <HAL_GetTick>
 80040ea:	6378      	str	r0, [r7, #52]	@ 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ec:	e00a      	b.n	8004104 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ee:	f7ff fbe1 	bl	80038b4 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x2c4>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e0a7      	b.n	8004254 <HAL_RCC_OscConfig+0x414>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004104:	4b57      	ldr	r3, [pc, #348]	@ (8004264 <HAL_RCC_OscConfig+0x424>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0ee      	beq.n	80040ee <HAL_RCC_OscConfig+0x2ae>
 8004110:	e014      	b.n	800413c <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004112:	f7ff fbcf 	bl	80038b4 <HAL_GetTick>
 8004116:	6378      	str	r0, [r7, #52]	@ 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004118:	e00a      	b.n	8004130 <HAL_RCC_OscConfig+0x2f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800411a:	f7ff fbcb 	bl	80038b4 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004128:	4293      	cmp	r3, r2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e091      	b.n	8004254 <HAL_RCC_OscConfig+0x414>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004130:	4b4c      	ldr	r3, [pc, #304]	@ (8004264 <HAL_RCC_OscConfig+0x424>)
 8004132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1ee      	bne.n	800411a <HAL_RCC_OscConfig+0x2da>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 8086 	beq.w	8004252 <HAL_RCC_OscConfig+0x412>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004146:	4b47      	ldr	r3, [pc, #284]	@ (8004264 <HAL_RCC_OscConfig+0x424>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	2b08      	cmp	r3, #8
 8004150:	d07d      	beq.n	800424e <HAL_RCC_OscConfig+0x40e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2b02      	cmp	r3, #2
 8004158:	d162      	bne.n	8004220 <HAL_RCC_OscConfig+0x3e0>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415a:	4b43      	ldr	r3, [pc, #268]	@ (8004268 <HAL_RCC_OscConfig+0x428>)
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7ff fba8 	bl	80038b4 <HAL_GetTick>
 8004164:	6378      	str	r0, [r7, #52]	@ 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004168:	f7ff fba4 	bl	80038b4 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e06c      	b.n	8004254 <HAL_RCC_OscConfig+0x414>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417a:	4b3a      	ldr	r3, [pc, #232]	@ (8004264 <HAL_RCC_OscConfig+0x424>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0x328>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69da      	ldr	r2, [r3, #28]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004194:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	fa93 f3a3 	rbit	r3, r3
 80041a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	fab3 f383 	clz	r3, r3
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b2:	085b      	lsrs	r3, r3, #1
 80041b4:	1e59      	subs	r1, r3, #1
 80041b6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80041ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	617b      	str	r3, [r7, #20]
  return(result);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	fa01 f303 	lsl.w	r3, r1, r3
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041d4:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 80041d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	fa93 f3a3 	rbit	r3, r3
 80041e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	fab3 f383 	clz	r3, r3
 80041e8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ec:	491d      	ldr	r1, [pc, #116]	@ (8004264 <HAL_RCC_OscConfig+0x424>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004268 <HAL_RCC_OscConfig+0x428>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7ff fb5c 	bl	80038b4 <HAL_GetTick>
 80041fc:	6378      	str	r0, [r7, #52]	@ 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004200:	f7ff fb58 	bl	80038b4 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e020      	b.n	8004254 <HAL_RCC_OscConfig+0x414>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004212:	4b14      	ldr	r3, [pc, #80]	@ (8004264 <HAL_RCC_OscConfig+0x424>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0x3c0>
 800421e:	e018      	b.n	8004252 <HAL_RCC_OscConfig+0x412>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004220:	4b11      	ldr	r3, [pc, #68]	@ (8004268 <HAL_RCC_OscConfig+0x428>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004226:	f7ff fb45 	bl	80038b4 <HAL_GetTick>
 800422a:	6378      	str	r0, [r7, #52]	@ 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800422e:	f7ff fb41 	bl	80038b4 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e009      	b.n	8004254 <HAL_RCC_OscConfig+0x414>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004240:	4b08      	ldr	r3, [pc, #32]	@ (8004264 <HAL_RCC_OscConfig+0x424>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f0      	bne.n	800422e <HAL_RCC_OscConfig+0x3ee>
 800424c:	e001      	b.n	8004252 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <HAL_RCC_OscConfig+0x414>
    }
  }
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3738      	adds	r7, #56	@ 0x38
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40007000 	.word	0x40007000
 8004260:	40023870 	.word	0x40023870
 8004264:	40023800 	.word	0x40023800
 8004268:	42470060 	.word	0x42470060

0800426c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800427a:	4b81      	ldr	r3, [pc, #516]	@ (8004480 <HAL_RCC_ClockConfig+0x214>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d90c      	bls.n	80042a2 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004288:	4b7d      	ldr	r3, [pc, #500]	@ (8004480 <HAL_RCC_ClockConfig+0x214>)
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004290:	4b7b      	ldr	r3, [pc, #492]	@ (8004480 <HAL_RCC_ClockConfig+0x214>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d001      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e0ea      	b.n	8004478 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ae:	4b75      	ldr	r3, [pc, #468]	@ (8004484 <HAL_RCC_ClockConfig+0x218>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	4972      	ldr	r1, [pc, #456]	@ (8004484 <HAL_RCC_ClockConfig+0x218>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 8086 	beq.w	80043da <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	4b6b      	ldr	r3, [pc, #428]	@ (8004484 <HAL_RCC_ClockConfig+0x218>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d119      	bne.n	8004316 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e0c8      	b.n	8004478 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d003      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d107      	bne.n	8004306 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f6:	4b63      	ldr	r3, [pc, #396]	@ (8004484 <HAL_RCC_ClockConfig+0x218>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e0b8      	b.n	8004478 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004306:	4b5f      	ldr	r3, [pc, #380]	@ (8004484 <HAL_RCC_ClockConfig+0x218>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e0b0      	b.n	8004478 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004316:	4b5b      	ldr	r3, [pc, #364]	@ (8004484 <HAL_RCC_ClockConfig+0x218>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f023 0203 	bic.w	r2, r3, #3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4958      	ldr	r1, [pc, #352]	@ (8004484 <HAL_RCC_ClockConfig+0x218>)
 8004324:	4313      	orrs	r3, r2
 8004326:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004328:	f7ff fac4 	bl	80038b4 <HAL_GetTick>
 800432c:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d112      	bne.n	800435c <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004336:	e00a      	b.n	800434e <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004338:	f7ff fabc 	bl	80038b4 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e094      	b.n	8004478 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800434e:	4b4d      	ldr	r3, [pc, #308]	@ (8004484 <HAL_RCC_ClockConfig+0x218>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 030c 	and.w	r3, r3, #12
 8004356:	2b04      	cmp	r3, #4
 8004358:	d1ee      	bne.n	8004338 <HAL_RCC_ClockConfig+0xcc>
 800435a:	e03e      	b.n	80043da <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b02      	cmp	r3, #2
 8004362:	d112      	bne.n	800438a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004364:	e00a      	b.n	800437c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004366:	f7ff faa5 	bl	80038b4 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004374:	4293      	cmp	r3, r2
 8004376:	d901      	bls.n	800437c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e07d      	b.n	8004478 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800437c:	4b41      	ldr	r3, [pc, #260]	@ (8004484 <HAL_RCC_ClockConfig+0x218>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 030c 	and.w	r3, r3, #12
 8004384:	2b08      	cmp	r3, #8
 8004386:	d1ee      	bne.n	8004366 <HAL_RCC_ClockConfig+0xfa>
 8004388:	e027      	b.n	80043da <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b03      	cmp	r3, #3
 8004390:	d11d      	bne.n	80043ce <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004392:	e00a      	b.n	80043aa <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004394:	f7ff fa8e 	bl	80038b4 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e066      	b.n	8004478 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80043aa:	4b36      	ldr	r3, [pc, #216]	@ (8004484 <HAL_RCC_ClockConfig+0x218>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
 80043b2:	2b0c      	cmp	r3, #12
 80043b4:	d1ee      	bne.n	8004394 <HAL_RCC_ClockConfig+0x128>
 80043b6:	e010      	b.n	80043da <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b8:	f7ff fa7c 	bl	80038b4 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e054      	b.n	8004478 <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80043ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004484 <HAL_RCC_ClockConfig+0x218>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1ee      	bne.n	80043b8 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80043da:	4b29      	ldr	r3, [pc, #164]	@ (8004480 <HAL_RCC_ClockConfig+0x214>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d20c      	bcs.n	8004402 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e8:	4b25      	ldr	r3, [pc, #148]	@ (8004480 <HAL_RCC_ClockConfig+0x214>)
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043f0:	4b23      	ldr	r3, [pc, #140]	@ (8004480 <HAL_RCC_ClockConfig+0x214>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d001      	beq.n	8004402 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e03a      	b.n	8004478 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	d008      	beq.n	8004420 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800440e:	4b1d      	ldr	r3, [pc, #116]	@ (8004484 <HAL_RCC_ClockConfig+0x218>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	491a      	ldr	r1, [pc, #104]	@ (8004484 <HAL_RCC_ClockConfig+0x218>)
 800441c:	4313      	orrs	r3, r2
 800441e:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800442c:	4b15      	ldr	r3, [pc, #84]	@ (8004484 <HAL_RCC_ClockConfig+0x218>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	4912      	ldr	r1, [pc, #72]	@ (8004484 <HAL_RCC_ClockConfig+0x218>)
 800443c:	4313      	orrs	r3, r2
 800443e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004440:	f000 f826 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8004444:	4601      	mov	r1, r0
 8004446:	4b0f      	ldr	r3, [pc, #60]	@ (8004484 <HAL_RCC_ClockConfig+0x218>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800444e:	23f0      	movs	r3, #240	@ 0xf0
 8004450:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	fa93 f3a3 	rbit	r3, r3
 8004458:	60fb      	str	r3, [r7, #12]
  return(result);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	fab3 f383 	clz	r3, r3
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
 8004464:	4a08      	ldr	r2, [pc, #32]	@ (8004488 <HAL_RCC_ClockConfig+0x21c>)
 8004466:	5cd3      	ldrb	r3, [r2, r3]
 8004468:	fa21 f303 	lsr.w	r3, r1, r3
 800446c:	4a07      	ldr	r2, [pc, #28]	@ (800448c <HAL_RCC_ClockConfig+0x220>)
 800446e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004470:	200f      	movs	r0, #15
 8004472:	f7ff fa03 	bl	800387c <HAL_InitTick>
  
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40023c00 	.word	0x40023c00
 8004484:	40023800 	.word	0x40023800
 8004488:	080047bc 	.word	0x080047bc
 800448c:	20000010 	.word	0x20000010

08004490 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004490:	b480      	push	{r7}
 8004492:	b08b      	sub	sp, #44	@ 0x2c
 8004494:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
 800449a:	2300      	movs	r3, #0
 800449c:	627b      	str	r3, [r7, #36]	@ 0x24
 800449e:	2300      	movs	r3, #0
 80044a0:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044a6:	4b38      	ldr	r3, [pc, #224]	@ (8004588 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d00c      	beq.n	80044cc <HAL_RCC_GetSysClockFreq+0x3c>
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d85d      	bhi.n	8004572 <HAL_RCC_GetSysClockFreq+0xe2>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_RCC_GetSysClockFreq+0x30>
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d003      	beq.n	80044c6 <HAL_RCC_GetSysClockFreq+0x36>
 80044be:	e058      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044c0:	4b32      	ldr	r3, [pc, #200]	@ (800458c <HAL_RCC_GetSysClockFreq+0xfc>)
 80044c2:	623b      	str	r3, [r7, #32]
       break;
 80044c4:	e058      	b.n	8004578 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044c6:	4b32      	ldr	r3, [pc, #200]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x100>)
 80044c8:	623b      	str	r3, [r7, #32]
      break;
 80044ca:	e055      	b.n	8004578 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004588 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044d4:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004588 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d017      	beq.n	8004512 <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80044e2:	4a2b      	ldr	r2, [pc, #172]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x100>)
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80044ea:	4b27      	ldr	r3, [pc, #156]	@ (8004588 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044ec:	6859      	ldr	r1, [r3, #4]
 80044ee:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044f2:	400b      	ands	r3, r1
 80044f4:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 80044f8:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fa:	6979      	ldr	r1, [r7, #20]
 80044fc:	fa91 f1a1 	rbit	r1, r1
 8004500:	6139      	str	r1, [r7, #16]
  return(result);
 8004502:	6939      	ldr	r1, [r7, #16]
 8004504:	fab1 f181 	clz	r1, r1
 8004508:	40cb      	lsrs	r3, r1
 800450a:	fb02 f303 	mul.w	r3, r2, r3
 800450e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004510:	e016      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8004512:	4a1e      	ldr	r2, [pc, #120]	@ (800458c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	fbb2 f2f3 	udiv	r2, r2, r3
 800451a:	4b1b      	ldr	r3, [pc, #108]	@ (8004588 <HAL_RCC_GetSysClockFreq+0xf8>)
 800451c:	6859      	ldr	r1, [r3, #4]
 800451e:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004522:	400b      	ands	r3, r1
 8004524:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 8004528:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452a:	68f9      	ldr	r1, [r7, #12]
 800452c:	fa91 f1a1 	rbit	r1, r1
 8004530:	60b9      	str	r1, [r7, #8]
  return(result);
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	fab1 f181 	clz	r1, r1
 8004538:	40cb      	lsrs	r3, r1
 800453a:	fb02 f303 	mul.w	r3, r2, r3
 800453e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8004540:	4b11      	ldr	r3, [pc, #68]	@ (8004588 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004548:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800454c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	fa93 f3a3 	rbit	r3, r3
 8004554:	603b      	str	r3, [r7, #0]
  return(result);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	fab3 f383 	clz	r3, r3
 800455c:	fa22 f303 	lsr.w	r3, r2, r3
 8004560:	3301      	adds	r3, #1
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8004566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	fbb2 f3f3 	udiv	r3, r2, r3
 800456e:	623b      	str	r3, [r7, #32]
      break;
 8004570:	e002      	b.n	8004578 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004572:	4b06      	ldr	r3, [pc, #24]	@ (800458c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004574:	623b      	str	r3, [r7, #32]
      break;
 8004576:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004578:	6a3b      	ldr	r3, [r7, #32]
}
 800457a:	4618      	mov	r0, r3
 800457c:	372c      	adds	r7, #44	@ 0x2c
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40023800 	.word	0x40023800
 800458c:	00f42400 	.word	0x00f42400
 8004590:	017d7840 	.word	0x017d7840

08004594 <HAL_RCC_DeInit>:
  *            - Peripheral clocks  
  *            - LSI, LSE and RTC clocks 
  * @retval None
  */
void HAL_RCC_DeInit(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
 8004598:	4b1c      	ldr	r3, [pc, #112]	@ (800460c <HAL_RCC_DeInit+0x78>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1b      	ldr	r2, [pc, #108]	@ (800460c <HAL_RCC_DeInit+0x78>)
 800459e:	f043 0381 	orr.w	r3, r3, #129	@ 0x81
 80045a2:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80045a4:	4b19      	ldr	r3, [pc, #100]	@ (800460c <HAL_RCC_DeInit+0x78>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	609a      	str	r2, [r3, #8]
  
  /* Reset HSEON, CSSON, PLLON, PLLI2S */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON| RCC_CR_PLLI2SON); 
 80045aa:	4b18      	ldr	r3, [pc, #96]	@ (800460c <HAL_RCC_DeInit+0x78>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a17      	ldr	r2, [pc, #92]	@ (800460c <HAL_RCC_DeInit+0x78>)
 80045b0:	f023 63a1 	bic.w	r3, r3, #84410368	@ 0x5080000
 80045b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 80045ba:	4b14      	ldr	r3, [pc, #80]	@ (800460c <HAL_RCC_DeInit+0x78>)
 80045bc:	2200      	movs	r2, #0
 80045be:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2); 
 80045c0:	4b12      	ldr	r3, [pc, #72]	@ (800460c <HAL_RCC_DeInit+0x78>)
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	4911      	ldr	r1, [pc, #68]	@ (800460c <HAL_RCC_DeInit+0x78>)
 80045c6:	4b12      	ldr	r3, [pc, #72]	@ (8004610 <HAL_RCC_DeInit+0x7c>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	604b      	str	r3, [r1, #4]
  
  /* Reset PLLI2SCFGR register */
  CLEAR_REG(RCC->PLLI2SCFGR);
 80045cc:	4b0f      	ldr	r3, [pc, #60]	@ (800460c <HAL_RCC_DeInit+0x78>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  SET_BIT(RCC->PLLI2SCFGR,  RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1);
 80045d4:	4b0d      	ldr	r3, [pc, #52]	@ (800460c <HAL_RCC_DeInit+0x78>)
 80045d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045da:	4a0c      	ldr	r2, [pc, #48]	@ (800460c <HAL_RCC_DeInit+0x78>)
 80045dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80045e0:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80045e4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  
  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80045e8:	4b08      	ldr	r3, [pc, #32]	@ (800460c <HAL_RCC_DeInit+0x78>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a07      	ldr	r2, [pc, #28]	@ (800460c <HAL_RCC_DeInit+0x78>)
 80045ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045f2:	6013      	str	r3, [r2, #0]
  
  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 80045f4:	4b05      	ldr	r3, [pc, #20]	@ (800460c <HAL_RCC_DeInit+0x78>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	60da      	str	r2, [r3, #12]
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80045fa:	4b06      	ldr	r3, [pc, #24]	@ (8004614 <HAL_RCC_DeInit+0x80>)
 80045fc:	4a06      	ldr	r2, [pc, #24]	@ (8004618 <HAL_RCC_DeInit+0x84>)
 80045fe:	601a      	str	r2, [r3, #0]
}
 8004600:	bf00      	nop
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40023800 	.word	0x40023800
 8004610:	04003010 	.word	0x04003010
 8004614:	20000010 	.word	0x20000010
 8004618:	00f42400 	.word	0x00f42400

0800461c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800461c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004654 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004620:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004622:	e003      	b.n	800462c <LoopCopyDataInit>

08004624 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004624:	4b0c      	ldr	r3, [pc, #48]	@ (8004658 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004626:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004628:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800462a:	3104      	adds	r1, #4

0800462c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800462c:	480b      	ldr	r0, [pc, #44]	@ (800465c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800462e:	4b0c      	ldr	r3, [pc, #48]	@ (8004660 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004630:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004632:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004634:	d3f6      	bcc.n	8004624 <CopyDataInit>
  ldr  r2, =_sbss
 8004636:	4a0b      	ldr	r2, [pc, #44]	@ (8004664 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004638:	e002      	b.n	8004640 <LoopFillZerobss>

0800463a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800463a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800463c:	f842 3b04 	str.w	r3, [r2], #4

08004640 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004640:	4b09      	ldr	r3, [pc, #36]	@ (8004668 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004642:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004644:	d3f9      	bcc.n	800463a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004646:	f000 f813 	bl	8004670 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800464a:	f000 f847 	bl	80046dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800464e:	f7fb fe71 	bl	8000334 <main>
  bx  lr    
 8004652:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004654:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004658:	080047d4 	.word	0x080047d4
  ldr  r0, =_sdata
 800465c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004660:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8004664:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8004668:	20001714 	.word	0x20001714

0800466c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800466c:	e7fe      	b.n	800466c <ADC_IRQHandler>
	...

08004670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004674:	4b16      	ldr	r3, [pc, #88]	@ (80046d0 <SystemInit+0x60>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800467a:	4a15      	ldr	r2, [pc, #84]	@ (80046d0 <SystemInit+0x60>)
 800467c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004684:	4b13      	ldr	r3, [pc, #76]	@ (80046d4 <SystemInit+0x64>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a12      	ldr	r2, [pc, #72]	@ (80046d4 <SystemInit+0x64>)
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004690:	4b10      	ldr	r3, [pc, #64]	@ (80046d4 <SystemInit+0x64>)
 8004692:	2200      	movs	r2, #0
 8004694:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004696:	4b0f      	ldr	r3, [pc, #60]	@ (80046d4 <SystemInit+0x64>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a0e      	ldr	r2, [pc, #56]	@ (80046d4 <SystemInit+0x64>)
 800469c:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 80046a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80046a6:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <SystemInit+0x64>)
 80046a8:	4a0b      	ldr	r2, [pc, #44]	@ (80046d8 <SystemInit+0x68>)
 80046aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80046ac:	4b09      	ldr	r3, [pc, #36]	@ (80046d4 <SystemInit+0x64>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a08      	ldr	r2, [pc, #32]	@ (80046d4 <SystemInit+0x64>)
 80046b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80046b8:	4b06      	ldr	r3, [pc, #24]	@ (80046d4 <SystemInit+0x64>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046be:	4b04      	ldr	r3, [pc, #16]	@ (80046d0 <SystemInit+0x60>)
 80046c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80046c4:	609a      	str	r2, [r3, #8]
#endif
}
 80046c6:	bf00      	nop
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	e000ed00 	.word	0xe000ed00
 80046d4:	40023800 	.word	0x40023800
 80046d8:	24003010 	.word	0x24003010

080046dc <__libc_init_array>:
 80046dc:	b570      	push	{r4, r5, r6, lr}
 80046de:	4d0d      	ldr	r5, [pc, #52]	@ (8004714 <__libc_init_array+0x38>)
 80046e0:	4c0d      	ldr	r4, [pc, #52]	@ (8004718 <__libc_init_array+0x3c>)
 80046e2:	1b64      	subs	r4, r4, r5
 80046e4:	10a4      	asrs	r4, r4, #2
 80046e6:	2600      	movs	r6, #0
 80046e8:	42a6      	cmp	r6, r4
 80046ea:	d109      	bne.n	8004700 <__libc_init_array+0x24>
 80046ec:	4d0b      	ldr	r5, [pc, #44]	@ (800471c <__libc_init_array+0x40>)
 80046ee:	4c0c      	ldr	r4, [pc, #48]	@ (8004720 <__libc_init_array+0x44>)
 80046f0:	f000 f818 	bl	8004724 <_init>
 80046f4:	1b64      	subs	r4, r4, r5
 80046f6:	10a4      	asrs	r4, r4, #2
 80046f8:	2600      	movs	r6, #0
 80046fa:	42a6      	cmp	r6, r4
 80046fc:	d105      	bne.n	800470a <__libc_init_array+0x2e>
 80046fe:	bd70      	pop	{r4, r5, r6, pc}
 8004700:	f855 3b04 	ldr.w	r3, [r5], #4
 8004704:	4798      	blx	r3
 8004706:	3601      	adds	r6, #1
 8004708:	e7ee      	b.n	80046e8 <__libc_init_array+0xc>
 800470a:	f855 3b04 	ldr.w	r3, [r5], #4
 800470e:	4798      	blx	r3
 8004710:	3601      	adds	r6, #1
 8004712:	e7f2      	b.n	80046fa <__libc_init_array+0x1e>
 8004714:	080047cc 	.word	0x080047cc
 8004718:	080047cc 	.word	0x080047cc
 800471c:	080047cc 	.word	0x080047cc
 8004720:	080047d0 	.word	0x080047d0

08004724 <_init>:
 8004724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004726:	bf00      	nop
 8004728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472a:	bc08      	pop	{r3}
 800472c:	469e      	mov	lr, r3
 800472e:	4770      	bx	lr

08004730 <_fini>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	bf00      	nop
 8004734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004736:	bc08      	pop	{r3}
 8004738:	469e      	mov	lr, r3
 800473a:	4770      	bx	lr
