
uC - project - novo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004340  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080044c8  080044c8  000054c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800455c  0800455c  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  0800455c  0800455c  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800455c  0800455c  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800455c  0800455c  0000555c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004560  08004560  00005560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004564  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006014  2**0
                  CONTENTS
 10 .bss          00001650  20000014  20000014  00006014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001664  20001664  00006014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e06  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eaf  00000000  00000000  00016e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  00019d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000763  00000000  00000000  0001a758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c2af  00000000  00000000  0001aebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f4ee  00000000  00000000  0003716a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a870e  00000000  00000000  00046658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eed66  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024cc  00000000  00000000  000eedac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000c9  00000000  00000000  000f1278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044b0 	.word	0x080044b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080044b0 	.word	0x080044b0

080001c8 <CPU_IntDis>:
@               void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 80001c8:	b672      	cpsid	i
        BX      LR
 80001ca:	4770      	bx	lr

080001cc <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 80001cc:	b662      	cpsie	i
        BX      LR
 80001ce:	4770      	bx	lr

080001d0 <CPU_SR_Save>:
@                       CPSIE i
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 80001d0:	b672      	cpsid	i
        PUSH   {R1}
 80001d2:	b402      	push	{r1}
        MRS     R1, BASEPRI
 80001d4:	f3ef 8111 	mrs	r1, BASEPRI
        MSR     BASEPRI, R0
 80001d8:	f380 8811 	msr	BASEPRI, r0
        DSB
 80001dc:	f3bf 8f4f 	dsb	sy
        ISB
 80001e0:	f3bf 8f6f 	isb	sy
        MOV     R0, R1
 80001e4:	4608      	mov	r0, r1
        POP    {R1}
 80001e6:	bc02      	pop	{r1}
        CPSIE   I
 80001e8:	b662      	cpsie	i
        BX      LR
 80001ea:	4770      	bx	lr

080001ec <CPU_SR_Restore>:


.thumb_func
CPU_SR_Restore:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 80001ec:	b672      	cpsid	i
        MSR     BASEPRI, R0
 80001ee:	f380 8811 	msr	BASEPRI, r0
        DSB
 80001f2:	f3bf 8f4f 	dsb	sy
        ISB
 80001f6:	f3bf 8f6f 	isb	sy
        CPSIE   I
 80001fa:	b662      	cpsie	i
        BX      LR
 80001fc:	4770      	bx	lr

080001fe <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 80001fe:	bf30      	wfi
        BX      LR
 8000200:	4770      	bx	lr

08000202 <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 8000202:	bf20      	wfe
        BX      LR
 8000204:	4770      	bx	lr

08000206 <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 8000206:	fab0 f080 	clz	r0, r0
        BX      LR
 800020a:	4770      	bx	lr

0800020c <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 800020c:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000210:	fab0 f080 	clz	r0, r0
        BX      LR
 8000214:	4770      	bx	lr

08000216 <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 8000216:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 800021a:	4770      	bx	lr

0800021c <OSStartHighRdy>:
@              h) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 800021c:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 800021e:	f64e 5022 	movw	r0, #60706	@ 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 8000222:	f2ce 0000 	movt	r0, #57344	@ 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 8000226:	f240 01ff 	movw	r1, #255	@ 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 800022a:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 800022e:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 8000230:	2000      	movs	r0, #0
    MSR     PSP, R0
 8000232:	f380 8809 	msr	PSP, r0

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 8000236:	f640 10a8 	movw	r0, #2472	@ 0x9a8
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 800023a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    LDR     R1, [R0]
 800023e:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 8000240:	f381 8808 	msr	MSP, r1

    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 8000244:	f000 fcfe 	bl	8000c44 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000248:	f241 2098 	movw	r0, #4760	@ 0x1298
    MOVT    R0, #:upper16:OSPrioCur
 800024c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000250:	f241 2199 	movw	r1, #4761	@ 0x1299
    MOVT    R1, #:upper16:OSPrioHighRdy
 8000254:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 8000258:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 800025a:	7002      	strb	r2, [r0, #0]

    MOVW    R0, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr = OSTCBHighRdyPtr;
 800025c:	f241 6058 	movw	r0, #5720	@ 0x1658
    MOVT    R0, #:upper16:OSTCBCurPtr
 8000260:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdyPtr
 8000264:	f241 615c 	movw	r1, #5724	@ 0x165c
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 8000268:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 800026c:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 800026e:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 8000270:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000272:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 8000276:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 800027a:	f040 0002 	orr.w	r0, r0, #2
    BIC     R0, R0, #4                                          @ Clear FPCA bit to indicate FPU is not in use
 800027e:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, R0
 8000282:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 8000286:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11, LR}                                  @ Restore r4-11, lr from new process stack
 800028a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 800028e:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000290:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 8000294:	bc06      	pop	{r1, r2}
    CPSIE    I
 8000296:	b662      	cpsie	i
    BX       R1
 8000298:	4708      	bx	r1

0800029a <OSCtxSw>:

.thumb_func
OSCtxSw:
.thumb_func
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800029a:	4825      	ldr	r0, [pc, #148]	@ (8000330 <OS_CPU_PendSVHandler+0x8c>)
    LDR     R1, =NVIC_PENDSVSET
 800029c:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
    STR     R1, [R0]
 80002a0:	6001      	str	r1, [r0, #0]
    BX      LR
 80002a2:	4770      	bx	lr

080002a4 <OS_CPU_PendSVHandler>:
@                  CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 80002a4:	b672      	cpsid	i
    MOVW    R2, #:lower16:OS_KA_BASEPRI_Boundary                @ Set BASEPRI priority level required for exception preemption
 80002a6:	f640 12ac 	movw	r2, #2476	@ 0x9ac
    MOVT    R2, #:upper16:OS_KA_BASEPRI_Boundary
 80002aa:	f2c2 0200 	movt	r2, #8192	@ 0x2000
    LDR     R1, [R2]
 80002ae:	6811      	ldr	r1, [r2, #0]
    MSR     BASEPRI, R1
 80002b0:	f381 8811 	msr	BASEPRI, r1
    DSB
 80002b4:	f3bf 8f4f 	dsb	sy
    ISB
 80002b8:	f3bf 8f6f 	isb	sy
    CPSIE   I
 80002bc:	b662      	cpsie	i

    MRS     R0, PSP                                             @ PSP is process stack pointer
 80002be:	f3ef 8009 	mrs	r0, PSP
#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
                                                                @ Push high vfp registers if the task is using the FPU context
    TST       R14, #0x10
 80002c2:	f01e 0f10 	tst.w	lr, #16
    IT        EQ
 80002c6:	bf08      	it	eq
    VSTMDBEQ  R0!, {S16-S31}
 80002c8:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
#endif

    STMFD   R0!, {R4-R11, R14}                                  @ Save remaining regs r4-11, R14 on process stack
 80002cc:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    MOVW    R5, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr->StkPtr = SP;
 80002d0:	f241 6558 	movw	r5, #5720	@ 0x1658
    MOVT    R5, #:upper16:OSTCBCurPtr
 80002d4:	f2c2 0500 	movt	r5, #8192	@ 0x2000
    LDR     R1, [R5]
 80002d8:	6829      	ldr	r1, [r5, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 80002da:	6008      	str	r0, [r1, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 80002dc:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 80002de:	f000 fcb1 	bl	8000c44 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 80002e2:	f241 2098 	movw	r0, #4760	@ 0x1298
    MOVT    R0, #:upper16:OSPrioCur
 80002e6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 80002ea:	f241 2199 	movw	r1, #4761	@ 0x1299
    MOVT    R1, #:upper16:OSPrioHighRdy
 80002ee:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 80002f2:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002f4:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdyPtr                       @ OSTCBCurPtr = OSTCBHighRdyPtr;
 80002f6:	f241 615c 	movw	r1, #5724	@ 0x165c
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 80002fa:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 80002fe:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 8000300:	602a      	str	r2, [r5, #0]

    ORR     LR,  R4, #0x04                                      @ Ensure exception return uses process stack
 8000302:	f044 0e04 	orr.w	lr, r4, #4
    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 8000306:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11, R14}                                  @ Restore r4-11, R14 from new process stack
 8000308:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
                                                                @ Pop the high vfp registers if the next task is using the FPU context
    TST       R14, #0x10
 800030c:	f01e 0f10 	tst.w	lr, #16
    IT        EQ
 8000310:	bf08      	it	eq
    VLDMIAEQ  R0!, {S16-S31}
 8000312:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
#endif

    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000316:	f380 8809 	msr	PSP, r0

    MOV     R2, #0                                              @ Restore BASEPRI priority level to 0
 800031a:	f04f 0200 	mov.w	r2, #0
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 800031e:	b672      	cpsid	i
    MSR     BASEPRI, R2
 8000320:	f382 8811 	msr	BASEPRI, r2
    DSB
 8000324:	f3bf 8f4f 	dsb	sy
    ISB
 8000328:	f3bf 8f6f 	isb	sy
    CPSIE   I
 800032c:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 800032e:	4770      	bx	lr
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000330:	e000ed04 	.word	0xe000ed04

08000334 <main>:
float negative_voltage_value = 0;
uint16_t positive_dac_value;
uint16_t negative_dac_value;

int main(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b08c      	sub	sp, #48	@ 0x30
 8000338:	af0a      	add	r7, sp, #40	@ 0x28
    OS_ERR  err;

    HAL_Init();
 800033a:	f003 f879 	bl	8003430 <HAL_Init>

    SystemClock_Config();
 800033e:	f000 f979 	bl	8000634 <SystemClock_Config>

    OSInit(&err);
 8000342:	1dbb      	adds	r3, r7, #6
 8000344:	4618      	mov	r0, r3
 8000346:	f000 fce1 	bl	8000d0c <OSInit>
                     (CPU_CHAR     *)"Initial Task",
                     (OS_TASK_PTR   )initialTask,
                     (void         *)0u,
                     (OS_PRIO       )INITIAL_TASK_PRIO,
                     (CPU_STK      *)&initialTaskStk[0u],
                     (CPU_STK_SIZE  )initialTaskStk[INITIAL_TASK_STK_SIZE / 10u],
 800034a:	4b10      	ldr	r3, [pc, #64]	@ (800038c <main+0x58>)
 800034c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    OSTaskCreate(    (OS_TCB       *)&initialTaskTCB,
 800034e:	1dba      	adds	r2, r7, #6
 8000350:	9208      	str	r2, [sp, #32]
 8000352:	2203      	movs	r2, #3
 8000354:	9207      	str	r2, [sp, #28]
 8000356:	2200      	movs	r2, #0
 8000358:	9206      	str	r2, [sp, #24]
 800035a:	2200      	movs	r2, #0
 800035c:	9205      	str	r2, [sp, #20]
 800035e:	2200      	movs	r2, #0
 8000360:	9204      	str	r2, [sp, #16]
 8000362:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000366:	9203      	str	r2, [sp, #12]
 8000368:	9302      	str	r3, [sp, #8]
 800036a:	4b08      	ldr	r3, [pc, #32]	@ (800038c <main+0x58>)
 800036c:	9301      	str	r3, [sp, #4]
 800036e:	2305      	movs	r3, #5
 8000370:	9300      	str	r3, [sp, #0]
 8000372:	2300      	movs	r3, #0
 8000374:	4a06      	ldr	r2, [pc, #24]	@ (8000390 <main+0x5c>)
 8000376:	4907      	ldr	r1, [pc, #28]	@ (8000394 <main+0x60>)
 8000378:	4807      	ldr	r0, [pc, #28]	@ (8000398 <main+0x64>)
 800037a:	f001 fed5 	bl	8002128 <OSTaskCreate>
                     (OS_TICK       )0u,
                     (void         *)0u,
                     (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                     (OS_ERR       *)&err);

    OSStart(&err);
 800037e:	1dbb      	adds	r3, r7, #6
 8000380:	4618      	mov	r0, r3
 8000382:	f000 fe6f 	bl	8001064 <OSStart>

    while (DEF_TRUE) {
 8000386:	bf00      	nop
 8000388:	e7fd      	b.n	8000386 <main+0x52>
 800038a:	bf00      	nop
 800038c:	200000d8 	.word	0x200000d8
 8000390:	0800039d 	.word	0x0800039d
 8000394:	080044c8 	.word	0x080044c8
 8000398:	20000030 	.word	0x20000030

0800039c <initialTask>:
    return 0;
}

/* Inicia os perifericos e a taks de ler os sensores*/
static void initialTask (void *p_arg)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b08e      	sub	sp, #56	@ 0x38
 80003a0:	af0a      	add	r7, sp, #40	@ 0x28
 80003a2:	6078      	str	r0, [r7, #4]
    OS_ERR  err;

    (void)p_arg;

    MX_GPIO_Init();
 80003a4:	f000 f9e4 	bl	8000770 <MX_GPIO_Init>
    MX_DAC_Init();
 80003a8:	f000 f9ae 	bl	8000708 <MX_DAC_Init>
    BSP_LED_Init(LED3);
 80003ac:	2001      	movs	r0, #1
 80003ae:	f000 faa9 	bl	8000904 <BSP_LED_Init>
    BSP_LED_Init(LED4);
 80003b2:	2000      	movs	r0, #0
 80003b4:	f000 faa6 	bl	8000904 <BSP_LED_Init>
    BSP_LED_Init(LED5);
 80003b8:	2002      	movs	r0, #2
 80003ba:	f000 faa3 	bl	8000904 <BSP_LED_Init>
    BSP_LED_Init(LED6);
 80003be:	2003      	movs	r0, #3
 80003c0:	f000 faa0 	bl	8000904 <BSP_LED_Init>
                     (CPU_CHAR     *)"Sensores Read and Transmit Task",
                     (OS_TASK_PTR   )sensoresRntTask,
                     (void         *)0u,
                     (OS_PRIO       )SENSORES_RNT_TASK_PRIO,
                     (CPU_STK      *)&sensoresRntTaskStk[0u],
                     (CPU_STK_SIZE  )sensoresRntTaskStk[SENSORES_RNT_TASK_STK_SIZE / 10u],
 80003c4:	4b13      	ldr	r3, [pc, #76]	@ (8000414 <initialTask+0x78>)
 80003c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    OSTaskCreate(    (OS_TCB       *)&sensoresRntTaskTCB,
 80003c8:	f107 020e 	add.w	r2, r7, #14
 80003cc:	9208      	str	r2, [sp, #32]
 80003ce:	2203      	movs	r2, #3
 80003d0:	9207      	str	r2, [sp, #28]
 80003d2:	2200      	movs	r2, #0
 80003d4:	9206      	str	r2, [sp, #24]
 80003d6:	2200      	movs	r2, #0
 80003d8:	9205      	str	r2, [sp, #20]
 80003da:	2200      	movs	r2, #0
 80003dc:	9204      	str	r2, [sp, #16]
 80003de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003e2:	9203      	str	r2, [sp, #12]
 80003e4:	9302      	str	r3, [sp, #8]
 80003e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000414 <initialTask+0x78>)
 80003e8:	9301      	str	r3, [sp, #4]
 80003ea:	2303      	movs	r3, #3
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	2300      	movs	r3, #0
 80003f0:	4a09      	ldr	r2, [pc, #36]	@ (8000418 <initialTask+0x7c>)
 80003f2:	490a      	ldr	r1, [pc, #40]	@ (800041c <initialTask+0x80>)
 80003f4:	480a      	ldr	r0, [pc, #40]	@ (8000420 <initialTask+0x84>)
 80003f6:	f001 fe97 	bl	8002128 <OSTaskCreate>
                     (void         *)0u,
                     (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                     (OS_ERR       *)&err);

    while (DEF_TRUE) {
        BSP_LED_Toggle(LED6);
 80003fa:	2003      	movs	r0, #3
 80003fc:	f000 fafa 	bl	80009f4 <BSP_LED_Toggle>
        OSTimeDly(500u, OS_OPT_TIME_PERIODIC , &err);
 8000400:	f107 030e 	add.w	r3, r7, #14
 8000404:	461a      	mov	r2, r3
 8000406:	2108      	movs	r1, #8
 8000408:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800040c:	f002 fc70 	bl	8002cf0 <OSTimeDly>
        BSP_LED_Toggle(LED6);
 8000410:	bf00      	nop
 8000412:	e7f2      	b.n	80003fa <initialTask+0x5e>
 8000414:	20000580 	.word	0x20000580
 8000418:	08000425 	.word	0x08000425
 800041c:	080044d8 	.word	0x080044d8
 8000420:	200004d8 	.word	0x200004d8

08000424 <sensoresRntTask>:
    }
}

/*sensores read and transmit task*/
static void sensoresRntTask (void *p_arg)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	OS_ERR  err;
	(void)p_arg;

	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800042c:	2100      	movs	r1, #0
 800042e:	480a      	ldr	r0, [pc, #40]	@ (8000458 <sensoresRntTask+0x34>)
 8000430:	f003 f94f 	bl	80036d2 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000434:	2110      	movs	r1, #16
 8000436:	4808      	ldr	r0, [pc, #32]	@ (8000458 <sensoresRntTask+0x34>)
 8000438:	f003 f94b 	bl	80036d2 <HAL_DAC_Start>
	while (DEF_TRUE) {
	    BSP_LED_Toggle(LED5);
 800043c:	2002      	movs	r0, #2
 800043e:	f000 fad9 	bl	80009f4 <BSP_LED_Toggle>
	    le_sensores();
 8000442:	f000 f80b 	bl	800045c <le_sensores>
	    OSTimeDly(10u, OS_OPT_TIME_PERIODIC , &err); //Máximo de 1ms de delay já que OS_CFG_TICK_RATE_HZ = 1000Hz
 8000446:	f107 030e 	add.w	r3, r7, #14
 800044a:	461a      	mov	r2, r3
 800044c:	2108      	movs	r1, #8
 800044e:	200a      	movs	r0, #10
 8000450:	f002 fc4e 	bl	8002cf0 <OSTimeDly>
	    BSP_LED_Toggle(LED5);
 8000454:	bf00      	nop
 8000456:	e7f1      	b.n	800043c <sensoresRntTask+0x18>
 8000458:	20000994 	.word	0x20000994

0800045c <le_sensores>:

	}
}

static void le_sensores (void){
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	sensor1_read = HAL_GPIO_ReadPin(Sensor1_GPIO_Port, Sensor1_Pin);
 8000460:	2180      	movs	r1, #128	@ 0x80
 8000462:	4864      	ldr	r0, [pc, #400]	@ (80005f4 <le_sensores+0x198>)
 8000464:	f003 fbaa 	bl	8003bbc <HAL_GPIO_ReadPin>
 8000468:	4603      	mov	r3, r0
 800046a:	461a      	mov	r2, r3
 800046c:	4b62      	ldr	r3, [pc, #392]	@ (80005f8 <le_sensores+0x19c>)
 800046e:	701a      	strb	r2, [r3, #0]
	sensor2_read = HAL_GPIO_ReadPin(Sensor2_GPIO_Port, Sensor2_Pin);
 8000470:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000474:	485f      	ldr	r0, [pc, #380]	@ (80005f4 <le_sensores+0x198>)
 8000476:	f003 fba1 	bl	8003bbc <HAL_GPIO_ReadPin>
 800047a:	4603      	mov	r3, r0
 800047c:	461a      	mov	r2, r3
 800047e:	4b5f      	ldr	r3, [pc, #380]	@ (80005fc <le_sensores+0x1a0>)
 8000480:	701a      	strb	r2, [r3, #0]
	sensor3_read = HAL_GPIO_ReadPin(Sensor3_GPIO_Port, Sensor3_Pin); /* SENSOR BASE */
 8000482:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000486:	485b      	ldr	r0, [pc, #364]	@ (80005f4 <le_sensores+0x198>)
 8000488:	f003 fb98 	bl	8003bbc <HAL_GPIO_ReadPin>
 800048c:	4603      	mov	r3, r0
 800048e:	461a      	mov	r2, r3
 8000490:	4b5b      	ldr	r3, [pc, #364]	@ (8000600 <le_sensores+0x1a4>)
 8000492:	701a      	strb	r2, [r3, #0]
	sensor4_read = HAL_GPIO_ReadPin(Sensor4_GPIO_Port, Sensor4_Pin);
 8000494:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000498:	4856      	ldr	r0, [pc, #344]	@ (80005f4 <le_sensores+0x198>)
 800049a:	f003 fb8f 	bl	8003bbc <HAL_GPIO_ReadPin>
 800049e:	4603      	mov	r3, r0
 80004a0:	461a      	mov	r2, r3
 80004a2:	4b58      	ldr	r3, [pc, #352]	@ (8000604 <le_sensores+0x1a8>)
 80004a4:	701a      	strb	r2, [r3, #0]
	sensor5_read = HAL_GPIO_ReadPin(Sensor5_GPIO_Port, Sensor5_Pin);
 80004a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004aa:	4852      	ldr	r0, [pc, #328]	@ (80005f4 <le_sensores+0x198>)
 80004ac:	f003 fb86 	bl	8003bbc <HAL_GPIO_ReadPin>
 80004b0:	4603      	mov	r3, r0
 80004b2:	461a      	mov	r2, r3
 80004b4:	4b54      	ldr	r3, [pc, #336]	@ (8000608 <le_sensores+0x1ac>)
 80004b6:	701a      	strb	r2, [r3, #0]
	sensor6_read = HAL_GPIO_ReadPin(Sensor6_GPIO_Port, Sensor6_Pin);
 80004b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004bc:	484d      	ldr	r0, [pc, #308]	@ (80005f4 <le_sensores+0x198>)
 80004be:	f003 fb7d 	bl	8003bbc <HAL_GPIO_ReadPin>
 80004c2:	4603      	mov	r3, r0
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b51      	ldr	r3, [pc, #324]	@ (800060c <le_sensores+0x1b0>)
 80004c8:	701a      	strb	r2, [r3, #0]
	sensor7_read = HAL_GPIO_ReadPin(Sensor7_GPIO_Port, Sensor7_Pin);
 80004ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004ce:	4849      	ldr	r0, [pc, #292]	@ (80005f4 <le_sensores+0x198>)
 80004d0:	f003 fb74 	bl	8003bbc <HAL_GPIO_ReadPin>
 80004d4:	4603      	mov	r3, r0
 80004d6:	461a      	mov	r2, r3
 80004d8:	4b4d      	ldr	r3, [pc, #308]	@ (8000610 <le_sensores+0x1b4>)
 80004da:	701a      	strb	r2, [r3, #0]

	if (sensor7_read) {
 80004dc:	4b4c      	ldr	r3, [pc, #304]	@ (8000610 <le_sensores+0x1b4>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d007      	beq.n	80004f4 <le_sensores+0x98>
		positive_voltage_value = 1*VOLTAGEM_MAX; //3
 80004e4:	4b4b      	ldr	r3, [pc, #300]	@ (8000614 <le_sensores+0x1b8>)
 80004e6:	4a4c      	ldr	r2, [pc, #304]	@ (8000618 <le_sensores+0x1bc>)
 80004e8:	601a      	str	r2, [r3, #0]
		negative_voltage_value = 0;
 80004ea:	4b4c      	ldr	r3, [pc, #304]	@ (800061c <le_sensores+0x1c0>)
 80004ec:	f04f 0200 	mov.w	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	e04a      	b.n	800058a <le_sensores+0x12e>
	}

	else if (sensor6_read) {
 80004f4:	4b45      	ldr	r3, [pc, #276]	@ (800060c <le_sensores+0x1b0>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d007      	beq.n	800050c <le_sensores+0xb0>
		positive_voltage_value = 0.75*VOLTAGEM_MAX; //2.25
 80004fc:	4b45      	ldr	r3, [pc, #276]	@ (8000614 <le_sensores+0x1b8>)
 80004fe:	4a48      	ldr	r2, [pc, #288]	@ (8000620 <le_sensores+0x1c4>)
 8000500:	601a      	str	r2, [r3, #0]
		negative_voltage_value = 0;
 8000502:	4b46      	ldr	r3, [pc, #280]	@ (800061c <le_sensores+0x1c0>)
 8000504:	f04f 0200 	mov.w	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	e03e      	b.n	800058a <le_sensores+0x12e>
	}

	else if (sensor5_read) {
 800050c:	4b3e      	ldr	r3, [pc, #248]	@ (8000608 <le_sensores+0x1ac>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d008      	beq.n	8000526 <le_sensores+0xca>
		positive_voltage_value = 0.5*VOLTAGEM_MAX; //1.5
 8000514:	4b3f      	ldr	r3, [pc, #252]	@ (8000614 <le_sensores+0x1b8>)
 8000516:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800051a:	601a      	str	r2, [r3, #0]
		negative_voltage_value = 0;
 800051c:	4b3f      	ldr	r3, [pc, #252]	@ (800061c <le_sensores+0x1c0>)
 800051e:	f04f 0200 	mov.w	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	e031      	b.n	800058a <le_sensores+0x12e>
	}

	else if (sensor4_read) {
 8000526:	4b37      	ldr	r3, [pc, #220]	@ (8000604 <le_sensores+0x1a8>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d008      	beq.n	8000540 <le_sensores+0xe4>
		positive_voltage_value = 0.25*VOLTAGEM_MAX; //0.75
 800052e:	4b39      	ldr	r3, [pc, #228]	@ (8000614 <le_sensores+0x1b8>)
 8000530:	f04f 527d 	mov.w	r2, #1061158912	@ 0x3f400000
 8000534:	601a      	str	r2, [r3, #0]
		negative_voltage_value = 0;
 8000536:	4b39      	ldr	r3, [pc, #228]	@ (800061c <le_sensores+0x1c0>)
 8000538:	f04f 0200 	mov.w	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	e024      	b.n	800058a <le_sensores+0x12e>
	}

	else if (sensor3_read) {
 8000540:	4b2f      	ldr	r3, [pc, #188]	@ (8000600 <le_sensores+0x1a4>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d008      	beq.n	800055a <le_sensores+0xfe>
		positive_voltage_value = 0;
 8000548:	4b32      	ldr	r3, [pc, #200]	@ (8000614 <le_sensores+0x1b8>)
 800054a:	f04f 0200 	mov.w	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
		negative_voltage_value = 0;
 8000550:	4b32      	ldr	r3, [pc, #200]	@ (800061c <le_sensores+0x1c0>)
 8000552:	f04f 0200 	mov.w	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	e017      	b.n	800058a <le_sensores+0x12e>
	}

	else if (sensor2_read) {
 800055a:	4b28      	ldr	r3, [pc, #160]	@ (80005fc <le_sensores+0x1a0>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d008      	beq.n	8000574 <le_sensores+0x118>
		positive_voltage_value = 0;
 8000562:	4b2c      	ldr	r3, [pc, #176]	@ (8000614 <le_sensores+0x1b8>)
 8000564:	f04f 0200 	mov.w	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
		negative_voltage_value = 0.5*VOLTAGEM_MAX; //-1.5
 800056a:	4b2c      	ldr	r3, [pc, #176]	@ (800061c <le_sensores+0x1c0>)
 800056c:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	e00a      	b.n	800058a <le_sensores+0x12e>
	}

	else if (sensor1_read) {
 8000574:	4b20      	ldr	r3, [pc, #128]	@ (80005f8 <le_sensores+0x19c>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d006      	beq.n	800058a <le_sensores+0x12e>
		positive_voltage_value = 0;
 800057c:	4b25      	ldr	r3, [pc, #148]	@ (8000614 <le_sensores+0x1b8>)
 800057e:	f04f 0200 	mov.w	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
		negative_voltage_value = 1*VOLTAGEM_MAX; //-3
 8000584:	4b25      	ldr	r3, [pc, #148]	@ (800061c <le_sensores+0x1c0>)
 8000586:	4a24      	ldr	r2, [pc, #144]	@ (8000618 <le_sensores+0x1bc>)
 8000588:	601a      	str	r2, [r3, #0]
	}

	positive_dac_value = (uint16_t)((positive_voltage_value*4095)/VOLTAGEM_MAX);
 800058a:	4b22      	ldr	r3, [pc, #136]	@ (8000614 <le_sensores+0x1b8>)
 800058c:	edd3 7a00 	vldr	s15, [r3]
 8000590:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8000624 <le_sensores+0x1c8>
 8000594:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000598:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800059c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005a4:	ee17 3a90 	vmov	r3, s15
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000628 <le_sensores+0x1cc>)
 80005ac:	801a      	strh	r2, [r3, #0]
	negative_dac_value = (uint16_t)((negative_voltage_value*4095)/VOLTAGEM_MAX);
 80005ae:	4b1b      	ldr	r3, [pc, #108]	@ (800061c <le_sensores+0x1c0>)
 80005b0:	edd3 7a00 	vldr	s15, [r3]
 80005b4:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000624 <le_sensores+0x1c8>
 80005b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005bc:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80005c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005c8:	ee17 3a90 	vmov	r3, s15
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4b17      	ldr	r3, [pc, #92]	@ (800062c <le_sensores+0x1d0>)
 80005d0:	801a      	strh	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, negative_dac_value); //CHANNEL1 - PA4
 80005d2:	4b16      	ldr	r3, [pc, #88]	@ (800062c <le_sensores+0x1d0>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	4815      	ldr	r0, [pc, #84]	@ (8000630 <le_sensores+0x1d4>)
 80005dc:	f003 f92c 	bl	8003838 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, positive_dac_value); //CHANNEL2 - PA5
 80005e0:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <le_sensores+0x1cc>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	2200      	movs	r2, #0
 80005e6:	2110      	movs	r1, #16
 80005e8:	4811      	ldr	r0, [pc, #68]	@ (8000630 <le_sensores+0x1d4>)
 80005ea:	f003 f925 	bl	8003838 <HAL_DAC_SetValue>

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000
 80005f8:	20000980 	.word	0x20000980
 80005fc:	20000981 	.word	0x20000981
 8000600:	20000982 	.word	0x20000982
 8000604:	20000983 	.word	0x20000983
 8000608:	20000984 	.word	0x20000984
 800060c:	20000985 	.word	0x20000985
 8000610:	20000986 	.word	0x20000986
 8000614:	20000988 	.word	0x20000988
 8000618:	40400000 	.word	0x40400000
 800061c:	2000098c 	.word	0x2000098c
 8000620:	40100000 	.word	0x40100000
 8000624:	457ff000 	.word	0x457ff000
 8000628:	20000990 	.word	0x20000990
 800062c:	20000992 	.word	0x20000992
 8000630:	20000994 	.word	0x20000994

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	@ 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	@ 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f003 ff08 	bl	8004458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b28      	ldr	r3, [pc, #160]	@ (8000700 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	4a27      	ldr	r2, [pc, #156]	@ (8000700 <SystemClock_Config+0xcc>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	@ 0x40
 8000668:	4b25      	ldr	r3, [pc, #148]	@ (8000700 <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a21      	ldr	r2, [pc, #132]	@ (8000704 <SystemClock_Config+0xd0>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a2:	2308      	movs	r3, #8
 80006a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a6:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b0:	2307      	movs	r3, #7
 80006b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f003 fac3 	bl	8003c44 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c4:	f000 f8ac 	bl	8000820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2105      	movs	r1, #5
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 fcc2 	bl	8004070 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f2:	f000 f895 	bl	8000820 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	@ 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
void MX_DAC_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000716:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_DAC_Init+0x60>)
 8000718:	4a14      	ldr	r2, [pc, #80]	@ (800076c <MX_DAC_Init+0x64>)
 800071a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800071c:	4812      	ldr	r0, [pc, #72]	@ (8000768 <MX_DAC_Init+0x60>)
 800071e:	f002 ffb6 	bl	800368e <HAL_DAC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000728:	f000 f87a 	bl	8000820 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800072c:	2300      	movs	r3, #0
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	2200      	movs	r2, #0
 8000738:	4619      	mov	r1, r3
 800073a:	480b      	ldr	r0, [pc, #44]	@ (8000768 <MX_DAC_Init+0x60>)
 800073c:	f003 f82f 	bl	800379e <HAL_DAC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000746:	f000 f86b 	bl	8000820 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	2210      	movs	r2, #16
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_DAC_Init+0x60>)
 8000752:	f003 f824 	bl	800379e <HAL_DAC_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 800075c:	f000 f860 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000994 	.word	0x20000994
 800076c:	40007400 	.word	0x40007400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	@ 0x28
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b23      	ldr	r3, [pc, #140]	@ (8000818 <MX_GPIO_Init+0xa8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a22      	ldr	r2, [pc, #136]	@ (8000818 <MX_GPIO_Init+0xa8>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b20      	ldr	r3, [pc, #128]	@ (8000818 <MX_GPIO_Init+0xa8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <MX_GPIO_Init+0xa8>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000818 <MX_GPIO_Init+0xa8>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_GPIO_Init+0xa8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <MX_GPIO_Init+0xa8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a14      	ldr	r2, [pc, #80]	@ (8000818 <MX_GPIO_Init+0xa8>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <MX_GPIO_Init+0xa8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_GPIO_Init+0xa8>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000818 <MX_GPIO_Init+0xa8>)
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <MX_GPIO_Init+0xa8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0310 	and.w	r3, r3, #16
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : Sensor1_Pin Sensor2_Pin Sensor3_Pin Sensor4_Pin
                           Sensor5_Pin Sensor6_Pin Sensor7_Pin */
  GPIO_InitStruct.Pin = Sensor1_Pin|Sensor2_Pin|Sensor3_Pin|Sensor4_Pin
 80007f6:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 80007fa:	617b      	str	r3, [r7, #20]
                          |Sensor5_Pin|Sensor6_Pin|Sensor7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000800:	2302      	movs	r3, #2
 8000802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4804      	ldr	r0, [pc, #16]	@ (800081c <MX_GPIO_Init+0xac>)
 800080c:	f003 f83a 	bl	8003884 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	@ 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40021000 	.word	0x40021000

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <Error_Handler+0x8>

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083a:	4a0f      	ldr	r2, [pc, #60]	@ (8000878 <HAL_MspInit+0x4c>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000840:	6453      	str	r3, [r2, #68]	@ 0x44
 8000842:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000856:	4a08      	ldr	r2, [pc, #32]	@ (8000878 <HAL_MspInit+0x4c>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	@ 0x40
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800086a:	2007      	movs	r0, #7
 800086c:	f002 fedc 	bl	8003628 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40023800 	.word	0x40023800

0800087c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	@ 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a17      	ldr	r2, [pc, #92]	@ (80008f8 <HAL_DAC_MspInit+0x7c>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d127      	bne.n	80008ee <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <HAL_DAC_MspInit+0x80>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	4a15      	ldr	r2, [pc, #84]	@ (80008fc <HAL_DAC_MspInit+0x80>)
 80008a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80008ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ae:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <HAL_DAC_MspInit+0x80>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <HAL_DAC_MspInit+0x80>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <HAL_DAC_MspInit+0x80>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <HAL_DAC_MspInit+0x80>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = DAC_NEG_Pin|DAC_POSI_Pin;
 80008d6:	2330      	movs	r3, #48	@ 0x30
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008da:	2303      	movs	r3, #3
 80008dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	@ (8000900 <HAL_DAC_MspInit+0x84>)
 80008ea:	f002 ffcb 	bl	8003884 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 80008ee:	bf00      	nop
 80008f0:	3728      	adds	r7, #40	@ 0x28
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40007400 	.word	0x40007400
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000

08000904 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	@ 0x30
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d10e      	bne.n	8000932 <BSP_LED_Init+0x2e>
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]
 8000918:	4b33      	ldr	r3, [pc, #204]	@ (80009e8 <BSP_LED_Init+0xe4>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091c:	4a32      	ldr	r2, [pc, #200]	@ (80009e8 <BSP_LED_Init+0xe4>)
 800091e:	f043 0308 	orr.w	r3, r3, #8
 8000922:	6313      	str	r3, [r2, #48]	@ 0x30
 8000924:	4b30      	ldr	r3, [pc, #192]	@ (80009e8 <BSP_LED_Init+0xe4>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000928:	f003 0308 	and.w	r3, r3, #8
 800092c:	61bb      	str	r3, [r7, #24]
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	e034      	b.n	800099c <BSP_LED_Init+0x98>
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d10e      	bne.n	8000956 <BSP_LED_Init+0x52>
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	4b2a      	ldr	r3, [pc, #168]	@ (80009e8 <BSP_LED_Init+0xe4>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000940:	4a29      	ldr	r2, [pc, #164]	@ (80009e8 <BSP_LED_Init+0xe4>)
 8000942:	f043 0308 	orr.w	r3, r3, #8
 8000946:	6313      	str	r3, [r2, #48]	@ 0x30
 8000948:	4b27      	ldr	r3, [pc, #156]	@ (80009e8 <BSP_LED_Init+0xe4>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094c:	f003 0308 	and.w	r3, r3, #8
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	e022      	b.n	800099c <BSP_LED_Init+0x98>
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2b02      	cmp	r3, #2
 800095a:	d10e      	bne.n	800097a <BSP_LED_Init+0x76>
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	4b21      	ldr	r3, [pc, #132]	@ (80009e8 <BSP_LED_Init+0xe4>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000964:	4a20      	ldr	r2, [pc, #128]	@ (80009e8 <BSP_LED_Init+0xe4>)
 8000966:	f043 0308 	orr.w	r3, r3, #8
 800096a:	6313      	str	r3, [r2, #48]	@ 0x30
 800096c:	4b1e      	ldr	r3, [pc, #120]	@ (80009e8 <BSP_LED_Init+0xe4>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000970:	f003 0308 	and.w	r3, r3, #8
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	e010      	b.n	800099c <BSP_LED_Init+0x98>
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b03      	cmp	r3, #3
 800097e:	d10d      	bne.n	800099c <BSP_LED_Init+0x98>
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <BSP_LED_Init+0xe4>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000988:	4a17      	ldr	r2, [pc, #92]	@ (80009e8 <BSP_LED_Init+0xe4>)
 800098a:	f043 0308 	orr.w	r3, r3, #8
 800098e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000990:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <BSP_LED_Init+0xe4>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000994:	f003 0308 	and.w	r3, r3, #8
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	4a13      	ldr	r2, [pc, #76]	@ (80009ec <BSP_LED_Init+0xe8>)
 80009a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80009ae:	2302      	movs	r3, #2
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4a0e      	ldr	r2, [pc, #56]	@ (80009f0 <BSP_LED_Init+0xec>)
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	f107 021c 	add.w	r2, r7, #28
 80009be:	4611      	mov	r1, r2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 ff5f 	bl	8003884 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	4a09      	ldr	r2, [pc, #36]	@ (80009f0 <BSP_LED_Init+0xec>)
 80009ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	4a06      	ldr	r2, [pc, #24]	@ (80009ec <BSP_LED_Init+0xe8>)
 80009d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009d6:	2200      	movs	r2, #0
 80009d8:	4619      	mov	r1, r3
 80009da:	f003 f907 	bl	8003bec <HAL_GPIO_WritePin>
}
 80009de:	bf00      	nop
 80009e0:	3730      	adds	r7, #48	@ 0x30
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	080044f8 	.word	0x080044f8
 80009f0:	20000000 	.word	0x20000000

080009f4 <BSP_LED_Toggle>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	4a07      	ldr	r2, [pc, #28]	@ (8000a20 <BSP_LED_Toggle+0x2c>)
 8000a02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	4906      	ldr	r1, [pc, #24]	@ (8000a24 <BSP_LED_Toggle+0x30>)
 8000a0a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4610      	mov	r0, r2
 8000a12:	f003 f904 	bl	8003c1e <HAL_GPIO_TogglePin>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000000 	.word	0x20000000
 8000a24:	080044f8 	.word	0x080044f8

08000a28 <OSIdleTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSIdleTaskHook (void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppIdleTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8000a2c:	4b04      	ldr	r3, [pc, #16]	@ (8000a40 <OSIdleTaskHook+0x18>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <OSIdleTaskHook+0x12>
        (*OS_AppIdleTaskHookPtr)();
 8000a34:	4b02      	ldr	r3, [pc, #8]	@ (8000a40 <OSIdleTaskHook+0x18>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4798      	blx	r3
    }
#endif
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200011cc 	.word	0x200011cc

08000a44 <OSInitHook>:
*                 b) Set bits ASPEN and LSPEN in FPCCR register.
*********************************************************************************************************
*/

void  OSInitHook (void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
#if (OS_CPU_ARM_FP_EN > 0u)
    CPU_INT32U   reg_val;
#endif
                                                                /* 8-byte align the ISR stack.                          */
    OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize);
 8000a4a:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <OSInitHook+0x4c>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <OSInitHook+0x50>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	4413      	add	r3, r2
 8000a56:	4a10      	ldr	r2, [pc, #64]	@ (8000a98 <OSInitHook+0x54>)
 8000a58:	6013      	str	r3, [r2, #0]
    OS_CPU_ExceptStkBase = (CPU_STK *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <OSInitHook+0x54>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f023 0307 	bic.w	r3, r3, #7
 8000a62:	461a      	mov	r2, r3
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <OSInitHook+0x54>)
 8000a66:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    reg_val = CPU_REG_FP_FPCCR;                                 /* Check the floating point mode.                       */
 8000a68:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <OSInitHook+0x58>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	607b      	str	r3, [r7, #4]
    if ((reg_val & CPU_REG_FPCCR_LAZY_STK) != CPU_REG_FPCCR_LAZY_STK) {
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8000a74:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000a78:	d001      	beq.n	8000a7e <OSInitHook+0x3a>
        while (1u) {                                            /* See Note (1).                                        */
 8000a7a:	bf00      	nop
 8000a7c:	e7fd      	b.n	8000a7a <OSInitHook+0x36>
            ;
        }
    }
#endif
                                                                /* Set BASEPRI boundary from the configuration.         */
    OS_KA_BASEPRI_Boundary = (CPU_INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 8000a7e:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <OSInitHook+0x5c>)
 8000a80:	2240      	movs	r2, #64	@ 0x40
 8000a82:	601a      	str	r2, [r3, #0]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	0800450c 	.word	0x0800450c
 8000a94:	08004510 	.word	0x08004510
 8000a98:	200009a8 	.word	0x200009a8
 8000a9c:	e000ef34 	.word	0xe000ef34
 8000aa0:	200009ac 	.word	0x200009ac

08000aa4 <OSStatTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSStatTaskHook (void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppStatTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8000aa8:	4b04      	ldr	r3, [pc, #16]	@ (8000abc <OSStatTaskHook+0x18>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d002      	beq.n	8000ab6 <OSStatTaskHook+0x12>
        (*OS_AppStatTaskHookPtr)();
 8000ab0:	4b02      	ldr	r3, [pc, #8]	@ (8000abc <OSStatTaskHook+0x18>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4798      	blx	r3
    }
#endif
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200011d0 	.word	0x200011d0

08000ac0 <OSTaskCreateHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskCreateHook (OS_TCB  *p_tcb)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskCreateHookPtr != (OS_APP_HOOK_TCB)0) {
 8000ac8:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <OSTaskCreateHook+0x20>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d003      	beq.n	8000ad8 <OSTaskCreateHook+0x18>
        (*OS_AppTaskCreateHookPtr)(p_tcb);
 8000ad0:	4b03      	ldr	r3, [pc, #12]	@ (8000ae0 <OSTaskCreateHook+0x20>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                                /* Prevent compiler warning                             */
#endif
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	200011c0 	.word	0x200011c0

08000ae4 <OSTaskDelHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskDelHook (OS_TCB  *p_tcb)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskDelHookPtr != (OS_APP_HOOK_TCB)0) {
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <OSTaskDelHook+0x20>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <OSTaskDelHook+0x18>
        (*OS_AppTaskDelHookPtr)(p_tcb);
 8000af4:	4b03      	ldr	r3, [pc, #12]	@ (8000b04 <OSTaskDelHook+0x20>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                                /* Prevent compiler warning                             */
#endif
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200011c4 	.word	0x200011c4

08000b08 <OSTaskReturnHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskReturnHook (OS_TCB  *p_tcb)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskReturnHookPtr != (OS_APP_HOOK_TCB)0) {
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <OSTaskReturnHook+0x20>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d003      	beq.n	8000b20 <OSTaskReturnHook+0x18>
        (*OS_AppTaskReturnHookPtr)(p_tcb);
 8000b18:	4b03      	ldr	r3, [pc, #12]	@ (8000b28 <OSTaskReturnHook+0x20>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                                /* Prevent compiler warning                             */
#endif
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200011c8 	.word	0x200011c8

08000b2c <OSTaskStkInit>:
                         void          *p_arg,
                         CPU_STK       *p_stk_base,
                         CPU_STK       *p_stk_limit,
                         CPU_STK_SIZE   stk_size,
                         OS_OPT         opt)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b087      	sub	sp, #28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	603b      	str	r3, [r7, #0]
    CPU_STK    *p_stk;


    (void)opt;                                                  /* 'opt' is not used, prevent warning                   */

    p_stk = &p_stk_base[stk_size];                              /* Load stack pointer                                   */
 8000b3a:	6a3b      	ldr	r3, [r7, #32]
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                          */
    p_stk = (CPU_STK *)((CPU_STK)(p_stk) & 0xFFFFFFF8u);
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	f023 0307 	bic.w	r3, r3, #7
 8000b4a:	617b      	str	r3, [r7, #20]
                                                                /* Registers stacked as if auto-saved on exception      */
    *(--p_stk) = (CPU_STK)0x01000000u;                          /* xPSR                                                 */
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000b58:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)p_task;                               /* Entry Point                                          */
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3b04      	subs	r3, #4
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)OS_TaskReturn;                        /* R14 (LR)                                             */
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3b04      	subs	r3, #4
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	4a34      	ldr	r2, [pc, #208]	@ (8000c40 <OSTaskStkInit+0x114>)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x12121212u;                          /* R12                                                  */
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3b04      	subs	r3, #4
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8000b7e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x03030303u;                          /* R3                                                   */
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	3b04      	subs	r3, #4
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8000b8c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x02020202u;                          /* R2                                                   */
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	3b04      	subs	r3, #4
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8000b9a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)p_stk_limit;                          /* R1                                                   */
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)p_arg;                                /* R0 : argument                                        */
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	3b04      	subs	r3, #4
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0xFFFFFFFDuL;                         /* R14: EXEC_RETURN; See Note 5                         */
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	f06f 0202 	mvn.w	r2, #2
 8000bc0:	601a      	str	r2, [r3, #0]
                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (CPU_STK)0x11111111uL;                         /* R11                                                  */
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3b04      	subs	r3, #4
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8000bce:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x10101010uL;                         /* R10                                                  */
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8000bdc:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x09090909uL;                         /* R9                                                   */
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3b04      	subs	r3, #4
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8000bea:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x08080808uL;                         /* R8                                                   */
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 8000bf8:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x07070707uL;                         /* R7                                                   */
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3b04      	subs	r3, #4
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8000c06:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x06060606uL;                         /* R6                                                   */
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	3b04      	subs	r3, #4
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8000c14:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x05050505uL;                         /* R5                                                   */
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	3b04      	subs	r3, #4
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8000c22:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (CPU_STK)0x04040404uL;                         /* R4                                                   */
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	3b04      	subs	r3, #4
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8000c30:	601a      	str	r2, [r3, #0]

    return (p_stk);
 8000c32:	697b      	ldr	r3, [r7, #20]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	371c      	adds	r7, #28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	080026ed 	.word	0x080026ed

08000c44 <OSTaskSwHook>:
*                 to the task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/

void  OSTaskSwHook (void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    CPU_BOOLEAN  stk_status;
#endif

#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskSwHookPtr != (OS_APP_HOOK_VOID)0) {
 8000c4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <OSTaskSwHook+0x64>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <OSTaskSwHook+0x14>
        (*OS_AppTaskSwHookPtr)();
 8000c52:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <OSTaskSwHook+0x64>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4798      	blx	r3
#endif

    OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdyPtr);

#if OS_CFG_TASK_PROFILE_EN > 0u
    ts = OS_TS_GET();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	607b      	str	r3, [r7, #4]
    if (OSTCBCurPtr != OSTCBHighRdyPtr) {
 8000c5c:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <OSTaskSwHook+0x68>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <OSTaskSwHook+0x6c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d016      	beq.n	8000c96 <OSTaskSwHook+0x52>
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
 8000c68:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <OSTaskSwHook+0x68>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000c70:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <OSTaskSwHook+0x68>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	1a8a      	subs	r2, r1, r2
 8000c78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <OSTaskSwHook+0x68>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8000c84:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <OSTaskSwHook+0x68>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000c8c:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <OSTaskSwHook+0x68>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	440a      	add	r2, r1
 8000c92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    OSTCBHighRdyPtr->CyclesStart = ts;
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <OSTaskSwHook+0x6c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    stk_status = OSTaskStkRedzoneChk((OS_TCB *)0u);
    if (stk_status != OS_TRUE) {
        OSRedzoneHitHook(OSTCBCurPtr);
    }
#endif
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200011d4 	.word	0x200011d4
 8000cac:	20001658 	.word	0x20001658
 8000cb0:	2000165c 	.word	0x2000165c

08000cb4 <OSTimeTickHook>:
* Note(s)    : 1) This function is assumed to be called from the Tick ISR.
*********************************************************************************************************
*/

void  OSTimeTickHook (void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTimeTickHookPtr != (OS_APP_HOOK_VOID)0) {
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <OSTimeTickHook+0x18>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d002      	beq.n	8000cc6 <OSTimeTickHook+0x12>
        (*OS_AppTimeTickHookPtr)();
 8000cc0:	4b02      	ldr	r3, [pc, #8]	@ (8000ccc <OSTimeTickHook+0x18>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4798      	blx	r3
    }
#endif
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200011d8 	.word	0x200011d8

08000cd0 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler  (void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 8000cda:	2040      	movs	r0, #64	@ 0x40
 8000cdc:	f7ff fa78 	bl	80001d0 <CPU_SR_Save>
 8000ce0:	6078      	str	r0, [r7, #4]
    OSIntEnter();                                               /* Tell uC/OS-III that we are starting an ISR           */
 8000ce2:	f000 f8df 	bl	8000ea4 <OSIntEnter>
    CPU_CRITICAL_EXIT();
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff fa80 	bl	80001ec <CPU_SR_Restore>

    OSTimeTick();                                               /* Call uC/OS-III's OSTimeTick()                        */
 8000cec:	f002 f868 	bl	8002dc0 <OSTimeTick>

    OSIntExit();                                                /* Tell uC/OS-III that we are leaving the ISR           */
 8000cf0:	f000 f8f4 	bl	8000edc <OSIntExit>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <OSCfg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OSCfg_Init (void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
    (void)OSCfg_TmrTaskStkBasePtr;
    (void)OSCfg_TmrTaskStkLimit;
    (void)OSCfg_TmrTaskStkSize;
    (void)OSCfg_TmrTaskStkSizeRAM;
#endif
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <OSInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSInit (OS_ERR  *p_err)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSInitHook();                                               /* Call port specific initialization code               */
 8000d14:	f7ff fe96 	bl	8000a44 <OSInitHook>

    OSIntNestingCtr       =           0u;                       /* Clear the interrupt nesting counter                  */
 8000d18:	4b4c      	ldr	r3, [pc, #304]	@ (8000e4c <OSInit+0x140>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]

    OSRunning             =  OS_STATE_OS_STOPPED;               /* Indicate that multitasking has not started           */
 8000d1e:	4b4c      	ldr	r3, [pc, #304]	@ (8000e50 <OSInit+0x144>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]

    OSSchedLockNestingCtr =           0u;                       /* Clear the scheduling lock counter                    */
 8000d24:	4b4b      	ldr	r3, [pc, #300]	@ (8000e54 <OSInit+0x148>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]

    OSTCBCurPtr           = (OS_TCB *)0;                        /* Initialize OS_TCB pointers to a known state          */
 8000d2a:	4b4b      	ldr	r3, [pc, #300]	@ (8000e58 <OSInit+0x14c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
    OSTCBHighRdyPtr       = (OS_TCB *)0;
 8000d30:	4b4a      	ldr	r3, [pc, #296]	@ (8000e5c <OSInit+0x150>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]

    OSPrioCur             =           0u;                       /* Initialize priority variables to a known state       */
 8000d36:	4b4a      	ldr	r3, [pc, #296]	@ (8000e60 <OSInit+0x154>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy         =           0u;
 8000d3c:	4b49      	ldr	r3, [pc, #292]	@ (8000e64 <OSInit+0x158>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;
#endif

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
    OSSchedRoundRobinEn             = OS_FALSE;
 8000d42:	4b49      	ldr	r3, [pc, #292]	@ (8000e68 <OSInit+0x15c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
    OSSchedRoundRobinDfltTimeQuanta = OSCfg_TickRate_Hz / 10u;
 8000d48:	4b48      	ldr	r3, [pc, #288]	@ (8000e6c <OSInit+0x160>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a48      	ldr	r2, [pc, #288]	@ (8000e70 <OSInit+0x164>)
 8000d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4a47      	ldr	r2, [pc, #284]	@ (8000e74 <OSInit+0x168>)
 8000d56:	6013      	str	r3, [r2, #0]
#endif

#if (OS_CFG_ISR_STK_SIZE > 0u)
    p_stk = OSCfg_ISRStkBasePtr;                                /* Clear exception stack for stack checking.            */
 8000d58:	4b47      	ldr	r3, [pc, #284]	@ (8000e78 <OSInit+0x16c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	60fb      	str	r3, [r7, #12]
    if (p_stk != (CPU_STK *)0) {
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d00f      	beq.n	8000d84 <OSInit+0x78>
        size  = OSCfg_ISRStkSize;
 8000d64:	4b45      	ldr	r3, [pc, #276]	@ (8000e7c <OSInit+0x170>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60bb      	str	r3, [r7, #8]
        while (size > 0u) {
 8000d6a:	e008      	b.n	8000d7e <OSInit+0x72>
            size--;
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
           *p_stk = 0u;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
            p_stk++;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	60fb      	str	r3, [r7, #12]
        while (size > 0u) {
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1f3      	bne.n	8000d6c <OSInit+0x60>

#if (OS_CFG_APP_HOOKS_EN > 0u)                                  /* Clear application hook pointers                      */
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    OS_AppRedzoneHitHookPtr = (OS_APP_HOOK_TCB )0;
#endif
    OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB )0;
 8000d84:	4b3e      	ldr	r3, [pc, #248]	@ (8000e80 <OSInit+0x174>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
    OS_AppTaskDelHookPtr    = (OS_APP_HOOK_TCB )0;
 8000d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e84 <OSInit+0x178>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
    OS_AppTaskReturnHookPtr = (OS_APP_HOOK_TCB )0;
 8000d90:	4b3d      	ldr	r3, [pc, #244]	@ (8000e88 <OSInit+0x17c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]

    OS_AppIdleTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8000d96:	4b3d      	ldr	r3, [pc, #244]	@ (8000e8c <OSInit+0x180>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
    OS_AppStatTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8000d9c:	4b3c      	ldr	r3, [pc, #240]	@ (8000e90 <OSInit+0x184>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
    OS_AppTaskSwHookPtr     = (OS_APP_HOOK_VOID)0;
 8000da2:	4b3c      	ldr	r3, [pc, #240]	@ (8000e94 <OSInit+0x188>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
    OS_AppTimeTickHookPtr   = (OS_APP_HOOK_VOID)0;
 8000da8:	4b3b      	ldr	r3, [pc, #236]	@ (8000e98 <OSInit+0x18c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
#endif

#if (OS_CFG_TASK_REG_TBL_SIZE > 0u)
    OSTaskRegNextAvailID = 0u;
 8000dae:	4b3b      	ldr	r3, [pc, #236]	@ (8000e9c <OSInit+0x190>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
#endif

    OS_PrioInit();                                              /* Initialize the priority bitmap table                 */
 8000db4:	f000 ffb4 	bl	8001d20 <OS_PrioInit>

    OS_RdyListInit();                                           /* Initialize the Ready List                            */
 8000db8:	f000 fb6c 	bl	8001494 <OS_RdyListInit>
    OSFlagQty        =                0u;
#endif
#endif

#if (OS_CFG_MEM_EN > 0u)                                        /* Initialize the Memory Manager module                 */
    OS_MemInit(p_err);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 fd27 	bl	8001810 <OS_MemInit>
    if (*p_err != OS_ERR_NONE) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d12f      	bne.n	8000e2a <OSInit+0x11e>
    }
#endif


#if (OS_MSG_EN > 0u)                                            /* Initialize the free list of OS_MSGs                  */
    OS_MsgPoolInit(p_err);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 fd2e 	bl	800182c <OS_MsgPoolInit>
    if (*p_err != OS_ERR_NONE) {
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d12a      	bne.n	8000e2e <OSInit+0x122>
        return;
    }
#endif


    OS_TaskInit(p_err);                                         /* Initialize the task manager                          */
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f001 fbc1 	bl	8002560 <OS_TaskInit>
    if (*p_err != OS_ERR_NONE) {
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d125      	bne.n	8000e32 <OSInit+0x126>
        return;
    }


#if (OS_CFG_TASK_IDLE_EN > 0u)
    OS_IdleTaskInit(p_err);                                     /* Initialize the Idle Task                             */
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f000 f9b2 	bl	8001150 <OS_IdleTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d120      	bne.n	8000e36 <OSInit+0x12a>
    }
#endif


#if (OS_CFG_TICK_EN > 0u)
    OS_TickInit(p_err);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f001 fd2b 	bl	8002850 <OS_TickInit>
    if (*p_err != OS_ERR_NONE) {
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d11b      	bne.n	8000e3a <OSInit+0x12e>
    }
#endif


#if (OS_CFG_STAT_TASK_EN > 0u)                                  /* Initialize the Statistic Task                        */
    OS_StatTaskInit(p_err);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f001 f91e 	bl	8002044 <OS_StatTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d116      	bne.n	8000e3e <OSInit+0x132>
    }
#endif


#if (OS_CFG_TMR_EN > 0u)                                        /* Initialize the Timer Manager module                  */
    OS_TmrInit(p_err);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f001 fff1 	bl	8002df8 <OS_TmrInit>
    if (*p_err != OS_ERR_NONE) {
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d111      	bne.n	8000e42 <OSInit+0x136>
#if (OS_CFG_DBG_EN > 0u)
    OS_Dbg_Init();
#endif


    OSCfg_Init();
 8000e1e:	f7ff ff6d 	bl	8000cfc <OSCfg_Init>

    OSInitialized = OS_TRUE;                                    /* Kernel is initialized                                */
 8000e22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea0 <OSInit+0x194>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
 8000e28:	e00c      	b.n	8000e44 <OSInit+0x138>
        return;
 8000e2a:	bf00      	nop
 8000e2c:	e00a      	b.n	8000e44 <OSInit+0x138>
        return;
 8000e2e:	bf00      	nop
 8000e30:	e008      	b.n	8000e44 <OSInit+0x138>
        return;
 8000e32:	bf00      	nop
 8000e34:	e006      	b.n	8000e44 <OSInit+0x138>
        return;
 8000e36:	bf00      	nop
 8000e38:	e004      	b.n	8000e44 <OSInit+0x138>
        return;
 8000e3a:	bf00      	nop
 8000e3c:	e002      	b.n	8000e44 <OSInit+0x138>
        return;
 8000e3e:	bf00      	nop
 8000e40:	e000      	b.n	8000e44 <OSInit+0x138>
        return;
 8000e42:	bf00      	nop
}
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20001284 	.word	0x20001284
 8000e50:	20001285 	.word	0x20001285
 8000e54:	200014a4 	.word	0x200014a4
 8000e58:	20001658 	.word	0x20001658
 8000e5c:	2000165c 	.word	0x2000165c
 8000e60:	20001298 	.word	0x20001298
 8000e64:	20001299 	.word	0x20001299
 8000e68:	200014ac 	.word	0x200014ac
 8000e6c:	08004534 	.word	0x08004534
 8000e70:	cccccccd 	.word	0xcccccccd
 8000e74:	200014a8 	.word	0x200014a8
 8000e78:	0800450c 	.word	0x0800450c
 8000e7c:	08004510 	.word	0x08004510
 8000e80:	200011c0 	.word	0x200011c0
 8000e84:	200011c4 	.word	0x200011c4
 8000e88:	200011c8 	.word	0x200011c8
 8000e8c:	200011cc 	.word	0x200011cc
 8000e90:	200011d0 	.word	0x200011d0
 8000e94:	200011d4 	.word	0x200011d4
 8000e98:	200011d8 	.word	0x200011d8
 8000e9c:	20001572 	.word	0x20001572
 8000ea0:	20001286 	.word	0x20001286

08000ea4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 250 levels deep.
************************************************************************************************************************
*/

void  OSIntEnter (void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
    OS_TRACE_ISR_ENTER();

    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is OS running?                                       */
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <OSIntEnter+0x30>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d10a      	bne.n	8000ec6 <OSIntEnter+0x22>
        return;                                                 /* No                                                   */
    }

    if (OSIntNestingCtr >= 250u) {                              /* Have we nested past 250 levels?                      */
 8000eb0:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <OSIntEnter+0x34>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2bf9      	cmp	r3, #249	@ 0xf9
 8000eb6:	d808      	bhi.n	8000eca <OSIntEnter+0x26>
        return;                                                 /* Yes                                                  */
    }

    OSIntNestingCtr++;                                          /* Increment ISR nesting level                          */
 8000eb8:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <OSIntEnter+0x34>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <OSIntEnter+0x34>)
 8000ec2:	701a      	strb	r2, [r3, #0]
 8000ec4:	e002      	b.n	8000ecc <OSIntEnter+0x28>
        return;                                                 /* No                                                   */
 8000ec6:	bf00      	nop
 8000ec8:	e000      	b.n	8000ecc <OSIntEnter+0x28>
        return;                                                 /* Yes                                                  */
 8000eca:	bf00      	nop
}
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	20001285 	.word	0x20001285
 8000ed8:	20001284 	.word	0x20001284

08000edc <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSIntExit (void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
    CPU_BOOLEAN  stk_status;
#endif
    CPU_SR_ALLOC();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]



    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Has the OS started?                                  */
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f90 <OSIntExit+0xb4>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d14b      	bne.n	8000f86 <OSIntExit+0xaa>
        OS_TRACE_ISR_EXIT();
        return;                                                 /* No                                                   */
    }

    CPU_INT_DIS();
 8000eee:	2040      	movs	r0, #64	@ 0x40
 8000ef0:	f7ff f96e 	bl	80001d0 <CPU_SR_Save>
 8000ef4:	6078      	str	r0, [r7, #4]
    if (OSIntNestingCtr == 0u) {                                /* Prevent OSIntNestingCtr from wrapping                */
 8000ef6:	4b27      	ldr	r3, [pc, #156]	@ (8000f94 <OSIntExit+0xb8>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d103      	bne.n	8000f06 <OSIntExit+0x2a>
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff f974 	bl	80001ec <CPU_SR_Restore>
        return;
 8000f04:	e040      	b.n	8000f88 <OSIntExit+0xac>
    }
    OSIntNestingCtr--;
 8000f06:	4b23      	ldr	r3, [pc, #140]	@ (8000f94 <OSIntExit+0xb8>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <OSIntExit+0xb8>)
 8000f10:	701a      	strb	r2, [r3, #0]
    if (OSIntNestingCtr > 0u) {                                 /* ISRs still nested?                                   */
 8000f12:	4b20      	ldr	r3, [pc, #128]	@ (8000f94 <OSIntExit+0xb8>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <OSIntExit+0x46>
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();                                           /* Yes                                                  */
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff f966 	bl	80001ec <CPU_SR_Restore>
        return;
 8000f20:	e032      	b.n	8000f88 <OSIntExit+0xac>
    }

    if (OSSchedLockNestingCtr > 0u) {                           /* Scheduler still locked?                              */
 8000f22:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <OSIntExit+0xbc>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <OSIntExit+0x56>
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();                                           /* Yes                                                  */
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff f95e 	bl	80001ec <CPU_SR_Restore>
        return;
 8000f30:	e02a      	b.n	8000f88 <OSIntExit+0xac>
        OSRedzoneHitHook((OS_TCB *)0);
    }
#endif
#endif

    OSPrioHighRdy   = OS_PrioGetHighest();                      /* Find highest priority                                */
 8000f32:	f000 ff0f 	bl	8001d54 <OS_PrioGetHighest>
 8000f36:	4603      	mov	r3, r0
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b18      	ldr	r3, [pc, #96]	@ (8000f9c <OSIntExit+0xc0>)
 8000f3c:	701a      	strb	r2, [r3, #0]
#if (OS_CFG_TASK_IDLE_EN > 0u)
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;         /* Get highest priority task ready-to-run               */
 8000f3e:	4b17      	ldr	r3, [pc, #92]	@ (8000f9c <OSIntExit+0xc0>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <OSIntExit+0xc4>)
 8000f46:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000f4a:	4a16      	ldr	r2, [pc, #88]	@ (8000fa4 <OSIntExit+0xc8>)
 8000f4c:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                       /* Current task still the highest priority?             */
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <OSIntExit+0xc8>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <OSIntExit+0xcc>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d103      	bne.n	8000f62 <OSIntExit+0x86>
        if (stk_status != OS_TRUE) {
            OSRedzoneHitHook(OSTCBCurPtr);
        }
#endif
        OS_TRACE_ISR_EXIT();
        CPU_INT_EN();
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff f946 	bl	80001ec <CPU_SR_Restore>
        OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdyPtr);             /* Do this here because we don't execute OSIntCtxSw().  */
        return;
 8000f60:	e012      	b.n	8000f88 <OSIntExit+0xac>
        }
    }
#endif

#if (OS_CFG_TASK_PROFILE_EN > 0u)
    OSTCBHighRdyPtr->CtxSwCtr++;                                /* Inc. # of context switches for this new task         */
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <OSIntExit+0xc8>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8000f6a:	3201      	adds	r2, #1
 8000f6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif
#if ((OS_CFG_TASK_PROFILE_EN > 0u) || (OS_CFG_DBG_EN > 0u))
    OSTaskCtxSwCtr++;                                           /* Keep track of the total number of ctx switches       */
 8000f70:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <OSIntExit+0xd0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <OSIntExit+0xd0>)
 8000f78:	6013      	str	r3, [r2, #0]
    OS_TLS_TaskSw();
#endif

    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

    OSIntCtxSw();                                               /* Perform interrupt level ctx switch                   */
 8000f7a:	f7ff f98e 	bl	800029a <OSCtxSw>

    CPU_INT_EN();
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff f934 	bl	80001ec <CPU_SR_Restore>
 8000f84:	e000      	b.n	8000f88 <OSIntExit+0xac>
        return;                                                 /* No                                                   */
 8000f86:	bf00      	nop
}
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20001285 	.word	0x20001285
 8000f94:	20001284 	.word	0x20001284
 8000f98:	200014a4 	.word	0x200014a4
 8000f9c:	20001299 	.word	0x20001299
 8000fa0:	200012a4 	.word	0x200012a4
 8000fa4:	2000165c 	.word	0x2000165c
 8000fa8:	20001658 	.word	0x20001658
 8000fac:	2000156c 	.word	0x2000156c

08000fb0 <OSSched>:
* Note(s)    : 1) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSSched (void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]


#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)                       /* Can't schedule when the kernel is stopped.           */
    if (OSRunning != OS_STATE_OS_RUNNING) {
 8000fba:	4b22      	ldr	r3, [pc, #136]	@ (8001044 <OSSched+0x94>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d137      	bne.n	8001032 <OSSched+0x82>
        return;
    }
#endif

    if (OSIntNestingCtr > 0u) {                                 /* ISRs still nested?                                   */
 8000fc2:	4b21      	ldr	r3, [pc, #132]	@ (8001048 <OSSched+0x98>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d135      	bne.n	8001036 <OSSched+0x86>
        return;                                                 /* Yes ... only schedule when no nested ISRs            */
    }

    if (OSSchedLockNestingCtr > 0u) {                           /* Scheduler locked?                                    */
 8000fca:	4b20      	ldr	r3, [pc, #128]	@ (800104c <OSSched+0x9c>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d133      	bne.n	800103a <OSSched+0x8a>
        return;                                                 /* Yes                                                  */
    }

    CPU_INT_DIS();
 8000fd2:	2040      	movs	r0, #64	@ 0x40
 8000fd4:	f7ff f8fc 	bl	80001d0 <CPU_SR_Save>
 8000fd8:	6078      	str	r0, [r7, #4]
    OSPrioHighRdy   = OS_PrioGetHighest();                      /* Find the highest priority ready                      */
 8000fda:	f000 febb 	bl	8001d54 <OS_PrioGetHighest>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <OSSched+0xa0>)
 8000fe4:	701a      	strb	r2, [r3, #0]
#if (OS_CFG_TASK_IDLE_EN > 0u)
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;         /* Get highest priority task ready-to-run               */
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <OSSched+0xa0>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <OSSched+0xa4>)
 8000fee:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000ff2:	4a19      	ldr	r2, [pc, #100]	@ (8001058 <OSSched+0xa8>)
 8000ff4:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                       /* Current task still the highest priority?             */
 8000ff6:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <OSSched+0xa8>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4b18      	ldr	r3, [pc, #96]	@ (800105c <OSSched+0xac>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d103      	bne.n	800100a <OSSched+0x5a>
        CPU_INT_EN();                                           /* Yes                                                  */
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff f8f2 	bl	80001ec <CPU_SR_Restore>
        return;
 8001008:	e018      	b.n	800103c <OSSched+0x8c>
#endif

    OS_TRACE_TASK_PREEMPT(OSTCBCurPtr);

#if (OS_CFG_TASK_PROFILE_EN > 0u)
    OSTCBHighRdyPtr->CtxSwCtr++;                                /* Inc. # of context switches to this task              */
 800100a:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <OSSched+0xa8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001012:	3201      	adds	r2, #1
 8001014:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif

#if ((OS_CFG_TASK_PROFILE_EN > 0u) || (OS_CFG_DBG_EN > 0u))
    OSTaskCtxSwCtr++;                                           /* Increment context switch counter                     */
 8001018:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <OSSched+0xb0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	4a10      	ldr	r2, [pc, #64]	@ (8001060 <OSSched+0xb0>)
 8001020:	6013      	str	r3, [r2, #0]
#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

#if (OS_CFG_TASK_IDLE_EN > 0u)
    OS_TASK_SW();                                               /* Perform a task level context switch                  */
 8001022:	f7ff f93a 	bl	800029a <OSCtxSw>
    CPU_INT_EN();
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff f8e0 	bl	80001ec <CPU_SR_Restore>
        }
    }
#endif

#ifdef OS_TASK_SW_SYNC
    OS_TASK_SW_SYNC();
 800102c:	f3bf 8f6f 	isb	sy
 8001030:	e004      	b.n	800103c <OSSched+0x8c>
        return;
 8001032:	bf00      	nop
 8001034:	e002      	b.n	800103c <OSSched+0x8c>
        return;                                                 /* Yes ... only schedule when no nested ISRs            */
 8001036:	bf00      	nop
 8001038:	e000      	b.n	800103c <OSSched+0x8c>
        return;                                                 /* Yes                                                  */
 800103a:	bf00      	nop
#endif
}
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20001285 	.word	0x20001285
 8001048:	20001284 	.word	0x20001284
 800104c:	200014a4 	.word	0x200014a4
 8001050:	20001299 	.word	0x20001299
 8001054:	200012a4 	.word	0x200012a4
 8001058:	2000165c 	.word	0x2000165c
 800105c:	20001658 	.word	0x20001658
 8001060:	2000156c 	.word	0x2000156c

08001064 <OSStart>:
*              2) OSStart() is not supposed to return.  If it does, that would be considered a fatal error.
************************************************************************************************************************
*/

void  OSStart (OS_ERR  *p_err)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (OSInitialized != OS_TRUE) {
 800106c:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <OSStart+0x9c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d004      	beq.n	800107e <OSStart+0x1a>
       *p_err = OS_ERR_OS_NOT_INIT;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f645 628b 	movw	r2, #24203	@ 0x5e8b
 800107a:	801a      	strh	r2, [r3, #0]
        return;
 800107c:	e03c      	b.n	80010f8 <OSStart+0x94>
    }

    kernel_task_cnt = 0u;                                       /* Calculate the number of kernel tasks                 */
 800107e:	2300      	movs	r3, #0
 8001080:	81fb      	strh	r3, [r7, #14]
#if (OS_CFG_STAT_TASK_EN > 0u)
    kernel_task_cnt++;
 8001082:	89fb      	ldrh	r3, [r7, #14]
 8001084:	3301      	adds	r3, #1
 8001086:	81fb      	strh	r3, [r7, #14]
#endif
#if (OS_CFG_TMR_EN > 0u)
    kernel_task_cnt++;
 8001088:	89fb      	ldrh	r3, [r7, #14]
 800108a:	3301      	adds	r3, #1
 800108c:	81fb      	strh	r3, [r7, #14]
#endif
#if (OS_CFG_TASK_IDLE_EN > 0u)
    kernel_task_cnt++;
 800108e:	89fb      	ldrh	r3, [r7, #14]
 8001090:	3301      	adds	r3, #1
 8001092:	81fb      	strh	r3, [r7, #14]
#endif

    if (OSTaskQty <= kernel_task_cnt) {                         /* No application task created                          */
 8001094:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <OSStart+0xa0>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	89fa      	ldrh	r2, [r7, #14]
 800109a:	429a      	cmp	r2, r3
 800109c:	d304      	bcc.n	80010a8 <OSStart+0x44>
        *p_err = OS_ERR_OS_NO_APP_TASK;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f645 628c 	movw	r2, #24204	@ 0x5e8c
 80010a4:	801a      	strh	r2, [r3, #0]
         return;
 80010a6:	e027      	b.n	80010f8 <OSStart+0x94>
    }

    if (OSRunning == OS_STATE_OS_STOPPED) {
 80010a8:	4b17      	ldr	r3, [pc, #92]	@ (8001108 <OSStart+0xa4>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d11f      	bne.n	80010f0 <OSStart+0x8c>
        OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority                            */
 80010b0:	f000 fe50 	bl	8001d54 <OS_PrioGetHighest>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b14      	ldr	r3, [pc, #80]	@ (800110c <OSStart+0xa8>)
 80010ba:	701a      	strb	r2, [r3, #0]
        OSPrioCur       = OSPrioHighRdy;
 80010bc:	4b13      	ldr	r3, [pc, #76]	@ (800110c <OSStart+0xa8>)
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <OSStart+0xac>)
 80010c2:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 80010c4:	4b11      	ldr	r3, [pc, #68]	@ (800110c <OSStart+0xa8>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <OSStart+0xb0>)
 80010cc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80010d0:	4a11      	ldr	r2, [pc, #68]	@ (8001118 <OSStart+0xb4>)
 80010d2:	6013      	str	r3, [r2, #0]
        OSTCBCurPtr     = OSTCBHighRdyPtr;
 80010d4:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <OSStart+0xb4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a10      	ldr	r2, [pc, #64]	@ (800111c <OSStart+0xb8>)
 80010da:	6013      	str	r3, [r2, #0]
        OSRunning       = OS_STATE_OS_RUNNING;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <OSStart+0xa4>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
        OSStartHighRdy();                                       /* Execute target specific code to start task           */
 80010e2:	f7ff f89b 	bl	800021c <OSStartHighRdy>
       *p_err           = OS_ERR_FATAL_RETURN;                  /* OSStart() is not supposed to return                  */
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f643 2299 	movw	r2, #15001	@ 0x3a99
 80010ec:	801a      	strh	r2, [r3, #0]
 80010ee:	e003      	b.n	80010f8 <OSStart+0x94>
    } else {
       *p_err           = OS_ERR_OS_RUNNING;                    /* OS is already running                                */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f645 628a 	movw	r2, #24202	@ 0x5e8a
 80010f6:	801a      	strh	r2, [r3, #0]
    }
}
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20001286 	.word	0x20001286
 8001104:	20001570 	.word	0x20001570
 8001108:	20001285 	.word	0x20001285
 800110c:	20001299 	.word	0x20001299
 8001110:	20001298 	.word	0x20001298
 8001114:	200012a4 	.word	0x200012a4
 8001118:	2000165c 	.word	0x2000165c
 800111c:	20001658 	.word	0x20001658

08001120 <OS_IdleTask>:
*              3) This hook has been added to allow you to do such things as STOP the CPU to conserve power.
************************************************************************************************************************
*/
#if (OS_CFG_TASK_IDLE_EN > 0u)
void  OS_IdleTask (void  *p_arg)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_EN > 0u))
    CPU_SR_ALLOC();
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]

    (void)p_arg;                                                /* Prevent compiler warning for not using 'p_arg'       */

    for (;;) {
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_EN > 0u))
        CPU_CRITICAL_ENTER();
 800112c:	2040      	movs	r0, #64	@ 0x40
 800112e:	f7ff f84f 	bl	80001d0 <CPU_SR_Save>
 8001132:	60f8      	str	r0, [r7, #12]
#if (OS_CFG_DBG_EN > 0u)
        OSIdleTaskCtr++;
#endif
#if (OS_CFG_STAT_TASK_EN > 0u)
        OSStatTaskCtr++;
 8001134:	4b05      	ldr	r3, [pc, #20]	@ (800114c <OS_IdleTask+0x2c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a04      	ldr	r2, [pc, #16]	@ (800114c <OS_IdleTask+0x2c>)
 800113c:	6013      	str	r3, [r2, #0]
#endif
        CPU_CRITICAL_EXIT();
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f7ff f854 	bl	80001ec <CPU_SR_Restore>
#endif

#if (OS_CFG_APP_HOOKS_EN > 0u)
        OSIdleTaskHook();                                       /* Call user definable HOOK                             */
 8001144:	f7ff fc70 	bl	8000a28 <OSIdleTaskHook>
        CPU_CRITICAL_ENTER();
 8001148:	bf00      	nop
 800114a:	e7ef      	b.n	800112c <OS_IdleTask+0xc>
 800114c:	200014b4 	.word	0x200014b4

08001150 <OS_IdleTaskInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/
#if (OS_CFG_TASK_IDLE_EN > 0u)
void  OS_IdleTaskInit (OS_ERR  *p_err)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	@ 0x30
 8001154:	af0a      	add	r7, sp, #40	@ 0x28
 8001156:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSIdleTaskCtr = 0u;
#endif
                                                                /* --------------- CREATE THE IDLE TASK --------------- */
    OSTaskCreate(&OSIdleTaskTCB,
 8001158:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <OS_IdleTaskInit+0x48>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0f      	ldr	r2, [pc, #60]	@ (800119c <OS_IdleTaskInit+0x4c>)
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	490f      	ldr	r1, [pc, #60]	@ (80011a0 <OS_IdleTaskInit+0x50>)
 8001162:	6809      	ldr	r1, [r1, #0]
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	9008      	str	r0, [sp, #32]
 8001168:	200b      	movs	r0, #11
 800116a:	9007      	str	r0, [sp, #28]
 800116c:	2000      	movs	r0, #0
 800116e:	9006      	str	r0, [sp, #24]
 8001170:	2000      	movs	r0, #0
 8001172:	9005      	str	r0, [sp, #20]
 8001174:	2000      	movs	r0, #0
 8001176:	9004      	str	r0, [sp, #16]
 8001178:	9103      	str	r1, [sp, #12]
 800117a:	9202      	str	r2, [sp, #8]
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	233f      	movs	r3, #63	@ 0x3f
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2300      	movs	r3, #0
 8001184:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <OS_IdleTaskInit+0x54>)
 8001186:	2100      	movs	r1, #0
 8001188:	4807      	ldr	r0, [pc, #28]	@ (80011a8 <OS_IdleTaskInit+0x58>)
 800118a:	f000 ffcd 	bl	8002128 <OSTaskCreate>
                  0u,
                  0u,
                 (void       *)0,
                 (OS_OPT_TASK_STK_CHK | (OS_OPT)(OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS)),
                  p_err);
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	08004500 	.word	0x08004500
 800119c:	08004504 	.word	0x08004504
 80011a0:	08004508 	.word	0x08004508
 80011a4:	08001121 	.word	0x08001121
 80011a8:	200011dc 	.word	0x200011dc

080011ac <OS_Pend>:

void  OS_Pend (OS_PEND_OBJ  *p_obj,
               OS_TCB       *p_tcb,
               OS_STATE      pending_on,
               OS_TICK       timeout)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	4613      	mov	r3, r2
 80011ba:	71fb      	strb	r3, [r7, #7]
    OS_PEND_LIST  *p_pend_list;


    p_tcb->PendOn     = pending_on;                             /* Resource not available, wait until it is             */
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	79fa      	ldrb	r2, [r7, #7]
 80011c0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    p_tcb->PendStatus = OS_STATUS_PEND_OK;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    OS_TaskBlock(p_tcb,                                         /* Block the task and add it to the tick list if needed */
 80011cc:	6839      	ldr	r1, [r7, #0]
 80011ce:	68b8      	ldr	r0, [r7, #8]
 80011d0:	f000 fafc 	bl	80017cc <OS_TaskBlock>
                 timeout);

    if (p_obj != (OS_PEND_OBJ *)0) {                            /* Add the current task to the pend list ...            */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00a      	beq.n	80011f0 <OS_Pend+0x44>
        p_pend_list             = &p_obj->PendList;             /* ... if there is an object to pend on                 */
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3304      	adds	r3, #4
 80011de:	617b      	str	r3, [r7, #20]
        p_tcb->PendObjPtr =  p_obj;                             /* Save the pointer to the object pending on            */
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	629a      	str	r2, [r3, #40]	@ 0x28
        OS_PendListInsertPrio(p_pend_list,                      /* Insert in the pend list in priority order            */
 80011e6:	68b9      	ldr	r1, [r7, #8]
 80011e8:	6978      	ldr	r0, [r7, #20]
 80011ea:	f000 f835 	bl	8001258 <OS_PendListInsertPrio>
    }
#if (OS_CFG_DBG_EN > 0u)
    OS_PendDbgNameAdd(p_obj,
                      p_tcb);
#endif
}
 80011ee:	e002      	b.n	80011f6 <OS_Pend+0x4a>
        p_tcb->PendObjPtr = (OS_PEND_OBJ *)0;                   /* If no object being pended on, clear the pend object  */
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	2200      	movs	r2, #0
 80011f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <OS_PendListChangePrio>:
*              2) It's assumed that the TCB contains the NEW priority in its .Prio field.
************************************************************************************************************************
*/

void  OS_PendListChangePrio (OS_TCB  *p_tcb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_OBJ   *p_obj;

    p_obj       =  p_tcb->PendObjPtr;                           /* Get pointer to pend list                             */
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800120a:	60fb      	str	r3, [r7, #12]
    p_pend_list = &p_obj->PendList;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	3304      	adds	r3, #4
 8001210:	60bb      	str	r3, [r7, #8]

    if (p_pend_list->HeadPtr->PendNextPtr != (OS_TCB *)0) {     /* Only move if multiple entries in the list            */
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d009      	beq.n	8001230 <OS_PendListChangePrio+0x32>
            OS_PendListRemove(p_tcb);                           /* Remove entry from current position                   */
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 f87e 	bl	800131e <OS_PendListRemove>
            p_tcb->PendObjPtr = p_obj;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	629a      	str	r2, [r3, #40]	@ 0x28
            OS_PendListInsertPrio(p_pend_list,                  /* INSERT it back in the list                           */
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	68b8      	ldr	r0, [r7, #8]
 800122c:	f000 f814 	bl	8001258 <OS_PendListInsertPrio>
                                  p_tcb);
    }
}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <OS_PendListInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application must not call it.
************************************************************************************************************************
*/

void  OS_PendListInit (OS_PEND_LIST  *p_pend_list)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    p_pend_list->HeadPtr    = (OS_TCB *)0;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
    p_pend_list->TailPtr    = (OS_TCB *)0;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	605a      	str	r2, [r3, #4]
#if (OS_CFG_DBG_EN > 0u)
    p_pend_list->NbrEntries =           0u;
#endif
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <OS_PendListInsertPrio>:
************************************************************************************************************************
*/

void  OS_PendListInsertPrio (OS_PEND_LIST  *p_pend_list,
                             OS_TCB        *p_tcb)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
    OS_PRIO   prio;
    OS_TCB   *p_tcb_next;


    prio  = p_tcb->Prio;                                        /* Obtain the priority of the task to insert            */
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001268:	72fb      	strb	r3, [r7, #11]

    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* CASE 0: Insert when there are no entries             */
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10c      	bne.n	800128c <OS_PendListInsertPrio+0x34>
#if (OS_CFG_DBG_EN > 0u)
        p_pend_list->NbrEntries = 1u;                           /* This is the first entry                              */
#endif
        p_tcb->PendNextPtr   = (OS_TCB *)0;                     /* No other OS_TCBs in the list                         */
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
        p_tcb->PendPrevPtr   = (OS_TCB *)0;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24
        p_pend_list->HeadPtr =  p_tcb;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr =  p_tcb;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	605a      	str	r2, [r3, #4]
                p_tcb->PendPrevPtr->PendNextPtr = p_tcb;
                p_tcb_next->PendPrevPtr         = p_tcb;
            }
        }
    }
}
 800128a:	e042      	b.n	8001312 <OS_PendListInsertPrio+0xba>
        p_tcb_next = p_pend_list->HeadPtr;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	60fb      	str	r3, [r7, #12]
        while (p_tcb_next != (OS_TCB *)0) {                     /* Find the position where to insert                    */
 8001292:	e008      	b.n	80012a6 <OS_PendListInsertPrio+0x4e>
            if (prio < p_tcb_next->Prio) {
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800129a:	7afa      	ldrb	r2, [r7, #11]
 800129c:	429a      	cmp	r2, r3
 800129e:	d306      	bcc.n	80012ae <OS_PendListInsertPrio+0x56>
                p_tcb_next = p_tcb_next->PendNextPtr;           /* Not Found, follow the list                           */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	60fb      	str	r3, [r7, #12]
        while (p_tcb_next != (OS_TCB *)0) {                     /* Find the position where to insert                    */
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f3      	bne.n	8001294 <OS_PendListInsertPrio+0x3c>
 80012ac:	e000      	b.n	80012b0 <OS_PendListInsertPrio+0x58>
                break;                                          /* Found! ... insert BEFORE current                     */
 80012ae:	bf00      	nop
        if (p_tcb_next == (OS_TCB *)0) {                        /* TCB to insert is lowest in priority                  */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10e      	bne.n	80012d4 <OS_PendListInsertPrio+0x7c>
            p_tcb->PendNextPtr              = (OS_TCB *)0;      /* ... insert at the tail.                              */
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
            p_tcb->PendPrevPtr              =  p_pend_list->TailPtr;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	625a      	str	r2, [r3, #36]	@ 0x24
            p_tcb->PendPrevPtr->PendNextPtr =  p_tcb;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	621a      	str	r2, [r3, #32]
            p_pend_list->TailPtr            =  p_tcb;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	605a      	str	r2, [r3, #4]
}
 80012d2:	e01e      	b.n	8001312 <OS_PendListInsertPrio+0xba>
            if (p_tcb_next->PendPrevPtr == (OS_TCB *)0) {       /* Is new TCB highest priority?                         */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d10c      	bne.n	80012f6 <OS_PendListInsertPrio+0x9e>
                p_tcb->PendNextPtr      =  p_tcb_next;          /* Yes, insert as new Head of list                      */
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	621a      	str	r2, [r3, #32]
                p_tcb->PendPrevPtr      = (OS_TCB *)0;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	2200      	movs	r2, #0
 80012e6:	625a      	str	r2, [r3, #36]	@ 0x24
                p_tcb_next->PendPrevPtr =  p_tcb;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	625a      	str	r2, [r3, #36]	@ 0x24
                p_pend_list->HeadPtr    =  p_tcb;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	601a      	str	r2, [r3, #0]
}
 80012f4:	e00d      	b.n	8001312 <OS_PendListInsertPrio+0xba>
                p_tcb->PendNextPtr              = p_tcb_next;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	621a      	str	r2, [r3, #32]
                p_tcb->PendPrevPtr              = p_tcb_next->PendPrevPtr;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	625a      	str	r2, [r3, #36]	@ 0x24
                p_tcb->PendPrevPtr->PendNextPtr = p_tcb;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	621a      	str	r2, [r3, #32]
                p_tcb_next->PendPrevPtr         = p_tcb;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <OS_PendListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PendListRemove (OS_TCB  *p_tcb)
{
 800131e:	b480      	push	{r7}
 8001320:	b087      	sub	sp, #28
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_next;
    OS_TCB        *p_prev;


    if (p_tcb->PendObjPtr != (OS_PEND_OBJ *)0) {                /* Only remove if object has a pend list.               */
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132a:	2b00      	cmp	r3, #0
 800132c:	d040      	beq.n	80013b0 <OS_PendListRemove+0x92>
        p_pend_list = &p_tcb->PendObjPtr->PendList;             /* Get pointer to pend list                             */
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001332:	3304      	adds	r3, #4
 8001334:	617b      	str	r3, [r7, #20]

                                                                /* Remove TCB from the pend list.                       */
        if (p_pend_list->HeadPtr->PendNextPtr == (OS_TCB *)0) {
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d106      	bne.n	800134e <OS_PendListRemove+0x30>
            p_pend_list->HeadPtr = (OS_TCB *)0;                 /* Only one entry in the pend list                      */
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
            p_pend_list->TailPtr = (OS_TCB *)0;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2200      	movs	r2, #0
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	e027      	b.n	800139e <OS_PendListRemove+0x80>
        } else if (p_tcb->PendPrevPtr == (OS_TCB *)0) {         /* See if entry is at the head of the list              */
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001352:	2b00      	cmp	r3, #0
 8001354:	d109      	bne.n	800136a <OS_PendListRemove+0x4c>
            p_next               =  p_tcb->PendNextPtr;         /* Yes                                                  */
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	60fb      	str	r3, [r7, #12]
            p_next->PendPrevPtr  = (OS_TCB *)0;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	@ 0x24
            p_pend_list->HeadPtr =  p_next;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	e019      	b.n	800139e <OS_PendListRemove+0x80>

        } else if (p_tcb->PendNextPtr == (OS_TCB *)0) {         /* See if entry is at the tail of the list              */
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d109      	bne.n	8001386 <OS_PendListRemove+0x68>
            p_prev               =  p_tcb->PendPrevPtr;         /* Yes                                                  */
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001376:	613b      	str	r3, [r7, #16]
            p_prev->PendNextPtr  = (OS_TCB *)0;
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
            p_pend_list->TailPtr =  p_prev;
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	e00b      	b.n	800139e <OS_PendListRemove+0x80>

        } else {
            p_prev               = p_tcb->PendPrevPtr;          /* Remove from inside the list                          */
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138a:	613b      	str	r3, [r7, #16]
            p_next               = p_tcb->PendNextPtr;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	60fb      	str	r3, [r7, #12]
            p_prev->PendNextPtr  = p_next;
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	621a      	str	r2, [r3, #32]
            p_next->PendPrevPtr  = p_prev;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24
        }
#if (OS_CFG_DBG_EN > 0u)
        p_pend_list->NbrEntries--;                              /* One less entry in the list                           */
#endif
        p_tcb->PendNextPtr = (OS_TCB      *)0;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
        p_tcb->PendPrevPtr = (OS_TCB      *)0;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	625a      	str	r2, [r3, #36]	@ 0x24
        p_tcb->PendObjPtr  = (OS_PEND_OBJ *)0;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }
}
 80013b0:	bf00      	nop
 80013b2:	371c      	adds	r7, #28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <OS_Post>:
void  OS_Post (OS_PEND_OBJ  *p_obj,
               OS_TCB       *p_tcb,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               CPU_TS        ts)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
 80013c8:	807b      	strh	r3, [r7, #2]
#if (OS_MSG_EN == 0u)
    (void)p_void;
    (void)msg_size;
#endif

    switch (p_tcb->TaskState) {
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80013d0:	2b07      	cmp	r3, #7
 80013d2:	d85a      	bhi.n	800148a <OS_Post+0xce>
 80013d4:	a201      	add	r2, pc, #4	@ (adr r2, 80013dc <OS_Post+0x20>)
 80013d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013da:	bf00      	nop
 80013dc:	0800148b 	.word	0x0800148b
 80013e0:	0800148b 	.word	0x0800148b
 80013e4:	080013fd 	.word	0x080013fd
 80013e8:	080013fd 	.word	0x080013fd
 80013ec:	0800148b 	.word	0x0800148b
 80013f0:	0800148b 	.word	0x0800148b
 80013f4:	08001447 	.word	0x08001447
 80013f8:	08001447 	.word	0x08001447
             break;

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
#if (OS_MSG_EN > 0u)
             p_tcb->MsgPtr  = p_void;                           /* Deposit message in OS_TCB of task waiting            */
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	655a      	str	r2, [r3, #84]	@ 0x54
             p_tcb->MsgSize = msg_size;                         /* ... assuming posting a message                       */
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	887a      	ldrh	r2, [r7, #2]
 8001406:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
#endif
#if (OS_CFG_TS_EN > 0u)
                 p_tcb->TS      = ts;
#endif
             if (p_obj != (OS_PEND_OBJ *)0) {
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <OS_Post+0x5a>
                 OS_PendListRemove(p_tcb);                      /* Remove task from pend list                           */
 8001410:	68b8      	ldr	r0, [r7, #8]
 8001412:	f7ff ff84 	bl	800131e <OS_PendListRemove>
#if (OS_CFG_DBG_EN > 0u)
             OS_PendDbgNameRemove(p_obj,
                                  p_tcb);
#endif
#if (OS_CFG_TICK_EN > 0u)
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800141c:	2b03      	cmp	r3, #3
 800141e:	d102      	bne.n	8001426 <OS_Post+0x6a>
                 OS_TickListRemove(p_tcb);                      /* Remove from tick list                                */
 8001420:	68b8      	ldr	r0, [r7, #8]
 8001422:	f001 fb53 	bl	8002acc <OS_TickListRemove>
             }
#endif
             OS_RdyListInsert(p_tcb);                           /* Insert the task in the ready list                    */
 8001426:	68b8      	ldr	r0, [r7, #8]
 8001428:	f000 f854 	bl	80014d4 <OS_RdyListInsert>
             p_tcb->TaskState  = OS_TASK_STATE_RDY;
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
             p_tcb->PendStatus = OS_STATUS_PEND_OK;             /* Clear pend status                                    */
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;       /* Indicate no longer pending                           */
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
             break;
 8001444:	e022      	b.n	800148c <OS_Post+0xd0>

        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
#if (OS_MSG_EN > 0u)
             p_tcb->MsgPtr  = p_void;                           /* Deposit message in OS_TCB of task waiting            */
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	655a      	str	r2, [r3, #84]	@ 0x54
             p_tcb->MsgSize = msg_size;                         /* ... assuming posting a message                       */
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
#endif
#if (OS_CFG_TS_EN > 0u)
             p_tcb->TS      = ts;
#endif
             if (p_obj != (OS_PEND_OBJ *)0) {
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <OS_Post+0xa4>
                 OS_PendListRemove(p_tcb);                      /* Remove from pend list                                */
 800145a:	68b8      	ldr	r0, [r7, #8]
 800145c:	f7ff ff5f 	bl	800131e <OS_PendListRemove>
#if (OS_CFG_DBG_EN > 0u)
             OS_PendDbgNameRemove(p_obj,
                                  p_tcb);
#endif
#if (OS_CFG_TICK_EN > 0u)
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001466:	2b07      	cmp	r3, #7
 8001468:	d102      	bne.n	8001470 <OS_Post+0xb4>
                 OS_TickListRemove(p_tcb);                      /* Cancel any timeout                                   */
 800146a:	68b8      	ldr	r0, [r7, #8]
 800146c:	f001 fb2e 	bl	8002acc <OS_TickListRemove>
             }
#endif
             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	2204      	movs	r2, #4
 8001474:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
             p_tcb->PendStatus = OS_STATUS_PEND_OK;             /* Clear pend status                                    */
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;       /* Indicate no longer pending                           */
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
             break;
 8001488:	e000      	b.n	800148c <OS_Post+0xd0>

        default:
                                                                /* Default case.                                        */
             break;
 800148a:	bf00      	nop
    }
}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <OS_RdyListInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInit (void)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
    CPU_INT32U    i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                    /* Initialize the array of OS_RDY_LIST at each priority */
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	e00d      	b.n	80014bc <OS_RdyListInit+0x28>
        p_rdy_list = &OSRdyList[i];
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <OS_RdyListInit+0x3c>)
 80014a6:	4413      	add	r3, r2
 80014a8:	603b      	str	r3, [r7, #0]
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries =           0u;
#endif
        p_rdy_list->HeadPtr    = (OS_TCB *)0;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    = (OS_TCB *)0;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                    /* Initialize the array of OS_RDY_LIST at each priority */
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3301      	adds	r3, #1
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b3f      	cmp	r3, #63	@ 0x3f
 80014c0:	d9ee      	bls.n	80014a0 <OS_RdyListInit+0xc>
    }
}
 80014c2:	bf00      	nop
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	200012a4 	.word	0x200012a4

080014d4 <OS_RdyListInsert>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInsert (OS_TCB  *p_tcb)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    OS_PrioInsert(p_tcb->Prio);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fc52 	bl	8001d8c <OS_PrioInsert>
    if (p_tcb->Prio == OSPrioCur) {                             /* Are we readying a task at the same prio?             */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80014ee:	4b07      	ldr	r3, [pc, #28]	@ (800150c <OS_RdyListInsert+0x38>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d103      	bne.n	80014fe <OS_RdyListInsert+0x2a>
        OS_RdyListInsertTail(p_tcb);                            /* Yes, insert readied task at the end of the list      */
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f83e 	bl	8001578 <OS_RdyListInsertTail>
    } else {
        OS_RdyListInsertHead(p_tcb);                            /* No,  insert readied task at the beginning of the list*/
    }

    OS_TRACE_TASK_READY(p_tcb);
}
 80014fc:	e002      	b.n	8001504 <OS_RdyListInsert+0x30>
        OS_RdyListInsertHead(p_tcb);                            /* No,  insert readied task at the beginning of the list*/
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f806 	bl	8001510 <OS_RdyListInsertHead>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20001298 	.word	0x20001298

08001510 <OS_RdyListInsertHead>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertHead (OS_TCB  *p_tcb)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4a14      	ldr	r2, [pc, #80]	@ (8001574 <OS_RdyListInsertHead+0x64>)
 8001522:	4413      	add	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->HeadPtr == (OS_TCB *)0) {                   /* CASE 0: Insert when there are no entries             */
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10c      	bne.n	8001548 <OS_RdyListInsertHead+0x38>
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries =           1u;                  /* This is the first entry                              */
#endif
        p_tcb->NextPtr         = (OS_TCB *)0;                   /* No other OS_TCBs in the list                         */
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         = (OS_TCB *)0;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    =  p_tcb;                        /* Both list pointers point to this OS_TCB              */
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    =  p_tcb;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	605a      	str	r2, [r3, #4]
        p_tcb->PrevPtr         = (OS_TCB *)0;
        p_tcb2                 =  p_rdy_list->HeadPtr;          /* Adjust old head of list's links                      */
        p_tcb2->PrevPtr        =  p_tcb;
        p_rdy_list->HeadPtr    =  p_tcb;
    }
}
 8001546:	e00f      	b.n	8001568 <OS_RdyListInsertHead+0x58>
        p_tcb->NextPtr         =  p_rdy_list->HeadPtr;          /* Adjust new OS_TCBs links                             */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         = (OS_TCB *)0;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
        p_tcb2                 =  p_rdy_list->HeadPtr;          /* Adjust old head of list's links                      */
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60bb      	str	r3, [r7, #8]
        p_tcb2->PrevPtr        =  p_tcb;
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    =  p_tcb;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	601a      	str	r2, [r3, #0]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	200012a4 	.word	0x200012a4

08001578 <OS_RdyListInsertTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertTail (OS_TCB  *p_tcb)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4a14      	ldr	r2, [pc, #80]	@ (80015dc <OS_RdyListInsertTail+0x64>)
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->HeadPtr == (OS_TCB *)0) {                   /* CASE 0: Insert when there are no entries             */
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10c      	bne.n	80015b0 <OS_RdyListInsertTail+0x38>
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries  =           1u;                 /* This is the first entry                              */
#endif
        p_tcb->NextPtr          = (OS_TCB *)0;                  /* No other OS_TCBs in the list                         */
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr          = (OS_TCB *)0;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr     =  p_tcb;                       /* Both list pointers point to this OS_TCB              */
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr     =  p_tcb;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	605a      	str	r2, [r3, #4]
        p_tcb2                  =  p_rdy_list->TailPtr;
        p_tcb->PrevPtr          =  p_tcb2;
        p_tcb2->NextPtr         =  p_tcb;                       /* Adjust old tail of list's links                      */
        p_rdy_list->TailPtr     =  p_tcb;
    }
}
 80015ae:	e00e      	b.n	80015ce <OS_RdyListInsertTail+0x56>
        p_tcb->NextPtr          = (OS_TCB *)0;                  /* Adjust new OS_TCBs links                             */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
        p_tcb2                  =  p_rdy_list->TailPtr;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	60bb      	str	r3, [r7, #8]
        p_tcb->PrevPtr          =  p_tcb2;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	611a      	str	r2, [r3, #16]
        p_tcb2->NextPtr         =  p_tcb;                       /* Adjust old tail of list's links                      */
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	60da      	str	r2, [r3, #12]
        p_rdy_list->TailPtr     =  p_tcb;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	605a      	str	r2, [r3, #4]
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	200012a4 	.word	0x200012a4

080015e0 <OS_RdyListMoveHeadToTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListMoveHeadToTail (OS_RDY_LIST  *p_rdy_list)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    OS_TCB  *p_tcb1;
    OS_TCB  *p_tcb2;
    OS_TCB  *p_tcb3;


     if (p_rdy_list->HeadPtr != p_rdy_list->TailPtr) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d03a      	beq.n	800166a <OS_RdyListMoveHeadToTail+0x8a>
         if (p_rdy_list->HeadPtr->NextPtr == p_rdy_list->TailPtr) { /* SWAP the TCBs                                    */
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d118      	bne.n	8001634 <OS_RdyListMoveHeadToTail+0x54>
             p_tcb1              =  p_rdy_list->HeadPtr;        /* Point to current head                                */
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	617b      	str	r3, [r7, #20]
             p_tcb2              =  p_rdy_list->TailPtr;        /* Point to current tail                                */
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	613b      	str	r3, [r7, #16]
             p_tcb1->PrevPtr     =  p_tcb2;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	611a      	str	r2, [r3, #16]
             p_tcb1->NextPtr     = (OS_TCB *)0;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
             p_tcb2->PrevPtr     = (OS_TCB *)0;
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
             p_tcb2->NextPtr     =  p_tcb1;
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	60da      	str	r2, [r3, #12]
             p_rdy_list->HeadPtr =  p_tcb2;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	601a      	str	r2, [r3, #0]
             p_rdy_list->TailPtr =  p_tcb1;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	605a      	str	r2, [r3, #4]
             p_tcb2->NextPtr     =  p_tcb1;                     /* Adjust forward link of old list tail                 */
             p_rdy_list->HeadPtr =  p_tcb3;                     /* Adjust new list head and tail pointers               */
             p_rdy_list->TailPtr =  p_tcb1;
         }
     }
}
 8001632:	e01a      	b.n	800166a <OS_RdyListMoveHeadToTail+0x8a>
             p_tcb1              =  p_rdy_list->HeadPtr;        /* Point to current head                                */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	617b      	str	r3, [r7, #20]
             p_tcb2              =  p_rdy_list->TailPtr;        /* Point to current tail                                */
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	613b      	str	r3, [r7, #16]
             p_tcb3              =  p_tcb1->NextPtr;            /* Point to new list head                               */
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60fb      	str	r3, [r7, #12]
             p_tcb3->PrevPtr     = (OS_TCB *)0;                 /* Adjust back    link of new list head                 */
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
             p_tcb1->NextPtr     = (OS_TCB *)0;                 /* Adjust forward link of new list tail                 */
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
             p_tcb1->PrevPtr     =  p_tcb2;                     /* Adjust back    link of new list tail                 */
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	611a      	str	r2, [r3, #16]
             p_tcb2->NextPtr     =  p_tcb1;                     /* Adjust forward link of old list tail                 */
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	60da      	str	r2, [r3, #12]
             p_rdy_list->HeadPtr =  p_tcb3;                     /* Adjust new list head and tail pointers               */
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	601a      	str	r2, [r3, #0]
             p_rdy_list->TailPtr =  p_tcb1;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	605a      	str	r2, [r3, #4]
}
 800166a:	bf00      	nop
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <OS_RdyListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListRemove (OS_TCB  *p_tcb)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
    OS_TCB       *p_tcb1;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	4a1c      	ldr	r2, [pc, #112]	@ (80016fc <OS_RdyListRemove+0x84>)
 800168a:	4413      	add	r3, r2
 800168c:	617b      	str	r3, [r7, #20]
    p_tcb1     = p_tcb->PrevPtr;                                /* Point to next and previous OS_TCB in the list        */
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	613b      	str	r3, [r7, #16]
    p_tcb2     = p_tcb->NextPtr;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {                                /* Was the OS_TCB to remove at the head?                */
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d116      	bne.n	80016ce <OS_RdyListRemove+0x56>
        if (p_tcb2 == (OS_TCB *)0) {                            /* Yes, was it the only OS_TCB?                         */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10c      	bne.n	80016c0 <OS_RdyListRemove+0x48>
#if (OS_CFG_DBG_EN > 0u)
            p_rdy_list->NbrEntries =           0u;              /* Yes, no more entries                                 */
#endif
            p_rdy_list->HeadPtr    = (OS_TCB *)0;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
            p_rdy_list->TailPtr    = (OS_TCB *)0;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	2200      	movs	r2, #0
 80016b0:	605a      	str	r2, [r3, #4]
            OS_PrioRemove(p_tcb->Prio);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 fb8d 	bl	8001dd8 <OS_PrioRemove>
 80016be:	e013      	b.n	80016e8 <OS_RdyListRemove+0x70>
        } else {
#if (OS_CFG_DBG_EN > 0u)
            p_rdy_list->NbrEntries--;                           /* No,  one less entry                                  */
#endif
            p_tcb2->PrevPtr     = (OS_TCB *)0;                  /* adjust back link of new list head                    */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
            p_rdy_list->HeadPtr =  p_tcb2;                      /* adjust OS_RDY_LIST's new head                        */
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	e00c      	b.n	80016e8 <OS_RdyListRemove+0x70>
        }
    } else {
#if (OS_CFG_DBG_EN > 0u)
        p_rdy_list->NbrEntries--;                               /* No,  one less entry                                  */
#endif
        p_tcb1->NextPtr = p_tcb2;
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	60da      	str	r2, [r3, #12]
        if (p_tcb2 == (OS_TCB *)0) {
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d103      	bne.n	80016e2 <OS_RdyListRemove+0x6a>
            p_rdy_list->TailPtr = p_tcb1;                       /* Removing the TCB at the tail, adj the tail ptr       */
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	e002      	b.n	80016e8 <OS_RdyListRemove+0x70>
        } else {
            p_tcb2->PrevPtr     = p_tcb1;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	611a      	str	r2, [r3, #16]
        }
    }
    p_tcb->PrevPtr = (OS_TCB *)0;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
    p_tcb->NextPtr = (OS_TCB *)0;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	60da      	str	r2, [r3, #12]

    OS_TRACE_TASK_SUSPENDED(p_tcb);
}
 80016f4:	bf00      	nop
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200012a4 	.word	0x200012a4

08001700 <OS_SchedRoundRobin>:
************************************************************************************************************************
*/

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
void  OS_SchedRoundRobin (OS_RDY_LIST  *p_rdy_list)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    OS_TCB  *p_tcb;
    CPU_SR_ALLOC();
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]


    if (OSSchedRoundRobinEn != OS_TRUE) {                       /* Make sure round-robin has been enabled               */
 800170c:	4b2b      	ldr	r3, [pc, #172]	@ (80017bc <OS_SchedRoundRobin+0xbc>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d14f      	bne.n	80017b4 <OS_SchedRoundRobin+0xb4>
        return;
    }

    CPU_CRITICAL_ENTER();
 8001714:	2040      	movs	r0, #64	@ 0x40
 8001716:	f7fe fd5b 	bl	80001d0 <CPU_SR_Save>
 800171a:	60f8      	str	r0, [r7, #12]
    p_tcb = p_rdy_list->HeadPtr;                                /* Decrement time quanta counter                        */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60bb      	str	r3, [r7, #8]

    if (p_tcb == (OS_TCB *)0) {
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d103      	bne.n	8001730 <OS_SchedRoundRobin+0x30>
        CPU_CRITICAL_EXIT();
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f7fe fd5f 	bl	80001ec <CPU_SR_Restore>
        return;
 800172e:	e042      	b.n	80017b6 <OS_SchedRoundRobin+0xb6>
    }

#if (OS_CFG_TASK_IDLE_EN > 0u)
    if (p_tcb == &OSIdleTaskTCB) {
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	4a23      	ldr	r2, [pc, #140]	@ (80017c0 <OS_SchedRoundRobin+0xc0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d103      	bne.n	8001740 <OS_SchedRoundRobin+0x40>
        CPU_CRITICAL_EXIT();
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7fe fd57 	bl	80001ec <CPU_SR_Restore>
        return;
 800173e:	e03a      	b.n	80017b6 <OS_SchedRoundRobin+0xb6>
    }
#endif

    if (p_tcb->TimeQuantaCtr > 0u) {
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <OS_SchedRoundRobin+0x52>
        p_tcb->TimeQuantaCtr--;
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800174c:	1e5a      	subs	r2, r3, #1
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (p_tcb->TimeQuantaCtr > 0u) {                            /* Task not done with its time quanta                   */
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <OS_SchedRoundRobin+0x62>
        CPU_CRITICAL_EXIT();
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f7fe fd46 	bl	80001ec <CPU_SR_Restore>
        return;
 8001760:	e029      	b.n	80017b6 <OS_SchedRoundRobin+0xb6>
    }

    if (p_rdy_list->HeadPtr == p_rdy_list->TailPtr) {           /* See if it's time to time slice current task          */
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	429a      	cmp	r2, r3
 800176c:	d103      	bne.n	8001776 <OS_SchedRoundRobin+0x76>
        CPU_CRITICAL_EXIT();                                    /* ... only if multiple tasks at same priority          */
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f7fe fd3c 	bl	80001ec <CPU_SR_Restore>
        return;
 8001774:	e01f      	b.n	80017b6 <OS_SchedRoundRobin+0xb6>
    }

    if (OSSchedLockNestingCtr > 0u) {                           /* Can't round-robin if the scheduler is locked         */
 8001776:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <OS_SchedRoundRobin+0xc4>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <OS_SchedRoundRobin+0x86>
        CPU_CRITICAL_EXIT();
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f7fe fd34 	bl	80001ec <CPU_SR_Restore>
        return;
 8001784:	e017      	b.n	80017b6 <OS_SchedRoundRobin+0xb6>
    }

    OS_RdyListMoveHeadToTail(p_rdy_list);                       /* Move current OS_TCB to the end of the list           */
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ff2a 	bl	80015e0 <OS_RdyListMoveHeadToTail>
    p_tcb = p_rdy_list->HeadPtr;                                /* Point to new OS_TCB at head of the list              */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60bb      	str	r3, [r7, #8]
    if (p_tcb->TimeQuanta == 0u) {                              /* See if we need to use the default time slice         */
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001796:	2b00      	cmp	r3, #0
 8001798:	d104      	bne.n	80017a4 <OS_SchedRoundRobin+0xa4>
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
 800179a:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <OS_SchedRoundRobin+0xc8>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80017a2:	e003      	b.n	80017ac <OS_SchedRoundRobin+0xac>
    } else {
        p_tcb->TimeQuantaCtr = p_tcb->TimeQuanta;               /* Load time slice counter with new time                */
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    CPU_CRITICAL_EXIT();
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f7fe fd1d 	bl	80001ec <CPU_SR_Restore>
 80017b2:	e000      	b.n	80017b6 <OS_SchedRoundRobin+0xb6>
        return;
 80017b4:	bf00      	nop
}
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200014ac 	.word	0x200014ac
 80017c0:	200011dc 	.word	0x200011dc
 80017c4:	200014a4 	.word	0x200014a4
 80017c8:	200014a8 	.word	0x200014a8

080017cc <OS_TaskBlock>:
************************************************************************************************************************
*/

void  OS_TaskBlock (OS_TCB   *p_tcb,
                    OS_TICK   timeout)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]

    elapsed = OS_DynTickGet();
#endif

#if (OS_CFG_TICK_EN > 0u)
    if (timeout > 0u) {                                         /* Add task to tick list if timeout non zero            */
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00b      	beq.n	80017f4 <OS_TaskBlock+0x28>
#if (OS_CFG_DYN_TICK_EN > 0u)
        (void)OS_TickListInsert(p_tcb, elapsed, (OSTickCtr + elapsed), timeout);
#else
        (void)OS_TickListInsert(p_tcb,      0u,             OSTickCtr, timeout);
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <OS_TaskBlock+0x40>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	2100      	movs	r1, #0
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f001 f867 	bl	80028b8 <OS_TickListInsert>
#endif
        p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2203      	movs	r2, #3
 80017ee:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 80017f2:	e003      	b.n	80017fc <OS_TaskBlock+0x30>
    } else {
        p_tcb->TaskState = OS_TASK_STATE_PEND;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2202      	movs	r2, #2
 80017f8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    }
#else
    (void)timeout;
    p_tcb->TaskState = OS_TASK_STATE_PEND;
#endif
    OS_RdyListRemove(p_tcb);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ff3b 	bl	8001678 <OS_RdyListRemove>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20001574 	.word	0x20001574

08001810 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_MemInit (OS_ERR  *p_err)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSMemDbgListPtr = (OS_MEM *)0;
    OSMemQty        = 0u;
#endif
   *p_err           = OS_ERR_NONE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	801a      	strh	r2, [r3, #0]
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <OS_MsgPoolInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MsgPoolInit (OS_ERR  *p_err)
{
 800182c:	b480      	push	{r7}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
    OS_MSG_QTY   i;
    OS_MSG_QTY   loops;


#if (OS_CFG_ARG_CHK_EN > 0u)
    if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
 8001834:	4b29      	ldr	r3, [pc, #164]	@ (80018dc <OS_MsgPoolInit+0xb0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d104      	bne.n	8001846 <OS_MsgPoolInit+0x1a>
       *p_err = OS_ERR_MSG_POOL_NULL_PTR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f245 721e 	movw	r2, #22302	@ 0x571e
 8001842:	801a      	strh	r2, [r3, #0]
        return;
 8001844:	e045      	b.n	80018d2 <OS_MsgPoolInit+0xa6>
    }
    if (OSCfg_MsgPoolSize == 0u) {
 8001846:	4b26      	ldr	r3, [pc, #152]	@ (80018e0 <OS_MsgPoolInit+0xb4>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d104      	bne.n	8001858 <OS_MsgPoolInit+0x2c>
       *p_err = OS_ERR_MSG_POOL_EMPTY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f245 721d 	movw	r2, #22301	@ 0x571d
 8001854:	801a      	strh	r2, [r3, #0]
        return;
 8001856:	e03c      	b.n	80018d2 <OS_MsgPoolInit+0xa6>
    }
#endif

    p_msg1 = OSCfg_MsgPoolBasePtr;
 8001858:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <OS_MsgPoolInit+0xb0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	617b      	str	r3, [r7, #20]
    p_msg2 = OSCfg_MsgPoolBasePtr;
 800185e:	4b1f      	ldr	r3, [pc, #124]	@ (80018dc <OS_MsgPoolInit+0xb0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	613b      	str	r3, [r7, #16]
    p_msg2++;
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	330c      	adds	r3, #12
 8001868:	613b      	str	r3, [r7, #16]
    loops  = OSCfg_MsgPoolSize - 1u;
 800186a:	4b1d      	ldr	r3, [pc, #116]	@ (80018e0 <OS_MsgPoolInit+0xb4>)
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	3b01      	subs	r3, #1
 8001870:	81bb      	strh	r3, [r7, #12]
    for (i = 0u; i < loops; i++) {                              /* Init. list of free OS_MSGs                           */
 8001872:	2300      	movs	r3, #0
 8001874:	81fb      	strh	r3, [r7, #14]
 8001876:	e011      	b.n	800189c <OS_MsgPoolInit+0x70>
        p_msg1->NextPtr = p_msg2;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	601a      	str	r2, [r3, #0]
        p_msg1->MsgPtr  = (void *)0;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2200      	movs	r2, #0
 8001882:	605a      	str	r2, [r3, #4]
        p_msg1->MsgSize =         0u;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2200      	movs	r2, #0
 8001888:	811a      	strh	r2, [r3, #8]
#if (OS_CFG_TS_EN > 0u)
        p_msg1->MsgTS   =         0u;
#endif
        p_msg1++;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	330c      	adds	r3, #12
 800188e:	617b      	str	r3, [r7, #20]
        p_msg2++;
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	330c      	adds	r3, #12
 8001894:	613b      	str	r3, [r7, #16]
    for (i = 0u; i < loops; i++) {                              /* Init. list of free OS_MSGs                           */
 8001896:	89fb      	ldrh	r3, [r7, #14]
 8001898:	3301      	adds	r3, #1
 800189a:	81fb      	strh	r3, [r7, #14]
 800189c:	89fa      	ldrh	r2, [r7, #14]
 800189e:	89bb      	ldrh	r3, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d3e9      	bcc.n	8001878 <OS_MsgPoolInit+0x4c>
    }
    p_msg1->NextPtr = (OS_MSG *)0;                              /* Last OS_MSG                                          */
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
    p_msg1->MsgPtr  = (void   *)0;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2200      	movs	r2, #0
 80018ae:	605a      	str	r2, [r3, #4]
    p_msg1->MsgSize =           0u;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2200      	movs	r2, #0
 80018b4:	811a      	strh	r2, [r3, #8]
#if (OS_CFG_TS_EN > 0u)
    p_msg1->MsgTS   =           0u;
#endif

    OSMsgPool.NextPtr    = OSCfg_MsgPoolBasePtr;
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <OS_MsgPoolInit+0xb0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <OS_MsgPoolInit+0xb8>)
 80018bc:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree    = OSCfg_MsgPoolSize;
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <OS_MsgPoolInit+0xb4>)
 80018c0:	881a      	ldrh	r2, [r3, #0]
 80018c2:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <OS_MsgPoolInit+0xb8>)
 80018c4:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed    = 0u;
 80018c6:	4b07      	ldr	r3, [pc, #28]	@ (80018e4 <OS_MsgPoolInit+0xb8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	80da      	strh	r2, [r3, #6]
#if (OS_CFG_DBG_EN > 0u)
    OSMsgPool.NbrUsedMax = 0u;
#endif
   *p_err                = OS_ERR_NONE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	801a      	strh	r2, [r3, #0]
}
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	08004518 	.word	0x08004518
 80018e0:	08004514 	.word	0x08004514
 80018e4:	20001290 	.word	0x20001290

080018e8 <OS_MsgQFreeAll>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_MSG_QTY  OS_MsgQFreeAll (OS_MSG_Q  *p_msg_q)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
    OS_MSG      *p_msg;
    OS_MSG_QTY   qty;



    qty = p_msg_q->NbrEntries;                                  /* Get the number of OS_MSGs being freed                */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	895b      	ldrh	r3, [r3, #10]
 80018f4:	81fb      	strh	r3, [r7, #14]
    if (p_msg_q->NbrEntries > 0u) {
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	895b      	ldrh	r3, [r3, #10]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d023      	beq.n	8001946 <OS_MsgQFreeAll+0x5e>
        p_msg                   = p_msg_q->InPtr;               /* Point to end of message chain                        */
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	60bb      	str	r3, [r7, #8]
        p_msg->NextPtr          = OSMsgPool.NextPtr;
 8001904:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <OS_MsgQFreeAll+0x6c>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	601a      	str	r2, [r3, #0]
        OSMsgPool.NextPtr       = p_msg_q->OutPtr;              /* Point to beginning of message chain                  */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	4a10      	ldr	r2, [pc, #64]	@ (8001954 <OS_MsgQFreeAll+0x6c>)
 8001912:	6013      	str	r3, [r2, #0]
        OSMsgPool.NbrUsed      -= p_msg_q->NbrEntries;          /* Update statistics for free list of messages          */
 8001914:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <OS_MsgQFreeAll+0x6c>)
 8001916:	88da      	ldrh	r2, [r3, #6]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	895b      	ldrh	r3, [r3, #10]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	b29a      	uxth	r2, r3
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <OS_MsgQFreeAll+0x6c>)
 8001922:	80da      	strh	r2, [r3, #6]
        OSMsgPool.NbrFree      += p_msg_q->NbrEntries;
 8001924:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <OS_MsgQFreeAll+0x6c>)
 8001926:	889a      	ldrh	r2, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	895b      	ldrh	r3, [r3, #10]
 800192c:	4413      	add	r3, r2
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <OS_MsgQFreeAll+0x6c>)
 8001932:	809a      	strh	r2, [r3, #4]
        p_msg_q->NbrEntries     =           0u;                 /* Flush the message queue                              */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	815a      	strh	r2, [r3, #10]
#if (OS_CFG_DBG_EN > 0u)
        p_msg_q->NbrEntriesMax  =           0u;
#endif
        p_msg_q->InPtr          = (OS_MSG *)0;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
        p_msg_q->OutPtr         = (OS_MSG *)0;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
    }
    return (qty);
 8001946:	89fb      	ldrh	r3, [r7, #14]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	20001290 	.word	0x20001290

08001958 <OS_MsgQInit>:
************************************************************************************************************************
*/

void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
                   OS_MSG_QTY   size)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
    p_msg_q->NbrEntriesSize = size;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	811a      	strh	r2, [r3, #8]
    p_msg_q->NbrEntries     =           0u;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	815a      	strh	r2, [r3, #10]
#if (OS_CFG_DBG_EN > 0u)
    p_msg_q->NbrEntriesMax  =           0u;
#endif
    p_msg_q->InPtr          = (OS_MSG *)0;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
    p_msg_q->OutPtr         = (OS_MSG *)0;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <OSMutexCreate>:
*/

void  OSMutexCreate (OS_MUTEX  *p_mutex,
                     CPU_CHAR  *p_name,
                     OS_ERR    *p_err)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to be called from an ISR                 */
 8001998:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <OSMutexCreate+0x88>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d004      	beq.n	80019aa <OSMutexCreate+0x22>
       *p_err = OS_ERR_CREATE_ISR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f642 62e1 	movw	r2, #12001	@ 0x2ee1
 80019a6:	801a      	strh	r2, [r3, #0]
        return;
 80019a8:	e02f      	b.n	8001a0a <OSMutexCreate+0x82>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_mutex == (OS_MUTEX *)0) {                             /* Validate 'p_mutex'                                   */
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d104      	bne.n	80019ba <OSMutexCreate+0x32>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 80019b6:	801a      	strh	r2, [r3, #0]
        return;
 80019b8:	e027      	b.n	8001a0a <OSMutexCreate+0x82>
    }
#endif

    CPU_CRITICAL_ENTER();
 80019ba:	2040      	movs	r0, #64	@ 0x40
 80019bc:	f7fe fc08 	bl	80001d0 <CPU_SR_Save>
 80019c0:	6178      	str	r0, [r7, #20]
#if (OS_OBJ_TYPE_REQ > 0u)
#if (OS_CFG_OBJ_CREATED_CHK_EN > 0u)
    if (p_mutex->Type == OS_OBJ_TYPE_MUTEX) {
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a13      	ldr	r2, [pc, #76]	@ (8001a14 <OSMutexCreate+0x8c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d107      	bne.n	80019dc <OSMutexCreate+0x54>
        CPU_CRITICAL_EXIT();
 80019cc:	6978      	ldr	r0, [r7, #20]
 80019ce:	f7fe fc0d 	bl	80001ec <CPU_SR_Restore>
        *p_err = OS_ERR_OBJ_CREATED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f645 52c1 	movw	r2, #24001	@ 0x5dc1
 80019d8:	801a      	strh	r2, [r3, #0]
        return;
 80019da:	e016      	b.n	8001a0a <OSMutexCreate+0x82>
    }
#endif
    p_mutex->Type              =  OS_OBJ_TYPE_MUTEX;            /* Mark the data structure as a mutex                   */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4a0d      	ldr	r2, [pc, #52]	@ (8001a14 <OSMutexCreate+0x8c>)
 80019e0:	601a      	str	r2, [r3, #0]
#if (OS_CFG_DBG_EN > 0u)
    p_mutex->NamePtr           =  p_name;
#else
    (void)p_name;
#endif
    p_mutex->MutexGrpNextPtr   = (OS_MUTEX *)0;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
    p_mutex->OwnerTCBPtr       = (OS_TCB   *)0;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
    p_mutex->OwnerNestingCtr   =             0u;                /* Mutex is available                                   */
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	751a      	strb	r2, [r3, #20]
#if (OS_CFG_TS_EN > 0u)
    p_mutex->TS                =             0u;
#endif
    OS_PendListInit(&p_mutex->PendList);                        /* Initialize the waiting list                          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3304      	adds	r3, #4
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fc1d 	bl	8001238 <OS_PendListInit>
    OS_MutexDbgListAdd(p_mutex);
    OSMutexQty++;
#endif

    OS_TRACE_MUTEX_CREATE(p_mutex, p_name);
    CPU_CRITICAL_EXIT();
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f7fe fbf4 	bl	80001ec <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	801a      	strh	r2, [r3, #0]
}
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20001284 	.word	0x20001284
 8001a14:	5854554d 	.word	0x5854554d

08001a18 <OSMutexPend>:
void  OSMutexPend (OS_MUTEX  *p_mutex,
                   OS_TICK    timeout,
                   OS_OPT     opt,
                   CPU_TS    *p_ts,
                   OS_ERR    *p_err)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	4613      	mov	r3, r2
 8001a26:	80fb      	strh	r3, [r7, #6]
    OS_TCB  *p_tcb;
    CPU_SR_ALLOC();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
 8001a2c:	4b6b      	ldr	r3, [pc, #428]	@ (8001bdc <OSMutexPend+0x1c4>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d004      	beq.n	8001a3e <OSMutexPend+0x26>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_PEND_ISR);
       *p_err = OS_ERR_PEND_ISR;
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	f246 12ae 	movw	r2, #25006	@ 0x61ae
 8001a3a:	801a      	strh	r2, [r3, #0]
        return;
 8001a3c:	e0cb      	b.n	8001bd6 <OSMutexPend+0x1be>
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8001a3e:	4b68      	ldr	r3, [pc, #416]	@ (8001be0 <OSMutexPend+0x1c8>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d004      	beq.n	8001a50 <OSMutexPend+0x38>
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OS_NOT_RUNNING);
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	f645 6289 	movw	r2, #24201	@ 0x5e89
 8001a4c:	801a      	strh	r2, [r3, #0]
        return;
 8001a4e:	e0c2      	b.n	8001bd6 <OSMutexPend+0x1be>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)
    if (p_mutex == (OS_MUTEX *)0) {                             /* Validate arguments                                   */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d104      	bne.n	8001a60 <OSMutexPend+0x48>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OBJ_PTR_NULL);
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	f645 52c3 	movw	r2, #24003	@ 0x5dc3
 8001a5c:	801a      	strh	r2, [r3, #0]
        return;
 8001a5e:	e0ba      	b.n	8001bd6 <OSMutexPend+0x1be>
    }
    switch (opt) {                                              /* Validate 'opt'                                       */
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <OSMutexPend+0x5e>
 8001a66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a6a:	d004      	beq.n	8001a76 <OSMutexPend+0x5e>
             break;

        default:
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
             OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OPT_INVALID);
            *p_err = OS_ERR_OPT_INVALID;
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	f645 6225 	movw	r2, #24101	@ 0x5e25
 8001a72:	801a      	strh	r2, [r3, #0]
             return;
 8001a74:	e0af      	b.n	8001bd6 <OSMutexPend+0x1be>
             break;
 8001a76:	bf00      	nop
    }
#endif

#if (OS_CFG_OBJ_TYPE_CHK_EN > 0u)
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {                   /* Make sure mutex was created                          */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a59      	ldr	r2, [pc, #356]	@ (8001be4 <OSMutexPend+0x1cc>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d004      	beq.n	8001a8c <OSMutexPend+0x74>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_OBJ_TYPE);
       *p_err = OS_ERR_OBJ_TYPE;
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	f645 52c4 	movw	r2, #24004	@ 0x5dc4
 8001a88:	801a      	strh	r2, [r3, #0]
        return;
 8001a8a:	e0a4      	b.n	8001bd6 <OSMutexPend+0x1be>
    }
#endif

    CPU_CRITICAL_ENTER();
 8001a8c:	2040      	movs	r0, #64	@ 0x40
 8001a8e:	f7fe fb9f 	bl	80001d0 <CPU_SR_Save>
 8001a92:	6178      	str	r0, [r7, #20]
    if (p_mutex->OwnerNestingCtr == 0u) {                       /* Resource available?                                  */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	7d1b      	ldrb	r3, [r3, #20]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d113      	bne.n	8001ac4 <OSMutexPend+0xac>
        p_mutex->OwnerTCBPtr     = OSTCBCurPtr;                 /* Yes, caller may proceed                              */
 8001a9c:	4b52      	ldr	r3, [pc, #328]	@ (8001be8 <OSMutexPend+0x1d0>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
        p_mutex->OwnerNestingCtr = 1u;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	751a      	strb	r2, [r3, #20]
#if (OS_CFG_TS_EN > 0u)
        if (p_ts != (CPU_TS *)0) {
           *p_ts = p_mutex->TS;
        }
#endif
        OS_MutexGrpAdd(OSTCBCurPtr, p_mutex);                   /* Add mutex to owner's group                           */
 8001aaa:	4b4f      	ldr	r3, [pc, #316]	@ (8001be8 <OSMutexPend+0x1d0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68f9      	ldr	r1, [r7, #12]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 f89d 	bl	8001bf0 <OS_MutexGrpAdd>
        CPU_CRITICAL_EXIT();
 8001ab6:	6978      	ldr	r0, [r7, #20]
 8001ab8:	f7fe fb98 	bl	80001ec <CPU_SR_Restore>
        OS_TRACE_MUTEX_PEND(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_NONE);
       *p_err = OS_ERR_NONE;
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	801a      	strh	r2, [r3, #0]
        return;
 8001ac2:	e088      	b.n	8001bd6 <OSMutexPend+0x1be>
    }

    if (OSTCBCurPtr == p_mutex->OwnerTCBPtr) {                  /* See if current task is already the owner of the mutex*/
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	4b47      	ldr	r3, [pc, #284]	@ (8001be8 <OSMutexPend+0x1d0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d119      	bne.n	8001b04 <OSMutexPend+0xec>
        if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)-1) {
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	7d1b      	ldrb	r3, [r3, #20]
 8001ad4:	2bff      	cmp	r3, #255	@ 0xff
 8001ad6:	d107      	bne.n	8001ae8 <OSMutexPend+0xd0>
            CPU_CRITICAL_EXIT();
 8001ad8:	6978      	ldr	r0, [r7, #20]
 8001ada:	f7fe fb87 	bl	80001ec <CPU_SR_Restore>
            OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_MUTEX_OVF);
           *p_err = OS_ERR_MUTEX_OVF;
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	f245 7284 	movw	r2, #22404	@ 0x5784
 8001ae4:	801a      	strh	r2, [r3, #0]
            return;
 8001ae6:	e076      	b.n	8001bd6 <OSMutexPend+0x1be>
        }
        p_mutex->OwnerNestingCtr++;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	7d1b      	ldrb	r3, [r3, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	751a      	strb	r2, [r3, #20]
#if (OS_CFG_TS_EN > 0u)
        if (p_ts != (CPU_TS *)0) {
           *p_ts = p_mutex->TS;
        }
#endif
        CPU_CRITICAL_EXIT();
 8001af4:	6978      	ldr	r0, [r7, #20]
 8001af6:	f7fe fb79 	bl	80001ec <CPU_SR_Restore>
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_MUTEX_OWNER);
       *p_err = OS_ERR_MUTEX_OWNER;                             /* Indicate that current task already owns the mutex    */
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	f245 7282 	movw	r2, #22402	@ 0x5782
 8001b00:	801a      	strh	r2, [r3, #0]
        return;
 8001b02:	e068      	b.n	8001bd6 <OSMutexPend+0x1be>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {               /* Caller wants to block if not available?              */
 8001b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	da07      	bge.n	8001b1c <OSMutexPend+0x104>
        CPU_CRITICAL_EXIT();
 8001b0c:	6978      	ldr	r0, [r7, #20]
 8001b0e:	f7fe fb6d 	bl	80001ec <CPU_SR_Restore>
           *p_ts = 0u;
        }
#endif
        OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
        OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_PEND_WOULD_BLOCK);
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                        /* No                                                   */
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	f246 12b0 	movw	r2, #25008	@ 0x61b0
 8001b18:	801a      	strh	r2, [r3, #0]
        return;
 8001b1a:	e05c      	b.n	8001bd6 <OSMutexPend+0x1be>
    } else {
        if (OSSchedLockNestingCtr > 0u) {                       /* Can't pend when the scheduler is locked              */
 8001b1c:	4b33      	ldr	r3, [pc, #204]	@ (8001bec <OSMutexPend+0x1d4>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d007      	beq.n	8001b34 <OSMutexPend+0x11c>
            CPU_CRITICAL_EXIT();
 8001b24:	6978      	ldr	r0, [r7, #20]
 8001b26:	f7fe fb61 	bl	80001ec <CPU_SR_Restore>
               *p_ts = 0u;
            }
#endif
            OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            OS_TRACE_MUTEX_PEND_EXIT(OS_ERR_SCHED_LOCKED);
           *p_err = OS_ERR_SCHED_LOCKED;
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	f646 5263 	movw	r2, #28003	@ 0x6d63
 8001b30:	801a      	strh	r2, [r3, #0]
            return;
 8001b32:	e050      	b.n	8001bd6 <OSMutexPend+0x1be>
        }
    }

    p_tcb = p_mutex->OwnerTCBPtr;                               /* Point to the TCB of the Mutex owner                  */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	613b      	str	r3, [r7, #16]
    if (p_tcb->Prio > OSTCBCurPtr->Prio) {                      /* See if mutex owner has a lower priority than current */
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8001b40:	4b29      	ldr	r3, [pc, #164]	@ (8001be8 <OSMutexPend+0x1d0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d907      	bls.n	8001b5c <OSMutexPend+0x144>
        OS_TaskChangePrio(p_tcb, OSTCBCurPtr->Prio);
 8001b4c:	4b26      	ldr	r3, [pc, #152]	@ (8001be8 <OSMutexPend+0x1d0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001b54:	4619      	mov	r1, r3
 8001b56:	6938      	ldr	r0, [r7, #16]
 8001b58:	f000 fddc 	bl	8002714 <OS_TaskChangePrio>
        OS_TRACE_MUTEX_TASK_PRIO_INHERIT(p_tcb, p_tcb->Prio);
    }

    OS_Pend((OS_PEND_OBJ *)((void *)p_mutex),                   /* Block task pending on Mutex                          */
 8001b5c:	4b22      	ldr	r3, [pc, #136]	@ (8001be8 <OSMutexPend+0x1d0>)
 8001b5e:	6819      	ldr	r1, [r3, #0]
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2204      	movs	r2, #4
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f7ff fb21 	bl	80011ac <OS_Pend>
             OSTCBCurPtr,
             OS_TASK_PEND_ON_MUTEX,
             timeout);

    CPU_CRITICAL_EXIT();
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7fe fb3e 	bl	80001ec <CPU_SR_Restore>
    OS_TRACE_MUTEX_PEND_BLOCK(p_mutex);
    OSSched();                                                  /* Find the next highest priority task ready to run     */
 8001b70:	f7ff fa1e 	bl	8000fb0 <OSSched>

    CPU_CRITICAL_ENTER();
 8001b74:	2040      	movs	r0, #64	@ 0x40
 8001b76:	f7fe fb2b 	bl	80001d0 <CPU_SR_Save>
 8001b7a:	6178      	str	r0, [r7, #20]
    switch (OSTCBCurPtr->PendStatus) {
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001be8 <OSMutexPend+0x1d0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d81e      	bhi.n	8001bc6 <OSMutexPend+0x1ae>
 8001b88:	a201      	add	r2, pc, #4	@ (adr r2, 8001b90 <OSMutexPend+0x178>)
 8001b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8e:	bf00      	nop
 8001b90:	08001ba1 	.word	0x08001ba1
 8001b94:	08001ba9 	.word	0x08001ba9
 8001b98:	08001bbd 	.word	0x08001bbd
 8001b9c:	08001bb3 	.word	0x08001bb3
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_MUTEX_PEND(p_mutex);
            *p_err = OS_ERR_NONE;
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	801a      	strh	r2, [r3, #0]
             break;
 8001ba6:	e013      	b.n	8001bd0 <OSMutexPend+0x1b8>
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_PEND_ABORT;
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	f246 12a9 	movw	r2, #25001	@ 0x61a9
 8001bae:	801a      	strh	r2, [r3, #0]
             break;
 8001bb0:	e00e      	b.n	8001bd0 <OSMutexPend+0x1b8>
             if (p_ts != (CPU_TS *)0) {
                *p_ts = 0u;
             }
#endif
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_TIMEOUT;
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	f247 22d9 	movw	r2, #29401	@ 0x72d9
 8001bb8:	801a      	strh	r2, [r3, #0]
             break;
 8001bba:	e009      	b.n	8001bd0 <OSMutexPend+0x1b8>
             if (p_ts != (CPU_TS *)0) {
                *p_ts = OSTCBCurPtr->TS;
             }
#endif
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_OBJ_DEL;
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	f645 52c2 	movw	r2, #24002	@ 0x5dc2
 8001bc2:	801a      	strh	r2, [r3, #0]
             break;
 8001bc4:	e004      	b.n	8001bd0 <OSMutexPend+0x1b8>

        default:
             OS_TRACE_MUTEX_PEND_FAILED(p_mutex);
            *p_err = OS_ERR_STATUS_INVALID;
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	f646 622e 	movw	r2, #28206	@ 0x6e2e
 8001bcc:	801a      	strh	r2, [r3, #0]
             break;
 8001bce:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
 8001bd0:	6978      	ldr	r0, [r7, #20]
 8001bd2:	f7fe fb0b 	bl	80001ec <CPU_SR_Restore>
    OS_TRACE_MUTEX_PEND_EXIT(*p_err);
}
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20001284 	.word	0x20001284
 8001be0:	20001285 	.word	0x20001285
 8001be4:	5854554d 	.word	0x5854554d
 8001be8:	20001658 	.word	0x20001658
 8001bec:	200014a4 	.word	0x200014a4

08001bf0 <OS_MutexGrpAdd>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpAdd (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
    p_mutex->MutexGrpNextPtr = p_tcb->MutexGrpHeadPtr;      /* The mutex grp is not sorted add to head of list.       */
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	60da      	str	r2, [r3, #12]
    p_tcb->MutexGrpHeadPtr   = p_mutex;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <OS_MutexGrpRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpRemove (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
    OS_MUTEX  **pp_mutex;

    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3334      	adds	r3, #52	@ 0x34
 8001c22:	60fb      	str	r3, [r7, #12]

    while(*pp_mutex != p_mutex) {
 8001c24:	e003      	b.n	8001c2e <OS_MutexGrpRemove+0x1a>
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	330c      	adds	r3, #12
 8001c2c:	60fb      	str	r3, [r7, #12]
    while(*pp_mutex != p_mutex) {
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d1f6      	bne.n	8001c26 <OS_MutexGrpRemove+0x12>
    }

    *pp_mutex = (*pp_mutex)->MutexGrpNextPtr;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	601a      	str	r2, [r3, #0]
}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <OS_MutexGrpPrioFindHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_MutexGrpPrioFindHighest (OS_TCB  *p_tcb)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b087      	sub	sp, #28
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
    OS_PRIO     highest_prio;
    OS_PRIO     prio;
    OS_TCB     *p_head;


    highest_prio = (OS_PRIO)(OS_CFG_PRIO_MAX - 1u);
 8001c56:	233f      	movs	r3, #63	@ 0x3f
 8001c58:	74fb      	strb	r3, [r7, #19]
    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3334      	adds	r3, #52	@ 0x34
 8001c5e:	617b      	str	r3, [r7, #20]

    while(*pp_mutex != (OS_MUTEX *)0) {
 8001c60:	e014      	b.n	8001c8c <OS_MutexGrpPrioFindHighest+0x3e>
        p_head = (*pp_mutex)->PendList.HeadPtr;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	60fb      	str	r3, [r7, #12]
        if (p_head != (OS_TCB *)0) {
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d009      	beq.n	8001c84 <OS_MutexGrpPrioFindHighest+0x36>
            prio = p_head->Prio;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001c76:	72fb      	strb	r3, [r7, #11]
            if(prio < highest_prio) {
 8001c78:	7afa      	ldrb	r2, [r7, #11]
 8001c7a:	7cfb      	ldrb	r3, [r7, #19]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d201      	bcs.n	8001c84 <OS_MutexGrpPrioFindHighest+0x36>
                highest_prio = prio;
 8001c80:	7afb      	ldrb	r3, [r7, #11]
 8001c82:	74fb      	strb	r3, [r7, #19]
            }
        }
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	330c      	adds	r3, #12
 8001c8a:	617b      	str	r3, [r7, #20]
    while(*pp_mutex != (OS_MUTEX *)0) {
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1e6      	bne.n	8001c62 <OS_MutexGrpPrioFindHighest+0x14>
    }

    return (highest_prio);
 8001c94:	7cfb      	ldrb	r3, [r7, #19]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	371c      	adds	r7, #28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <OS_MutexGrpPostAll>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpPostAll (OS_TCB  *p_tcb)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b08a      	sub	sp, #40	@ 0x28
 8001ca6:	af02      	add	r7, sp, #8
 8001ca8:	6078      	str	r0, [r7, #4]
    CPU_TS         ts;
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb_new;


    p_mutex = p_tcb->MutexGrpHeadPtr;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cae:	61fb      	str	r3, [r7, #28]

    while(p_mutex != (OS_MUTEX *)0) {
 8001cb0:	e02d      	b.n	8001d0e <OS_MutexGrpPostAll+0x6c>

        OS_TRACE_MUTEX_POST(p_mutex);

        p_mutex_next = p_mutex->MutexGrpNextPtr;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	61bb      	str	r3, [r7, #24]
#if (OS_CFG_TS_EN > 0u)
        ts           = OS_TS_GET();                             /* Get timestamp                                        */
        p_mutex->TS  = ts;
#else
        ts           = 0u;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
#endif
        OS_MutexGrpRemove(p_tcb,  p_mutex);                     /* Remove mutex from owner's group                      */
 8001cbc:	69f9      	ldr	r1, [r7, #28]
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ffa8 	bl	8001c14 <OS_MutexGrpRemove>

        p_pend_list = &p_mutex->PendList;
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	613b      	str	r3, [r7, #16]
        if (p_pend_list->HeadPtr == (OS_TCB *)0) {              /* Any task waiting on mutex?                           */
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <OS_MutexGrpPostAll+0x3e>
            p_mutex->OwnerNestingCtr =           0u;            /* Decrement owner's nesting counter                    */
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	751a      	strb	r2, [r3, #20]
            p_mutex->OwnerTCBPtr     = (OS_TCB *)0;             /* No                                                   */
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]
 8001cde:	e014      	b.n	8001d0a <OS_MutexGrpPostAll+0x68>
        } else {
                                                                /* Get TCB from head of pend list                       */
            p_tcb_new                = p_pend_list->HeadPtr;
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]
            p_mutex->OwnerTCBPtr     = p_tcb;                   /* Give mutex to new owner                              */
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	611a      	str	r2, [r3, #16]
            p_mutex->OwnerNestingCtr = 1u;
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	751a      	strb	r2, [r3, #20]
            OS_MutexGrpAdd(p_tcb_new, p_mutex);
 8001cf2:	69f9      	ldr	r1, [r7, #28]
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f7ff ff7b 	bl	8001bf0 <OS_MutexGrpAdd>
                                                                /* Post to mutex                                        */
            OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2200      	movs	r2, #0
 8001d02:	68f9      	ldr	r1, [r7, #12]
 8001d04:	69f8      	ldr	r0, [r7, #28]
 8001d06:	f7ff fb59 	bl	80013bc <OS_Post>
                                   (void *)0,
                                   0u,
                                   ts);
        }

        p_mutex = p_mutex_next;
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	61fb      	str	r3, [r7, #28]
    while(p_mutex != (OS_MUTEX *)0) {
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1ce      	bne.n	8001cb2 <OS_MutexGrpPostAll+0x10>
    }

}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3720      	adds	r7, #32
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <OS_PrioInit>:
* Note       : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_PrioInit (void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
    CPU_DATA  i;


                                                                /* Clear the bitmap table ... no task is ready          */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	e007      	b.n	8001d3c <OS_PrioInit+0x1c>
         OSPrioTbl[i] = 0u;
 8001d2c:	4a08      	ldr	r2, [pc, #32]	@ (8001d50 <OS_PrioInit+0x30>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2100      	movs	r1, #0
 8001d32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d9f4      	bls.n	8001d2c <OS_PrioInit+0xc>
    }

#if (OS_CFG_TASK_IDLE_EN == 0u)
    OS_PrioInsert ((OS_PRIO)(OS_CFG_PRIO_MAX - 1u));            /* Insert what would be the idle task                   */
#endif
}
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	2000129c 	.word	0x2000129c

08001d54 <OS_PrioGetHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_PrioGetHighest (void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
#if   (OS_CFG_PRIO_MAX <= (CPU_CFG_DATA_SIZE * 8u))             /* Optimize for less than word size nbr of priorities   */
    return ((OS_PRIO)CPU_CntLeadZeros(OSPrioTbl[0]));


#elif (OS_CFG_PRIO_MAX <= (2u * (CPU_CFG_DATA_SIZE * 8u)))      /* Optimize for    2x the word size nbr of priorities   */
    if (OSPrioTbl[0] == 0u) {
 8001d58:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <OS_PrioGetHighest+0x34>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <OS_PrioGetHighest+0x20>
        return ((OS_PRIO)((OS_PRIO)CPU_CntLeadZeros(OSPrioTbl[1]) + (CPU_CFG_DATA_SIZE * 8u)));
 8001d60:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <OS_PrioGetHighest+0x34>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fa4e 	bl	8000206 <CPU_CntLeadZeros>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	3320      	adds	r3, #32
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	e006      	b.n	8001d82 <OS_PrioGetHighest+0x2e>
    } else {
        return ((OS_PRIO)((OS_PRIO)CPU_CntLeadZeros(OSPrioTbl[0])));
 8001d74:	4b04      	ldr	r3, [pc, #16]	@ (8001d88 <OS_PrioGetHighest+0x34>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fa44 	bl	8000206 <CPU_CntLeadZeros>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	b2db      	uxtb	r3, r3
    }
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);                  /* Find the position of the first bit set at the entry  */

    return (prio);
#endif
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000129c 	.word	0x2000129c

08001d8c <OS_PrioInsert>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioInsert (OS_PRIO  prio)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
#if   (OS_CFG_PRIO_MAX <= (CPU_CFG_DATA_SIZE * 8u))             /* Optimize for less than word size nbr of priorities   */
    OSPrioTbl[0] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio);


#elif (OS_CFG_PRIO_MAX <= (2u * (CPU_CFG_DATA_SIZE * 8u)))      /* Optimize for    2x the word size nbr of priorities   */
    if (prio < (CPU_CFG_DATA_SIZE * 8u)) {
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2b1f      	cmp	r3, #31
 8001d9a:	d80a      	bhi.n	8001db2 <OS_PrioInsert+0x26>
        OSPrioTbl[0] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio);
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <OS_PrioInsert+0x48>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001da6:	fa21 f303 	lsr.w	r3, r1, r3
 8001daa:	4313      	orrs	r3, r2
 8001dac:	4a09      	ldr	r2, [pc, #36]	@ (8001dd4 <OS_PrioInsert+0x48>)
 8001dae:	6013      	str	r3, [r2, #0]

    ix             = (OS_PRIO)(prio /  (CPU_CFG_DATA_SIZE * 8u));
    bit_nbr        = (CPU_DATA)prio & ((CPU_CFG_DATA_SIZE * 8u) - 1u);
    OSPrioTbl[ix] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - bit_nbr);
#endif
}
 8001db0:	e00a      	b.n	8001dc8 <OS_PrioInsert+0x3c>
        OSPrioTbl[1] |= (CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - (prio - (CPU_CFG_DATA_SIZE * 8u)));
 8001db2:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <OS_PrioInsert+0x48>)
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	4a03      	ldr	r2, [pc, #12]	@ (8001dd4 <OS_PrioInsert+0x48>)
 8001dc6:	6053      	str	r3, [r2, #4]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	2000129c 	.word	0x2000129c

08001dd8 <OS_PrioRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioRemove (OS_PRIO  prio)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
#if   (OS_CFG_PRIO_MAX <= (CPU_CFG_DATA_SIZE * 8u))             /* Optimize for less than word size nbr of priorities   */
    OSPrioTbl[0] &= ~((CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio));


#elif (OS_CFG_PRIO_MAX <= (2u * (CPU_CFG_DATA_SIZE * 8u)))      /* Optimize for    2x the word size nbr of priorities   */
    if (prio < (CPU_CFG_DATA_SIZE * 8u)) {
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2b1f      	cmp	r3, #31
 8001de6:	d80b      	bhi.n	8001e00 <OS_PrioRemove+0x28>
        OSPrioTbl[0] &= ~((CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - prio));
 8001de8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e24 <OS_PrioRemove+0x4c>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001df2:	fa21 f303 	lsr.w	r3, r1, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	4013      	ands	r3, r2
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <OS_PrioRemove+0x4c>)
 8001dfc:	6013      	str	r3, [r2, #0]

    ix             =   (OS_PRIO)(prio  /   (CPU_CFG_DATA_SIZE * 8u));
    bit_nbr        =   (CPU_DATA)prio  &  ((CPU_CFG_DATA_SIZE * 8u) - 1u);
    OSPrioTbl[ix] &= ~((CPU_DATA)  1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - bit_nbr));
#endif
}
 8001dfe:	e00b      	b.n	8001e18 <OS_PrioRemove+0x40>
        OSPrioTbl[1] &= ~((CPU_DATA)1u << (((CPU_CFG_DATA_SIZE * 8u) - 1u) - (prio - (CPU_CFG_DATA_SIZE * 8u))));
 8001e00:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <OS_PrioRemove+0x4c>)
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	4013      	ands	r3, r2
 8001e14:	4a03      	ldr	r2, [pc, #12]	@ (8001e24 <OS_PrioRemove+0x4c>)
 8001e16:	6053      	str	r3, [r2, #4]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	2000129c 	.word	0x2000129c

08001e28 <OSStatReset>:
* Note(s)    : none
************************************************************************************************************************
*/

void  OSStatReset (OS_ERR  *p_err)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
#endif
#if (OS_CFG_Q_EN > 0u)
    OS_Q        *p_q;
#endif
#endif
    CPU_SR_ALLOC();
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 8001e34:	2040      	movs	r0, #64	@ 0x40
 8001e36:	f7fe f9cb 	bl	80001d0 <CPU_SR_Save>
 8001e3a:	60f8      	str	r0, [r7, #12]
#if (OS_CFG_STAT_TASK_EN > 0u)
    OSStatTaskCPUUsageMax = 0u;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <OSStatReset+0x30>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	801a      	strh	r2, [r3, #0]
#endif

#if ((OS_MSG_EN > 0u) && (OS_CFG_DBG_EN > 0u))
    OSMsgPool.NbrUsedMax  = 0u;
#endif
    CPU_CRITICAL_EXIT();
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f7fe f9d2 	bl	80001ec <CPU_SR_Restore>
        CPU_CRITICAL_EXIT();
    }
#endif


   *p_err = OS_ERR_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	801a      	strh	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200014b0 	.word	0x200014b0

08001e5c <OS_StatTask>:
*              4) This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTask (void  *p_arg)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08c      	sub	sp, #48	@ 0x30
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) && (OS_CFG_ISR_STK_SIZE > 0u)
    CPU_STK     *p_stk;
    CPU_INT32U   free_stk;
    CPU_INT32U   size_stk;
#endif
    CPU_SR_ALLOC();
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]


    (void)p_arg;                                                /* Prevent compiler warning for not using 'p_arg'       */

    while (OSStatTaskRdy != OS_TRUE) {
 8001e68:	e008      	b.n	8001e7c <OS_StatTask+0x20>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,                   /* Wait until statistic task is ready                   */
 8001e6a:	4b64      	ldr	r3, [pc, #400]	@ (8001ffc <OS_StatTask+0x1a0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	f107 020e 	add.w	r2, r7, #14
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 ff3a 	bl	8002cf0 <OSTimeDly>
    while (OSStatTaskRdy != OS_TRUE) {
 8001e7c:	4b60      	ldr	r3, [pc, #384]	@ (8002000 <OS_StatTask+0x1a4>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d1f2      	bne.n	8001e6a <OS_StatTask+0xe>
                  OS_OPT_TIME_DLY,
                  &err);
    }
    OSStatReset(&err);                                          /* Reset statistics                                     */
 8001e84:	f107 030e 	add.w	r3, r7, #14
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ffcd 	bl	8001e28 <OSStatReset>

    dly = (OS_TICK)0;                                           /* Compute statistic task sleep delay                   */
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 8001e92:	4b5c      	ldr	r3, [pc, #368]	@ (8002004 <OS_StatTask+0x1a8>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b59      	ldr	r3, [pc, #356]	@ (8001ffc <OS_StatTask+0x1a0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d906      	bls.n	8001eac <OS_StatTask+0x50>
        dly = (OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 8001e9e:	4b59      	ldr	r3, [pc, #356]	@ (8002004 <OS_StatTask+0x1a8>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4b56      	ldr	r3, [pc, #344]	@ (8001ffc <OS_StatTask+0x1a0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    if (dly == 0u) {
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <OS_StatTask+0x64>
        dly =  (OSCfg_TickRate_Hz / 10u);
 8001eb2:	4b54      	ldr	r3, [pc, #336]	@ (8002004 <OS_StatTask+0x1a8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a54      	ldr	r2, [pc, #336]	@ (8002008 <OS_StatTask+0x1ac>)
 8001eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebc:	08db      	lsrs	r3, r3, #3
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef  CPU_CFG_INT_DIS_MEAS_EN
        OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
#endif
#endif

        CPU_CRITICAL_ENTER();                                   /* ---------------- OVERALL CPU USAGE ----------------- */
 8001ec0:	2040      	movs	r0, #64	@ 0x40
 8001ec2:	f7fe f985 	bl	80001d0 <CPU_SR_Save>
 8001ec6:	61b8      	str	r0, [r7, #24]
        OSStatTaskCtrRun   = OSStatTaskCtr;                     /* Obtain the of the stat counter for the past .1 second*/
 8001ec8:	4b50      	ldr	r3, [pc, #320]	@ (800200c <OS_StatTask+0x1b0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a50      	ldr	r2, [pc, #320]	@ (8002010 <OS_StatTask+0x1b4>)
 8001ece:	6013      	str	r3, [r2, #0]
        OSStatTaskCtr      = 0u;                                /* Reset the stat counter for the next .1 second        */
 8001ed0:	4b4e      	ldr	r3, [pc, #312]	@ (800200c <OS_StatTask+0x1b0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
        CPU_CRITICAL_EXIT();
 8001ed6:	69b8      	ldr	r0, [r7, #24]
 8001ed8:	f7fe f988 	bl	80001ec <CPU_SR_Restore>

        if (OSStatTaskCtrMax > OSStatTaskCtrRun) {              /* Compute CPU Usage with best resolution               */
 8001edc:	4b4d      	ldr	r3, [pc, #308]	@ (8002014 <OS_StatTask+0x1b8>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b4b      	ldr	r3, [pc, #300]	@ (8002010 <OS_StatTask+0x1b4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d94f      	bls.n	8001f88 <OS_StatTask+0x12c>
            if (OSStatTaskCtrMax < 400000u) {                   /* 1 to       400,000                                   */
 8001ee8:	4b4a      	ldr	r3, [pc, #296]	@ (8002014 <OS_StatTask+0x1b8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a4a      	ldr	r2, [pc, #296]	@ (8002018 <OS_StatTask+0x1bc>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d805      	bhi.n	8001efe <OS_StatTask+0xa2>
                ctr_mult = 10000u;
 8001ef2:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =     1u;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001efc:	e024      	b.n	8001f48 <OS_StatTask+0xec>
            } else if (OSStatTaskCtrMax <   4000000u) {         /* 400,000 to     4,000,000                             */
 8001efe:	4b45      	ldr	r3, [pc, #276]	@ (8002014 <OS_StatTask+0x1b8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a46      	ldr	r2, [pc, #280]	@ (800201c <OS_StatTask+0x1c0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d805      	bhi.n	8001f14 <OS_StatTask+0xb8>
                ctr_mult =  1000u;
 8001f08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =    10u;
 8001f0e:	230a      	movs	r3, #10
 8001f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f12:	e019      	b.n	8001f48 <OS_StatTask+0xec>
            } else if (OSStatTaskCtrMax <  40000000u) {         /* 4,000,000 to    40,000,000                           */
 8001f14:	4b3f      	ldr	r3, [pc, #252]	@ (8002014 <OS_StatTask+0x1b8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a41      	ldr	r2, [pc, #260]	@ (8002020 <OS_StatTask+0x1c4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d204      	bcs.n	8001f28 <OS_StatTask+0xcc>
                ctr_mult =   100u;
 8001f1e:	2364      	movs	r3, #100	@ 0x64
 8001f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =   100u;
 8001f22:	2364      	movs	r3, #100	@ 0x64
 8001f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f26:	e00f      	b.n	8001f48 <OS_StatTask+0xec>
            } else if (OSStatTaskCtrMax < 400000000u) {         /* 40,000,000 to   400,000,000                          */
 8001f28:	4b3a      	ldr	r3, [pc, #232]	@ (8002014 <OS_StatTask+0x1b8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a3d      	ldr	r2, [pc, #244]	@ (8002024 <OS_StatTask+0x1c8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d805      	bhi.n	8001f3e <OS_StatTask+0xe2>
                ctr_mult =    10u;
 8001f32:	230a      	movs	r3, #10
 8001f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  =  1000u;
 8001f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f3c:	e004      	b.n	8001f48 <OS_StatTask+0xec>
            } else {                                            /* 400,000,000 and up                                   */
                ctr_mult =     1u;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ctr_div  = 10000u;
 8001f42:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001f46:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
            ctr_max            = OSStatTaskCtrMax / ctr_div;
 8001f48:	4b32      	ldr	r3, [pc, #200]	@ (8002014 <OS_StatTask+0x1b8>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	617b      	str	r3, [r7, #20]
            OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ((ctr_mult * OSStatTaskCtrRun) / ctr_max));
 8001f54:	4b2e      	ldr	r3, [pc, #184]	@ (8002010 <OS_StatTask+0x1b4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f5a:	fb03 f202 	mul.w	r2, r3, r2
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	f5c3 531c 	rsb	r3, r3, #9984	@ 0x2700
 8001f6a:	3310      	adds	r3, #16
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8002028 <OS_StatTask+0x1cc>)
 8001f70:	801a      	strh	r2, [r3, #0]
            if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
 8001f72:	4b2e      	ldr	r3, [pc, #184]	@ (800202c <OS_StatTask+0x1d0>)
 8001f74:	881a      	ldrh	r2, [r3, #0]
 8001f76:	4b2c      	ldr	r3, [pc, #176]	@ (8002028 <OS_StatTask+0x1cc>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d207      	bcs.n	8001f8e <OS_StatTask+0x132>
                OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
 8001f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002028 <OS_StatTask+0x1cc>)
 8001f80:	881a      	ldrh	r2, [r3, #0]
 8001f82:	4b2a      	ldr	r3, [pc, #168]	@ (800202c <OS_StatTask+0x1d0>)
 8001f84:	801a      	strh	r2, [r3, #0]
 8001f86:	e002      	b.n	8001f8e <OS_StatTask+0x132>
            }
        } else {
            OSStatTaskCPUUsage = 0u;
 8001f88:	4b27      	ldr	r3, [pc, #156]	@ (8002028 <OS_StatTask+0x1cc>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	801a      	strh	r2, [r3, #0]
        }

        OSStatTaskHook();                                       /* Invoke user definable hook                           */
 8001f8e:	f7fe fd89 	bl	8000aa4 <OSStatTaskHook>
        }
#endif

                                                                /*------------------ Check ISR Stack -------------------*/
#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) && (OS_CFG_ISR_STK_SIZE > 0u)
        free_stk  = 0u;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
        p_stk     = OSCfg_ISRStkBasePtr;                        /*   Start at the lowest memory and go up               */
 8001f96:	4b26      	ldr	r3, [pc, #152]	@ (8002030 <OS_StatTask+0x1d4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	623b      	str	r3, [r7, #32]
#if (OS_CFG_TASK_STK_REDZONE_EN > 0u)
        p_stk    += OS_CFG_TASK_STK_REDZONE_DEPTH;
        size_stk  = OSCfg_ISRStkSize - OS_CFG_TASK_STK_REDZONE_DEPTH;
#else
        size_stk  = OSCfg_ISRStkSize;
 8001f9c:	4b25      	ldr	r3, [pc, #148]	@ (8002034 <OS_StatTask+0x1d8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	613b      	str	r3, [r7, #16]
#endif
        while ((*p_stk == 0u) && (free_stk < size_stk)) {       /*   Compute the number of zero entries on the stk      */
 8001fa2:	e005      	b.n	8001fb0 <OS_StatTask+0x154>
            p_stk++;
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	623b      	str	r3, [r7, #32]
            free_stk++;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3301      	adds	r3, #1
 8001fae:	61fb      	str	r3, [r7, #28]
        while ((*p_stk == 0u) && (free_stk < size_stk)) {       /*   Compute the number of zero entries on the stk      */
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d103      	bne.n	8001fc0 <OS_StatTask+0x164>
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d3f1      	bcc.n	8001fa4 <OS_StatTask+0x148>
        while ((*p_stk == 0u) && (free_stk < size_stk)) {       /*   Compute the number of zero entries on the stk      */
            free_stk++;
            p_stk--;
        }
#endif
        OSISRStkFree = free_stk;
 8001fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8002038 <OS_StatTask+0x1dc>)
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	6013      	str	r3, [r2, #0]
        OSISRStkUsed = OSCfg_ISRStkSize - free_stk;
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <OS_StatTask+0x1d8>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	4a1b      	ldr	r2, [pc, #108]	@ (800203c <OS_StatTask+0x1e0>)
 8001fd0:	6013      	str	r3, [r2, #0]
#endif

        if (OSStatResetFlag == OS_TRUE) {                       /* Check if need to reset statistics                    */
 8001fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002040 <OS_StatTask+0x1e4>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d107      	bne.n	8001fea <OS_StatTask+0x18e>
            OSStatResetFlag  = OS_FALSE;
 8001fda:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <OS_StatTask+0x1e4>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
            OSStatReset(&err);
 8001fe0:	f107 030e 	add.w	r3, r7, #14
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff1f 	bl	8001e28 <OSStatReset>
        if (OSStatTaskTimeMax < OSStatTaskTime) {
            OSStatTaskTimeMax = OSStatTaskTime;
        }
#endif

        OSTimeDly(dly,
 8001fea:	f107 030e 	add.w	r3, r7, #14
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ff4:	f000 fe7c 	bl	8002cf0 <OSTimeDly>
        CPU_CRITICAL_ENTER();                                   /* ---------------- OVERALL CPU USAGE ----------------- */
 8001ff8:	e762      	b.n	8001ec0 <OS_StatTask+0x64>
 8001ffa:	bf00      	nop
 8001ffc:	08004520 	.word	0x08004520
 8002000:	200014c0 	.word	0x200014c0
 8002004:	08004534 	.word	0x08004534
 8002008:	cccccccd 	.word	0xcccccccd
 800200c:	200014b4 	.word	0x200014b4
 8002010:	200014bc 	.word	0x200014bc
 8002014:	200014b8 	.word	0x200014b8
 8002018:	00061a7f 	.word	0x00061a7f
 800201c:	003d08ff 	.word	0x003d08ff
 8002020:	02625a00 	.word	0x02625a00
 8002024:	17d783ff 	.word	0x17d783ff
 8002028:	200014ae 	.word	0x200014ae
 800202c:	200014b0 	.word	0x200014b0
 8002030:	0800450c 	.word	0x0800450c
 8002034:	08004510 	.word	0x08004510
 8002038:	20001288 	.word	0x20001288
 800203c:	2000128c 	.word	0x2000128c
 8002040:	200014ad 	.word	0x200014ad

08002044 <OS_StatTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTaskInit (OS_ERR  *p_err)
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b08d      	sub	sp, #52	@ 0x34
 8002048:	af0a      	add	r7, sp, #40	@ 0x28
 800204a:	6078      	str	r0, [r7, #4]
    OSStatTaskCtr    = 0u;
 800204c:	4b28      	ldr	r3, [pc, #160]	@ (80020f0 <OS_StatTaskInit+0xac>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrRun = 0u;
 8002052:	4b28      	ldr	r3, [pc, #160]	@ (80020f4 <OS_StatTaskInit+0xb0>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrMax = 0u;
 8002058:	4b27      	ldr	r3, [pc, #156]	@ (80020f8 <OS_StatTaskInit+0xb4>)
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
    OSStatTaskRdy    = OS_STATE_NOT_RDY;                        /* Statistic task is not ready                          */
 800205e:	4b27      	ldr	r3, [pc, #156]	@ (80020fc <OS_StatTaskInit+0xb8>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
    OSStatResetFlag  = OS_FALSE;
 8002064:	4b26      	ldr	r3, [pc, #152]	@ (8002100 <OS_StatTaskInit+0xbc>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]

#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) && (OS_CFG_ISR_STK_SIZE > 0u)
    OSISRStkFree     = 0u;
 800206a:	4b26      	ldr	r3, [pc, #152]	@ (8002104 <OS_StatTaskInit+0xc0>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
    OSISRStkUsed     = 0u;
 8002070:	4b25      	ldr	r3, [pc, #148]	@ (8002108 <OS_StatTaskInit+0xc4>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
#endif
                                                                /* --------------- CREATE THE STAT TASK --------------- */
    if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
 8002076:	4b25      	ldr	r3, [pc, #148]	@ (800210c <OS_StatTaskInit+0xc8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d104      	bne.n	8002088 <OS_StatTaskInit+0x44>
       *p_err = OS_ERR_STAT_STK_INVALID;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f646 622b 	movw	r2, #28203	@ 0x6e2b
 8002084:	801a      	strh	r2, [r3, #0]
        return;
 8002086:	e02f      	b.n	80020e8 <OS_StatTaskInit+0xa4>
    }

    if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
 8002088:	4b21      	ldr	r3, [pc, #132]	@ (8002110 <OS_StatTaskInit+0xcc>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b21      	ldr	r3, [pc, #132]	@ (8002114 <OS_StatTaskInit+0xd0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d204      	bcs.n	800209e <OS_StatTaskInit+0x5a>
       *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f646 622c 	movw	r2, #28204	@ 0x6e2c
 800209a:	801a      	strh	r2, [r3, #0]
        return;
 800209c:	e024      	b.n	80020e8 <OS_StatTaskInit+0xa4>
    }

    if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 800209e:	4b1e      	ldr	r3, [pc, #120]	@ (8002118 <OS_StatTaskInit+0xd4>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80020a4:	d904      	bls.n	80020b0 <OS_StatTaskInit+0x6c>
       *p_err = OS_ERR_STAT_PRIO_INVALID;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f646 622a 	movw	r2, #28202	@ 0x6e2a
 80020ac:	801a      	strh	r2, [r3, #0]
        return;
 80020ae:	e01b      	b.n	80020e8 <OS_StatTaskInit+0xa4>
    }

    OSTaskCreate(&OSStatTaskTCB,
 80020b0:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <OS_StatTaskInit+0xd4>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4a15      	ldr	r2, [pc, #84]	@ (800210c <OS_StatTaskInit+0xc8>)
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	4918      	ldr	r1, [pc, #96]	@ (800211c <OS_StatTaskInit+0xd8>)
 80020ba:	6809      	ldr	r1, [r1, #0]
 80020bc:	4814      	ldr	r0, [pc, #80]	@ (8002110 <OS_StatTaskInit+0xcc>)
 80020be:	6800      	ldr	r0, [r0, #0]
 80020c0:	687c      	ldr	r4, [r7, #4]
 80020c2:	9408      	str	r4, [sp, #32]
 80020c4:	2403      	movs	r4, #3
 80020c6:	9407      	str	r4, [sp, #28]
 80020c8:	2400      	movs	r4, #0
 80020ca:	9406      	str	r4, [sp, #24]
 80020cc:	2400      	movs	r4, #0
 80020ce:	9405      	str	r4, [sp, #20]
 80020d0:	2400      	movs	r4, #0
 80020d2:	9404      	str	r4, [sp, #16]
 80020d4:	9003      	str	r0, [sp, #12]
 80020d6:	9102      	str	r1, [sp, #8]
 80020d8:	9201      	str	r2, [sp, #4]
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2300      	movs	r3, #0
 80020de:	4a10      	ldr	r2, [pc, #64]	@ (8002120 <OS_StatTaskInit+0xdc>)
 80020e0:	2100      	movs	r1, #0
 80020e2:	4810      	ldr	r0, [pc, #64]	@ (8002124 <OS_StatTaskInit+0xe0>)
 80020e4:	f000 f820 	bl	8002128 <OSTaskCreate>
                  0u,
                  0u,
                 (void       *)0,
                 (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                  p_err);
}
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd90      	pop	{r4, r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200014b4 	.word	0x200014b4
 80020f4:	200014bc 	.word	0x200014bc
 80020f8:	200014b8 	.word	0x200014b8
 80020fc:	200014c0 	.word	0x200014c0
 8002100:	200014ad 	.word	0x200014ad
 8002104:	20001288 	.word	0x20001288
 8002108:	2000128c 	.word	0x2000128c
 800210c:	08004524 	.word	0x08004524
 8002110:	0800452c 	.word	0x0800452c
 8002114:	08004530 	.word	0x08004530
 8002118:	0800451c 	.word	0x0800451c
 800211c:	08004528 	.word	0x08004528
 8002120:	08001e5d 	.word	0x08001e5d
 8002124:	200014c4 	.word	0x200014c4

08002128 <OSTaskCreate>:
                    OS_MSG_QTY     q_size,
                    OS_TICK        time_quanta,
                    void          *p_ext,
                    OS_OPT         opt,
                    OS_ERR        *p_err)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	@ 0x30
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
    OS_TLS_ID      id;
#endif

    CPU_STK       *p_sp;
    CPU_STK       *p_stk_limit;
    CPU_SR_ALLOC();
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* --------- CANNOT CREATE A TASK FROM AN ISR --------- */
 800213a:	4b7f      	ldr	r3, [pc, #508]	@ (8002338 <OSTaskCreate+0x210>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d004      	beq.n	800214c <OSTaskCreate+0x24>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_TASK_CREATE_ISR;
 8002142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002144:	f247 124a 	movw	r2, #29002	@ 0x714a
 8002148:	801a      	strh	r2, [r3, #0]
        return;
 800214a:	e0f2      	b.n	8002332 <OSTaskCreate+0x20a>
    }
#endif

#if (OS_CFG_ARG_CHK_EN > 0u)                                    /* ---------------- VALIDATE ARGUMENTS ---------------- */
    if (p_tcb == (OS_TCB *)0) {                                 /* User must supply a valid OS_TCB                      */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d104      	bne.n	800215c <OSTaskCreate+0x34>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_TCB_INVALID;
 8002152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002154:	f247 12ad 	movw	r2, #29101	@ 0x71ad
 8002158:	801a      	strh	r2, [r3, #0]
        return;
 800215a:	e0ea      	b.n	8002332 <OSTaskCreate+0x20a>
    }
    if (p_task == (OS_TASK_PTR)0u) {                            /* User must supply a valid task                        */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d104      	bne.n	800216c <OSTaskCreate+0x44>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_TASK_INVALID;
 8002162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002164:	f247 124f 	movw	r2, #29007	@ 0x714f
 8002168:	801a      	strh	r2, [r3, #0]
        return;
 800216a:	e0e2      	b.n	8002332 <OSTaskCreate+0x20a>
    }
    if (p_stk_base == (CPU_STK *)0) {                           /* User must supply a valid stack base address          */
 800216c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800216e:	2b00      	cmp	r3, #0
 8002170:	d104      	bne.n	800217c <OSTaskCreate+0x54>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_STK_INVALID;
 8002172:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002174:	f646 622f 	movw	r2, #28207	@ 0x6e2f
 8002178:	801a      	strh	r2, [r3, #0]
        return;
 800217a:	e0da      	b.n	8002332 <OSTaskCreate+0x20a>
    }
    if (stk_size < OSCfg_StkSizeMin) {                          /* User must supply a valid minimum stack size          */
 800217c:	4b6f      	ldr	r3, [pc, #444]	@ (800233c <OSTaskCreate+0x214>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002182:	429a      	cmp	r2, r3
 8002184:	d204      	bcs.n	8002190 <OSTaskCreate+0x68>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_STK_SIZE_INVALID;
 8002186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002188:	f646 6230 	movw	r2, #28208	@ 0x6e30
 800218c:	801a      	strh	r2, [r3, #0]
        return;
 800218e:	e0d0      	b.n	8002332 <OSTaskCreate+0x20a>
    }
    if (stk_limit >= stk_size) {                                /* User must supply a valid stack limit                 */
 8002190:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002194:	429a      	cmp	r2, r3
 8002196:	d304      	bcc.n	80021a2 <OSTaskCreate+0x7a>
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_STK_LIMIT_INVALID;
 8002198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800219a:	f646 6231 	movw	r2, #28209	@ 0x6e31
 800219e:	801a      	strh	r2, [r3, #0]
        return;
 80021a0:	e0c7      	b.n	8002332 <OSTaskCreate+0x20a>
    }
    if ((prio  > (OS_CFG_PRIO_MAX - 2u)) &&                     /* Priority must be within 0 and OS_CFG_PRIO_MAX-1      */
 80021a2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80021a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80021a8:	d908      	bls.n	80021bc <OSTaskCreate+0x94>
 80021aa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80021ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80021b0:	d004      	beq.n	80021bc <OSTaskCreate+0x94>
        (prio != (OS_CFG_PRIO_MAX - 1u))) {
        OS_TRACE_TASK_CREATE_FAILED(p_tcb);
       *p_err = OS_ERR_PRIO_INVALID;
 80021b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021b4:	f246 2273 	movw	r2, #25203	@ 0x6273
 80021b8:	801a      	strh	r2, [r3, #0]
        return;
 80021ba:	e0ba      	b.n	8002332 <OSTaskCreate+0x20a>
    }
#endif

    if (prio == (OS_CFG_PRIO_MAX - 1u)) {
 80021bc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80021c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80021c2:	d108      	bne.n	80021d6 <OSTaskCreate+0xae>
#if (OS_CFG_TASK_IDLE_EN > 0u)
        if (p_tcb != &OSIdleTaskTCB) {
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002340 <OSTaskCreate+0x218>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d004      	beq.n	80021d6 <OSTaskCreate+0xae>
            OS_TRACE_TASK_CREATE_FAILED(p_tcb);
           *p_err = OS_ERR_PRIO_INVALID;                        /* Not allowed to use same priority as idle task        */
 80021cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021ce:	f246 2273 	movw	r2, #25203	@ 0x6273
 80021d2:	801a      	strh	r2, [r3, #0]
            return;
 80021d4:	e0ad      	b.n	8002332 <OSTaskCreate+0x20a>
       *p_err = OS_ERR_PRIO_INVALID;                            /* Not allowed to use same priority as idle task        */
        return;
#endif
    }

    OS_TaskInitTCB(p_tcb);                                      /* Initialize the TCB to default values                 */
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f9da 	bl	8002590 <OS_TaskInitTCB>

   *p_err = OS_ERR_NONE;
 80021dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021de:	2200      	movs	r2, #0
 80021e0:	801a      	strh	r2, [r3, #0]
                                                                /* -------------- CLEAR THE TASK'S STACK -------------- */
    if (((opt & OS_OPT_TASK_STK_CHK) != 0u) ||                  /* See if stack checking has been enabled               */
 80021e2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d105      	bne.n	80021fa <OSTaskCreate+0xd2>
        ((opt & OS_OPT_TASK_STK_CLR) != 0u)) {                  /* See if stack needs to be cleared                     */
 80021ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80021f2:	f003 0302 	and.w	r3, r3, #2
    if (((opt & OS_OPT_TASK_STK_CHK) != 0u) ||                  /* See if stack checking has been enabled               */
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d017      	beq.n	800222a <OSTaskCreate+0x102>
        if ((opt & OS_OPT_TASK_STK_CLR) != 0u) {
 80021fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d011      	beq.n	800222a <OSTaskCreate+0x102>
            p_sp = p_stk_base;
 8002206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002208:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {                   /* Stack grows from HIGH to LOW memory                  */
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
 800220e:	e008      	b.n	8002222 <OSTaskCreate+0xfa>
               *p_sp = 0u;                                      /* Clear from bottom of stack and up!                   */
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
                p_sp++;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3304      	adds	r3, #4
 800221a:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {                   /* Stack grows from HIGH to LOW memory                  */
 800221c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221e:	3301      	adds	r3, #1
 8002220:	627b      	str	r3, [r7, #36]	@ 0x24
 8002222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002226:	429a      	cmp	r2, r3
 8002228:	d3f2      	bcc.n	8002210 <OSTaskCreate+0xe8>
            }
        }
    }
                                                                /* ------ INITIALIZE THE STACK FRAME OF THE TASK ------ */
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    p_stk_limit = p_stk_base + stk_limit;
 800222a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002230:	4413      	add	r3, r2
 8002232:	617b      	str	r3, [r7, #20]
#else
    p_stk_limit = p_stk_base + (stk_size - 1u) - stk_limit;
#endif

    p_sp = OSTaskStkInit(p_task,
 8002234:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002242:	6839      	ldr	r1, [r7, #0]
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7fe fc71 	bl	8000b2c <OSTaskStkInit>
 800224a:	61f8      	str	r0, [r7, #28]
                         p_stk_limit,
                         stk_size,
                         opt);

#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)             /* Check if we overflown the stack during init          */
    if (p_sp < p_stk_base) {
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002250:	429a      	cmp	r2, r3
 8002252:	d204      	bcs.n	800225e <OSTaskCreate+0x136>
       *p_err = OS_ERR_STK_OVF;
 8002254:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002256:	f646 6232 	movw	r2, #28210	@ 0x6e32
 800225a:	801a      	strh	r2, [r3, #0]
        return;
 800225c:	e069      	b.n	8002332 <OSTaskCreate+0x20a>
    p_tcb->NamePtr       = p_name;                              /* Save task name                                       */
#else
    (void)p_name;
#endif

    p_tcb->Prio          = prio;                                /* Save the task's priority                             */
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002264:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

#if (OS_CFG_MUTEX_EN > 0u)
    p_tcb->BasePrio      = prio;                                /* Set the base priority                                */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800226e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
#endif

    p_tcb->StkPtr        = p_sp;                                /* Save the new top-of-stack pointer                    */
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	601a      	str	r2, [r3, #0]
    p_tcb->StkLimitPtr   = p_stk_limit;                         /* Save the stack limit pointer                         */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	609a      	str	r2, [r3, #8]

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
    p_tcb->TimeQuanta    = time_quanta;                         /* Save the #ticks for time slice (0 means not sliced)  */
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002282:	64da      	str	r2, [r3, #76]	@ 0x4c
    if (time_quanta == 0u) {
 8002284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002286:	2b00      	cmp	r3, #0
 8002288:	d104      	bne.n	8002294 <OSTaskCreate+0x16c>
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
 800228a:	4b2e      	ldr	r3, [pc, #184]	@ (8002344 <OSTaskCreate+0x21c>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	651a      	str	r2, [r3, #80]	@ 0x50
 8002292:	e002      	b.n	800229a <OSTaskCreate+0x172>
    } else {
        p_tcb->TimeQuantaCtr = time_quanta;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002298:	651a      	str	r2, [r3, #80]	@ 0x50
    }
#else
    (void)time_quanta;
#endif

    p_tcb->ExtPtr        = p_ext;                               /* Save pointer to TCB extension                        */
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800229e:	605a      	str	r2, [r3, #4]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u) || (OS_CFG_TASK_STK_REDZONE_EN > 0u))
    p_tcb->StkBasePtr    = p_stk_base;                          /* Save pointer to the base address of the stack        */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022a4:	61da      	str	r2, [r3, #28]
    p_tcb->StkSize       = stk_size;                            /* Save the stack size (in number of CPU_STK elements)  */
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022aa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif
    p_tcb->Opt           = opt;                                 /* Save task options                                    */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80022b2:	879a      	strh	r2, [r3, #60]	@ 0x3c

#if (OS_CFG_TASK_REG_TBL_SIZE > 0u)
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 80022b4:	2300      	movs	r3, #0
 80022b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80022ba:	e00b      	b.n	80022d4 <OSTaskCreate+0x1ac>
        p_tcb->RegTbl[reg_nbr] = 0u;
 80022bc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	321c      	adds	r2, #28
 80022c4:	2100      	movs	r1, #0
 80022c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 80022ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022ce:	3301      	adds	r3, #1
 80022d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80022d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0ef      	beq.n	80022bc <OSTaskCreate+0x194>
    }
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
    OS_MsgQInit(&p_tcb->MsgQ,                                   /* Initialize the task's message queue                  */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	335c      	adds	r3, #92	@ 0x5c
 80022e0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fb36 	bl	8001958 <OS_MsgQInit>
                q_size);
#else
    (void)q_size;
#endif

    OSTaskCreateHook(p_tcb);                                    /* Call user defined hook                               */
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7fe fbe7 	bl	8000ac0 <OSTaskCreateHook>
        p_tcb->TLS_Tbl[id] = 0u;
    }
    OS_TLS_TaskCreate(p_tcb);                                   /* Call TLS hook                                        */
#endif
                                                                /* -------------- ADD TASK TO READY LIST -------------- */
    CPU_CRITICAL_ENTER();
 80022f2:	2040      	movs	r0, #64	@ 0x40
 80022f4:	f7fd ff6c 	bl	80001d0 <CPU_SR_Save>
 80022f8:	61b8      	str	r0, [r7, #24]
    OS_PrioInsert(p_tcb->Prio);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fd43 	bl	8001d8c <OS_PrioInsert>
    OS_RdyListInsertTail(p_tcb);
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff f936 	bl	8001578 <OS_RdyListInsertTail>

#if (OS_CFG_DBG_EN > 0u)
    OS_TaskDbgListAdd(p_tcb);
#endif

    OSTaskQty++;                                                /* Increment the #tasks counter                         */
 800230c:	4b0e      	ldr	r3, [pc, #56]	@ (8002348 <OSTaskCreate+0x220>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <OSTaskCreate+0x220>)
 8002316:	801a      	strh	r2, [r3, #0]

    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Return if multitasking has not started               */
 8002318:	4b0c      	ldr	r3, [pc, #48]	@ (800234c <OSTaskCreate+0x224>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d003      	beq.n	8002328 <OSTaskCreate+0x200>
        CPU_CRITICAL_EXIT();
 8002320:	69b8      	ldr	r0, [r7, #24]
 8002322:	f7fd ff63 	bl	80001ec <CPU_SR_Restore>
        return;
 8002326:	e004      	b.n	8002332 <OSTaskCreate+0x20a>
    }

    CPU_CRITICAL_EXIT();
 8002328:	69b8      	ldr	r0, [r7, #24]
 800232a:	f7fd ff5f 	bl	80001ec <CPU_SR_Restore>

    OSSched();
 800232e:	f7fe fe3f 	bl	8000fb0 <OSSched>
}
 8002332:	3728      	adds	r7, #40	@ 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20001284 	.word	0x20001284
 800233c:	08004530 	.word	0x08004530
 8002340:	200011dc 	.word	0x200011dc
 8002344:	200014a8 	.word	0x200014a8
 8002348:	20001570 	.word	0x20001570
 800234c:	20001285 	.word	0x20001285

08002350 <OSTaskDel>:
*/

#if (OS_CFG_TASK_DEL_EN > 0u)
void  OSTaskDel (OS_TCB  *p_tcb,
                 OS_ERR  *p_err)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
#if (OS_CFG_MUTEX_EN > 0u)
    OS_TCB   *p_tcb_owner;
    OS_PRIO   prio_new;
#endif
    CPU_SR_ALLOC();
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
        return;
    }
#endif

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* See if trying to delete from ISR                     */
 800235e:	4b7b      	ldr	r3, [pc, #492]	@ (800254c <OSTaskDel+0x1fc>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d004      	beq.n	8002370 <OSTaskDel+0x20>
       *p_err = OS_ERR_TASK_DEL_ISR;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	f247 124e 	movw	r2, #29006	@ 0x714e
 800236c:	801a      	strh	r2, [r3, #0]
        return;
 800236e:	e0ea      	b.n	8002546 <OSTaskDel+0x1f6>
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8002370:	4b77      	ldr	r3, [pc, #476]	@ (8002550 <OSTaskDel+0x200>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d004      	beq.n	8002382 <OSTaskDel+0x32>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f645 6289 	movw	r2, #24201	@ 0x5e89
 800237e:	801a      	strh	r2, [r3, #0]
        return;
 8002380:	e0e1      	b.n	8002546 <OSTaskDel+0x1f6>
    }
#endif

#if (OS_CFG_TASK_IDLE_EN > 0u)
    if (p_tcb == &OSIdleTaskTCB) {                              /* Not allowed to delete the idle task                  */
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a73      	ldr	r2, [pc, #460]	@ (8002554 <OSTaskDel+0x204>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d104      	bne.n	8002394 <OSTaskDel+0x44>
       *p_err = OS_ERR_TASK_DEL_IDLE;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f247 124c 	movw	r2, #29004	@ 0x714c
 8002390:	801a      	strh	r2, [r3, #0]
        return;
 8002392:	e0d8      	b.n	8002546 <OSTaskDel+0x1f6>
    }
#endif

    if (p_tcb == (OS_TCB *)0) {                                 /* Delete 'Self'?                                       */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <OSTaskDel+0x5e>
        CPU_CRITICAL_ENTER();
 800239a:	2040      	movs	r0, #64	@ 0x40
 800239c:	f7fd ff18 	bl	80001d0 <CPU_SR_Save>
 80023a0:	6138      	str	r0, [r7, #16]
        p_tcb  = OSTCBCurPtr;                                   /* Yes.                                                 */
 80023a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002558 <OSTaskDel+0x208>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	607b      	str	r3, [r7, #4]
        CPU_CRITICAL_EXIT();
 80023a8:	6938      	ldr	r0, [r7, #16]
 80023aa:	f7fd ff1f 	bl	80001ec <CPU_SR_Restore>
    }

    CPU_CRITICAL_ENTER();
 80023ae:	2040      	movs	r0, #64	@ 0x40
 80023b0:	f7fd ff0e 	bl	80001d0 <CPU_SR_Save>
 80023b4:	6138      	str	r0, [r7, #16]
    switch (p_tcb->TaskState) {
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80023bc:	2b07      	cmp	r3, #7
 80023be:	f200 8093 	bhi.w	80024e8 <OSTaskDel+0x198>
 80023c2:	a201      	add	r2, pc, #4	@ (adr r2, 80023c8 <OSTaskDel+0x78>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	080023e9 	.word	0x080023e9
 80023cc:	080023f1 	.word	0x080023f1
 80023d0:	080023f9 	.word	0x080023f9
 80023d4:	080023f9 	.word	0x080023f9
 80023d8:	080024f9 	.word	0x080024f9
 80023dc:	080023f1 	.word	0x080023f1
 80023e0:	080023f9 	.word	0x080023f9
 80023e4:	080023f9 	.word	0x080023f9
        case OS_TASK_STATE_RDY:
             OS_RdyListRemove(p_tcb);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff f945 	bl	8001678 <OS_RdyListRemove>
             break;
 80023ee:	e086      	b.n	80024fe <OSTaskDel+0x1ae>
             break;

        case OS_TASK_STATE_DLY:                                 /* Task is only delayed, not on any wait list           */
        case OS_TASK_STATE_DLY_SUSPENDED:
#if (OS_CFG_TICK_EN > 0u)
             OS_TickListRemove(p_tcb);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fb6b 	bl	8002acc <OS_TickListRemove>
#endif
             break;
 80023f6:	e082      	b.n	80024fe <OSTaskDel+0x1ae>

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             switch (p_tcb->PendOn) {                           /* See what we are pending on                           */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80023fe:	2b07      	cmp	r3, #7
 8002400:	bf8c      	ite	hi
 8002402:	2201      	movhi	r2, #1
 8002404:	2200      	movls	r2, #0
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	2a00      	cmp	r2, #0
 800240a:	d15a      	bne.n	80024c2 <OSTaskDel+0x172>
 800240c:	2201      	movs	r2, #1
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	f003 0262 	and.w	r2, r3, #98	@ 0x62
 8002416:	2a00      	cmp	r2, #0
 8002418:	bf14      	ite	ne
 800241a:	2201      	movne	r2, #1
 800241c:	2200      	moveq	r2, #0
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	2a00      	cmp	r2, #0
 8002422:	d112      	bne.n	800244a <OSTaskDel+0xfa>
 8002424:	f003 0285 	and.w	r2, r3, #133	@ 0x85
 8002428:	2a00      	cmp	r2, #0
 800242a:	bf14      	ite	ne
 800242c:	2201      	movne	r2, #1
 800242e:	2200      	moveq	r2, #0
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	2a00      	cmp	r2, #0
 8002434:	d147      	bne.n	80024c6 <OSTaskDel+0x176>
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	bf14      	ite	ne
 800243e:	2301      	movne	r3, #1
 8002440:	2300      	moveq	r3, #0
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d104      	bne.n	8002452 <OSTaskDel+0x102>
                      break;
#endif

                 default:
                                                                /* Default case.                                        */
                      break;
 8002448:	e03b      	b.n	80024c2 <OSTaskDel+0x172>
                      OS_PendListRemove(p_tcb);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe ff67 	bl	800131e <OS_PendListRemove>
                      break;
 8002450:	e03c      	b.n	80024cc <OSTaskDel+0x17c>
                      p_tcb_owner = ((OS_MUTEX *)((void *)p_tcb->PendObjPtr))->OwnerTCBPtr;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	60fb      	str	r3, [r7, #12]
                      prio_new = p_tcb_owner->Prio;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002460:	75fb      	strb	r3, [r7, #23]
                      OS_PendListRemove(p_tcb);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe ff5b 	bl	800131e <OS_PendListRemove>
                      if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002474:	429a      	cmp	r2, r3
 8002476:	d014      	beq.n	80024a2 <OSTaskDel+0x152>
                          (p_tcb_owner->Prio == p_tcb->Prio)) { /* Has the owner inherited a priority?                  */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
                      if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8002484:	429a      	cmp	r2, r3
 8002486:	d10c      	bne.n	80024a2 <OSTaskDel+0x152>
                          prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f7ff fbe0 	bl	8001c4e <OS_MutexGrpPrioFindHighest>
 800248e:	4603      	mov	r3, r0
 8002490:	75fb      	strb	r3, [r7, #23]
                          prio_new = (prio_new > p_tcb_owner->BasePrio) ? p_tcb_owner->BasePrio : prio_new;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002498:	7dfa      	ldrb	r2, [r7, #23]
 800249a:	4293      	cmp	r3, r2
 800249c:	bf28      	it	cs
 800249e:	4613      	movcs	r3, r2
 80024a0:	75fb      	strb	r3, [r7, #23]
                      p_tcb->PendOn = OS_TASK_PEND_ON_NOTHING;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                      if (prio_new != p_tcb_owner->Prio) {
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80024b0:	7dfa      	ldrb	r2, [r7, #23]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d009      	beq.n	80024ca <OSTaskDel+0x17a>
                          OS_TaskChangePrio(p_tcb_owner, prio_new);
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
 80024b8:	4619      	mov	r1, r3
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f92a 	bl	8002714 <OS_TaskChangePrio>
                      break;
 80024c0:	e003      	b.n	80024ca <OSTaskDel+0x17a>
                      break;
 80024c2:	bf00      	nop
 80024c4:	e002      	b.n	80024cc <OSTaskDel+0x17c>
                      break;
 80024c6:	bf00      	nop
 80024c8:	e000      	b.n	80024cc <OSTaskDel+0x17c>
                      break;
 80024ca:	bf00      	nop
             }
#if (OS_CFG_TICK_EN > 0u)
             if ((p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) ||
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d004      	beq.n	80024e0 <OSTaskDel+0x190>
                 (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED)) {
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
             if ((p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) ||
 80024dc:	2b07      	cmp	r3, #7
 80024de:	d10d      	bne.n	80024fc <OSTaskDel+0x1ac>
                 OS_TickListRemove(p_tcb);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 faf3 	bl	8002acc <OS_TickListRemove>
             }
#endif
             break;
 80024e6:	e009      	b.n	80024fc <OSTaskDel+0x1ac>

        default:
            CPU_CRITICAL_EXIT();
 80024e8:	6938      	ldr	r0, [r7, #16]
 80024ea:	f7fd fe7f 	bl	80001ec <CPU_SR_Restore>
           *p_err = OS_ERR_STATE_INVALID;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	f646 622d 	movw	r2, #28205	@ 0x6e2d
 80024f4:	801a      	strh	r2, [r3, #0]
            return;
 80024f6:	e026      	b.n	8002546 <OSTaskDel+0x1f6>
             break;
 80024f8:	bf00      	nop
 80024fa:	e000      	b.n	80024fe <OSTaskDel+0x1ae>
             break;
 80024fc:	bf00      	nop
    }

#if (OS_CFG_MUTEX_EN > 0u)
    if(p_tcb->MutexGrpHeadPtr != (OS_MUTEX *)0) {
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <OSTaskDel+0x1bc>
        OS_MutexGrpPostAll(p_tcb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff fbcb 	bl	8001ca2 <OS_MutexGrpPostAll>
    }
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
    (void)OS_MsgQFreeAll(&p_tcb->MsgQ);                         /* Free task's message queue messages                   */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	335c      	adds	r3, #92	@ 0x5c
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff f9e9 	bl	80018e8 <OS_MsgQFreeAll>
#endif

    OSTaskDelHook(p_tcb);                                       /* Call user defined hook                               */
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe fae4 	bl	8000ae4 <OSTaskDelHook>

#if (OS_CFG_DBG_EN > 0u)
    OS_TaskDbgListRemove(p_tcb);
#endif

    OSTaskQty--;                                                /* One less task being managed                          */
 800251c:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <OSTaskDel+0x20c>)
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	4b0d      	ldr	r3, [pc, #52]	@ (800255c <OSTaskDel+0x20c>)
 8002526:	801a      	strh	r2, [r3, #0]

    OS_TRACE_TASK_DEL(p_tcb);

#if (OS_CFG_TASK_STK_REDZONE_EN == 0u)                          /* Don't clear the TCB before checking the red-zone     */
    OS_TaskInitTCB(p_tcb);                                      /* Initialize the TCB to default values                 */
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f831 	bl	8002590 <OS_TaskInitTCB>
#endif
    p_tcb->TaskState = (OS_STATE)OS_TASK_STATE_DEL;             /* Indicate that the task was deleted                   */
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	22ff      	movs	r2, #255	@ 0xff
 8002532:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

   *p_err = OS_ERR_NONE;                                        /* See Note #1.                                         */
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2200      	movs	r2, #0
 800253a:	801a      	strh	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 800253c:	6938      	ldr	r0, [r7, #16]
 800253e:	f7fd fe55 	bl	80001ec <CPU_SR_Restore>

    OSSched();                                                  /* Find new highest priority task                       */
 8002542:	f7fe fd35 	bl	8000fb0 <OSSched>
}
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20001284 	.word	0x20001284
 8002550:	20001285 	.word	0x20001285
 8002554:	200011dc 	.word	0x200011dc
 8002558:	20001658 	.word	0x20001658
 800255c:	20001570 	.word	0x20001570

08002560 <OS_TaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInit (OS_ERR  *p_err)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSTaskDbgListPtr = (OS_TCB *)0;
#endif

    OSTaskQty        = 0u;                                      /* Clear the number of tasks                            */
 8002568:	4b07      	ldr	r3, [pc, #28]	@ (8002588 <OS_TaskInit+0x28>)
 800256a:	2200      	movs	r2, #0
 800256c:	801a      	strh	r2, [r3, #0]

#if ((OS_CFG_TASK_PROFILE_EN > 0u) || (OS_CFG_DBG_EN > 0u))
    OSTaskCtxSwCtr   = 0u;                                      /* Clear the context switch counter                     */
 800256e:	4b07      	ldr	r3, [pc, #28]	@ (800258c <OS_TaskInit+0x2c>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
#endif

   *p_err            = OS_ERR_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	801a      	strh	r2, [r3, #0]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	20001570 	.word	0x20001570
 800258c:	2000156c 	.word	0x2000156c

08002590 <OS_TaskInitTCB>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInitTCB (OS_TCB  *p_tcb)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_ID   id;
#endif


    p_tcb->StkPtr               = (CPU_STK          *)0;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
    p_tcb->StkLimitPtr          = (CPU_STK          *)0;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]

    p_tcb->ExtPtr               = (void             *)0;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	605a      	str	r2, [r3, #4]

    p_tcb->NextPtr              = (OS_TCB           *)0;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	60da      	str	r2, [r3, #12]
    p_tcb->PrevPtr              = (OS_TCB           *)0;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	611a      	str	r2, [r3, #16]

#if (OS_CFG_TICK_EN > 0u)
    p_tcb->TickNextPtr          = (OS_TCB           *)0;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	615a      	str	r2, [r3, #20]
    p_tcb->TickPrevPtr          = (OS_TCB           *)0;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	619a      	str	r2, [r3, #24]
#if (OS_CFG_DBG_EN > 0u)
    p_tcb->NamePtr              = (CPU_CHAR *)((void *)"?Task");
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkBasePtr           = (CPU_STK          *)0;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	61da      	str	r2, [r3, #28]
#if (OS_CFG_TS_EN > 0u)
    p_tcb->TS                   =                     0u;
#endif

#if (OS_MSG_EN > 0u)
    p_tcb->MsgPtr               = (void             *)0;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	655a      	str	r2, [r3, #84]	@ 0x54
    p_tcb->MsgSize              =                     0u;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
#endif

#if (OS_CFG_TASK_Q_EN > 0u)
    OS_MsgQInit(&p_tcb->MsgQ,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	335c      	adds	r3, #92	@ 0x5c
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff f9bb 	bl	8001958 <OS_MsgQInit>
                 0u);
#if (OS_CFG_TASK_PROFILE_EN > 0u)
    p_tcb->MsgQPendTime         =                     0u;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	669a      	str	r2, [r3, #104]	@ 0x68
    p_tcb->MsgQPendTimeMax      =                     0u;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	66da      	str	r2, [r3, #108]	@ 0x6c
#endif
#endif

#if (OS_CFG_FLAG_EN > 0u)
    p_tcb->FlagsPend            =                     0u;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	675a      	str	r2, [r3, #116]	@ 0x74
    p_tcb->FlagsOpt             =                     0u;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    p_tcb->FlagsRdy             =                     0u;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	679a      	str	r2, [r3, #120]	@ 0x78
#endif

#if (OS_CFG_TASK_REG_TBL_SIZE > 0u)
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 8002602:	2300      	movs	r3, #0
 8002604:	73fb      	strb	r3, [r7, #15]
 8002606:	e008      	b.n	800261a <OS_TaskInitTCB+0x8a>
        p_tcb->RegTbl[reg_id]   =                     0u;
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	321c      	adds	r2, #28
 800260e:	2100      	movs	r1, #0
 8002610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	3301      	adds	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f3      	beq.n	8002608 <OS_TaskInitTCB+0x78>
    for (id = 0u; id < OS_CFG_TLS_TBL_SIZE; id++) {
        p_tcb->TLS_Tbl[id]      =                     0u;
    }
#endif

    p_tcb->SemCtr               =                     0u;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	641a      	str	r2, [r3, #64]	@ 0x40
#if (OS_CFG_TASK_PROFILE_EN > 0u)
    p_tcb->SemPendTime          =                     0u;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    p_tcb->SemPendTimeMax       =                     0u;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkSize              =                     0u;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif


#if (OS_CFG_TASK_SUSPEND_EN > 0u)
    p_tcb->SuspendCtr           =                     0u;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
#endif

#if (OS_CFG_STAT_TASK_STK_CHK_EN > 0u)
    p_tcb->StkFree              =                     0u;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    p_tcb->StkUsed              =                     0u;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
#endif

    p_tcb->Opt                  =                     0u;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	879a      	strh	r2, [r3, #60]	@ 0x3c

#if (OS_CFG_TICK_EN > 0u)
    p_tcb->TickRemain           =                     0u;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	645a      	str	r2, [r3, #68]	@ 0x44
    p_tcb->TickCtrPrev          =                     0u;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	649a      	str	r2, [r3, #72]	@ 0x48
#endif

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
    p_tcb->TimeQuanta           =                     0u;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	64da      	str	r2, [r3, #76]	@ 0x4c
    p_tcb->TimeQuantaCtr        =                     0u;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	651a      	str	r2, [r3, #80]	@ 0x50
#endif

#if (OS_CFG_TASK_PROFILE_EN > 0u)
    p_tcb->CPUUsage             =                     0u;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    p_tcb->CPUUsageMax          =                     0u;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    p_tcb->CtxSwCtr             =                     0u;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    p_tcb->CyclesDelta          =                     0u;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#if (OS_CFG_TS_EN > 0u)
    p_tcb->CyclesStart          =  OS_TS_GET();                 /* Read the current timestamp and save                  */
#else
    p_tcb->CyclesStart          =                     0u;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#endif
    p_tcb->CyclesTotal          =                     0u;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#endif
#if (OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u)
    p_tcb->SchedLockTimeMax     =                     0u;
#endif

    p_tcb->PendNextPtr          = (OS_TCB           *)0;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	621a      	str	r2, [r3, #32]
    p_tcb->PendPrevPtr          = (OS_TCB           *)0;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	625a      	str	r2, [r3, #36]	@ 0x24
    p_tcb->PendObjPtr           = (OS_PEND_OBJ      *)0;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	629a      	str	r2, [r3, #40]	@ 0x28
    p_tcb->PendOn               =  OS_TASK_PEND_ON_NOTHING;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    p_tcb->PendStatus           =  OS_STATUS_PEND_OK;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    p_tcb->TaskState            =  OS_TASK_STATE_RDY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

    p_tcb->Prio                 =  OS_PRIO_INIT;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2240      	movs	r2, #64	@ 0x40
 80026d0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
#if (OS_CFG_MUTEX_EN > 0u)
    p_tcb->BasePrio             =  OS_PRIO_INIT;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2240      	movs	r2, #64	@ 0x40
 80026d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    p_tcb->MutexGrpHeadPtr      = (OS_MUTEX         *)0;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (OS_CFG_DBG_EN > 0u)
    p_tcb->DbgPrevPtr           = (OS_TCB           *)0;
    p_tcb->DbgNextPtr           = (OS_TCB           *)0;
    p_tcb->DbgNamePtr           = (CPU_CHAR *)((void *)" ");
#endif
}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
    OS_ERR  err;



    OSTaskReturnHook(OSTCBCurPtr);                              /* Call hook to let user decide on what to do           */
 80026f2:	4b07      	ldr	r3, [pc, #28]	@ (8002710 <OS_TaskReturn+0x24>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fa06 	bl	8000b08 <OSTaskReturnHook>
#if (OS_CFG_TASK_DEL_EN > 0u)
    OSTaskDel((OS_TCB *)0,                                      /* Delete task if it accidentally returns!              */
 80026fc:	1dbb      	adds	r3, r7, #6
 80026fe:	4619      	mov	r1, r3
 8002700:	2000      	movs	r0, #0
 8002702:	f7ff fe25 	bl	8002350 <OSTaskDel>
        OSTimeDly(OSCfg_TickRate_Hz,
                  OS_OPT_TIME_DLY,
                  &err);
    }
#endif
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20001658 	.word	0x20001658

08002714 <OS_TaskChangePrio>:
************************************************************************************************************************
*/

void  OS_TaskChangePrio(OS_TCB  *p_tcb,
                        OS_PRIO  prio_new)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	70fb      	strb	r3, [r7, #3]
    OS_PRIO  prio_cur;
#endif


    do {
        p_tcb_owner = (OS_TCB *)0;
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_MUTEX_EN > 0u)
        prio_cur    =  p_tcb->Prio;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800272a:	72fb      	strb	r3, [r7, #11]
#endif
        switch (p_tcb->TaskState) {
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8002732:	2b07      	cmp	r3, #7
 8002734:	f200 8085 	bhi.w	8002842 <OS_TaskChangePrio+0x12e>
 8002738:	a201      	add	r2, pc, #4	@ (adr r2, 8002740 <OS_TaskChangePrio+0x2c>)
 800273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273e:	bf00      	nop
 8002740:	08002761 	.word	0x08002761
 8002744:	08002795 	.word	0x08002795
 8002748:	0800279f 	.word	0x0800279f
 800274c:	0800279f 	.word	0x0800279f
 8002750:	08002795 	.word	0x08002795
 8002754:	08002795 	.word	0x08002795
 8002758:	0800279f 	.word	0x0800279f
 800275c:	0800279f 	.word	0x0800279f
            case OS_TASK_STATE_RDY:
                 OS_RdyListRemove(p_tcb);                       /* Remove from current priority                         */
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7fe ff89 	bl	8001678 <OS_RdyListRemove>
                 p_tcb->Prio = prio_new;                        /* Set new task priority                                */
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	78fa      	ldrb	r2, [r7, #3]
 800276a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
                 OS_PrioInsert(p_tcb->Prio);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fb09 	bl	8001d8c <OS_PrioInsert>
                 if (p_tcb == OSTCBCurPtr) {
 800277a:	4b34      	ldr	r3, [pc, #208]	@ (800284c <OS_TaskChangePrio+0x138>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	d103      	bne.n	800278c <OS_TaskChangePrio+0x78>
                     OS_RdyListInsertHead(p_tcb);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fe fec3 	bl	8001510 <OS_RdyListInsertHead>
                 } else {
                     OS_RdyListInsertTail(p_tcb);
                 }
                 break;
 800278a:	e053      	b.n	8002834 <OS_TaskChangePrio+0x120>
                     OS_RdyListInsertTail(p_tcb);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7fe fef3 	bl	8001578 <OS_RdyListInsertTail>
                 break;
 8002792:	e04f      	b.n	8002834 <OS_TaskChangePrio+0x120>

            case OS_TASK_STATE_DLY:                             /* Nothing to do except change the priority in the OS_TCB*/
            case OS_TASK_STATE_SUSPENDED:
            case OS_TASK_STATE_DLY_SUSPENDED:
                 p_tcb->Prio = prio_new;                        /* Set new task priority                                */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	78fa      	ldrb	r2, [r7, #3]
 8002798:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
                 break;
 800279c:	e04a      	b.n	8002834 <OS_TaskChangePrio+0x120>

            case OS_TASK_STATE_PEND:
            case OS_TASK_STATE_PEND_TIMEOUT:
            case OS_TASK_STATE_PEND_SUSPENDED:
            case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                 p_tcb->Prio = prio_new;                        /* Set new task priority                                */
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
                 switch (p_tcb->PendOn) {                       /* What to do depends on what we are pending on         */
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80027ac:	2b06      	cmp	r3, #6
 80027ae:	dc3d      	bgt.n	800282c <OS_TaskChangePrio+0x118>
 80027b0:	2b05      	cmp	r3, #5
 80027b2:	da04      	bge.n	80027be <OS_TaskChangePrio+0xaa>
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d002      	beq.n	80027be <OS_TaskChangePrio+0xaa>
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d004      	beq.n	80027c6 <OS_TaskChangePrio+0xb2>

                     case OS_TASK_PEND_ON_TASK_Q:
                     case OS_TASK_PEND_ON_TASK_SEM:
                     default:
                                                                /* Default case.                                        */
                          break;
 80027bc:	e036      	b.n	800282c <OS_TaskChangePrio+0x118>
                          OS_PendListChangePrio(p_tcb);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe fd1d 	bl	80011fe <OS_PendListChangePrio>
                          break;
 80027c4:	e035      	b.n	8002832 <OS_TaskChangePrio+0x11e>
                          OS_PendListChangePrio(p_tcb);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe fd19 	bl	80011fe <OS_PendListChangePrio>
                          p_tcb_owner = ((OS_MUTEX *)((void *)p_tcb->PendObjPtr))->OwnerTCBPtr;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	60fb      	str	r3, [r7, #12]
                          if (prio_cur > prio_new) {            /* Are we increasing the priority?                      */
 80027d4:	7afa      	ldrb	r2, [r7, #11]
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d908      	bls.n	80027ee <OS_TaskChangePrio+0xda>
                              if (p_tcb_owner->Prio <= prio_new) { /* Yes, do we need to give this prio to the owner?   */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d323      	bcc.n	8002830 <OS_TaskChangePrio+0x11c>
                                  p_tcb_owner = (OS_TCB *)0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]
                          break;
 80027ec:	e020      	b.n	8002830 <OS_TaskChangePrio+0x11c>
                              if (p_tcb_owner->Prio == prio_cur) { /* No, is it required to check for a lower prio?     */
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80027f4:	7afa      	ldrb	r2, [r7, #11]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d115      	bne.n	8002826 <OS_TaskChangePrio+0x112>
                                  prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f7ff fa27 	bl	8001c4e <OS_MutexGrpPrioFindHighest>
 8002800:	4603      	mov	r3, r0
 8002802:	70fb      	strb	r3, [r7, #3]
                                  prio_new = (prio_new > p_tcb_owner->BasePrio) ? p_tcb_owner->BasePrio : prio_new;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800280a:	78fa      	ldrb	r2, [r7, #3]
 800280c:	4293      	cmp	r3, r2
 800280e:	bf28      	it	cs
 8002810:	4613      	movcs	r3, r2
 8002812:	70fb      	strb	r3, [r7, #3]
                                  if (prio_new == p_tcb_owner->Prio) {
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	429a      	cmp	r2, r3
 800281e:	d107      	bne.n	8002830 <OS_TaskChangePrio+0x11c>
                                      p_tcb_owner = (OS_TCB *)0;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
                          break;
 8002824:	e004      	b.n	8002830 <OS_TaskChangePrio+0x11c>
                                  p_tcb_owner = (OS_TCB *)0;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
                          break;
 800282a:	e001      	b.n	8002830 <OS_TaskChangePrio+0x11c>
                          break;
 800282c:	bf00      	nop
 800282e:	e000      	b.n	8002832 <OS_TaskChangePrio+0x11e>
                          break;
 8002830:	bf00      	nop
                 }
                 break;
 8002832:	bf00      	nop

            default:
                 return;
        }
        p_tcb = p_tcb_owner;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	607b      	str	r3, [r7, #4]
    } while (p_tcb != (OS_TCB *)0);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f47f af70 	bne.w	8002720 <OS_TaskChangePrio+0xc>
 8002840:	e000      	b.n	8002844 <OS_TaskChangePrio+0x130>
                 return;
 8002842:	bf00      	nop
}
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20001658 	.word	0x20001658

08002850 <OS_TickInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickInit (OS_ERR  *p_err)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
    *p_err                = OS_ERR_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	801a      	strh	r2, [r3, #0]

    OSTickCtr             = 0u;                               /* Clear the tick counter                               */
 800285e:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <OS_TickInit+0x28>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

#if (OS_CFG_DYN_TICK_EN > 0u)
    OSTickCtrStep         = 0u;
#endif

    OSTickList.TCB_Ptr    = (OS_TCB *)0;
 8002864:	4b05      	ldr	r3, [pc, #20]	@ (800287c <OS_TickInit+0x2c>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]

#if (OS_CFG_DBG_EN > 0u)
    OSTickList.NbrEntries = 0u;
    OSTickList.NbrUpdated = 0u;
#endif
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20001574 	.word	0x20001574
 800287c:	20001578 	.word	0x20001578

08002880 <OS_TickUpdate>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickUpdate (OS_TICK  ticks)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
#if (OS_CFG_TS_EN > 0u)
    CPU_TS  ts_start;
#endif
    CPU_SR_ALLOC();
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 800288c:	2040      	movs	r0, #64	@ 0x40
 800288e:	f7fd fc9f 	bl	80001d0 <CPU_SR_Save>
 8002892:	60f8      	str	r0, [r7, #12]

    OSTickCtr += ticks;                                         /* Keep track of the number of ticks                    */
 8002894:	4b07      	ldr	r3, [pc, #28]	@ (80028b4 <OS_TickUpdate+0x34>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4413      	add	r3, r2
 800289c:	4a05      	ldr	r2, [pc, #20]	@ (80028b4 <OS_TickUpdate+0x34>)
 800289e:	6013      	str	r3, [r2, #0]
    OSTickTime = OS_TS_GET() - ts_start;
    if (OSTickTimeMax < OSTickTime) {
        OSTickTimeMax = OSTickTime;
    }
#else
    OS_TickListUpdate(ticks);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f961 	bl	8002b68 <OS_TickListUpdate>
        OSTickCtrStep = 0u;
    }

    OS_DynTickSet(OSTickCtrStep);
#endif
    CPU_CRITICAL_EXIT();
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f7fd fca0 	bl	80001ec <CPU_SR_Restore>
}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20001574 	.word	0x20001574

080028b8 <OS_TickListInsert>:

CPU_BOOLEAN  OS_TickListInsert (OS_TCB   *p_tcb,
                                OS_TICK   elapsed,
                                OS_TICK   tick_base,
                                OS_TICK   time)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b08b      	sub	sp, #44	@ 0x2c
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
    OS_TICK_LIST  *p_list;
    OS_TICK        delta;
    OS_TICK        remain;


    delta = (time + tick_base) - (OSTickCtr + elapsed);         /* How many ticks until our delay expires?              */
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	441a      	add	r2, r3
 80028cc:	4b49      	ldr	r3, [pc, #292]	@ (80029f4 <OS_TickListInsert+0x13c>)
 80028ce:	6819      	ldr	r1, [r3, #0]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	440b      	add	r3, r1
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	61fb      	str	r3, [r7, #28]

    if (delta == 0u) {
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d104      	bne.n	80028e8 <OS_TickListInsert+0x30>
        p_tcb->TickRemain = 0u;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	645a      	str	r2, [r3, #68]	@ 0x44
        return (OS_FALSE);
 80028e4:	2300      	movs	r3, #0
 80028e6:	e07e      	b.n	80029e6 <OS_TickListInsert+0x12e>
    }

    OS_TRACE_TASK_DLY(delta);

    p_list = &OSTickList;
 80028e8:	4b43      	ldr	r3, [pc, #268]	@ (80029f8 <OS_TickListInsert+0x140>)
 80028ea:	61bb      	str	r3, [r7, #24]
    if (p_list->TCB_Ptr == (OS_TCB *)0) {                       /* Is the list empty?                                   */
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10d      	bne.n	8002910 <OS_TickListInsert+0x58>
        p_tcb->TickRemain   = delta;                            /* Yes, Store time in TCB                               */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	645a      	str	r2, [r3, #68]	@ 0x44
        p_tcb->TickNextPtr  = (OS_TCB *)0;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	615a      	str	r2, [r3, #20]
        p_tcb->TickPrevPtr  = (OS_TCB *)0;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	619a      	str	r2, [r3, #24]
        p_list->TCB_Ptr     = p_tcb;                            /* Point to TCB of task to place in the list            */
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	601a      	str	r2, [r3, #0]
        OS_DynTickSet(OSTickCtrStep);
#endif
#if (OS_CFG_DBG_EN > 0u)
        p_list->NbrEntries  = 1u;                               /* List contains 1 entry                                */
#endif
        return (OS_TRUE);
 800290c:	2301      	movs	r3, #1
 800290e:	e06a      	b.n	80029e6 <OS_TickListInsert+0x12e>

#if (OS_CFG_DBG_EN > 0u)
    p_list->NbrEntries++;                                       /* Update debug counter to reflect the new entry.       */
#endif

    p_tcb2 = p_list->TCB_Ptr;
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	623b      	str	r3, [r7, #32]
    remain = p_tcb2->TickRemain - elapsed;                      /* How many ticks until the head's delay expires?       */
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	617b      	str	r3, [r7, #20]

    if ((delta               <   remain) &&                     /* If our entry is the new head of the tick list    ... */
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	429a      	cmp	r2, r3
 8002926:	d219      	bcs.n	800295c <OS_TickListInsert+0xa4>
        (p_tcb2->TickPrevPtr == (OS_TCB *)0)) {
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	699b      	ldr	r3, [r3, #24]
    if ((delta               <   remain) &&                     /* If our entry is the new head of the tick list    ... */
 800292c:	2b00      	cmp	r3, #0
 800292e:	d115      	bne.n	800295c <OS_TickListInsert+0xa4>
        p_tcb->TickRemain    =  delta;                          /* ... the delta is equivalent to the full delay    ... */
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	645a      	str	r2, [r3, #68]	@ 0x44
        p_tcb2->TickRemain   =  remain - delta;                 /* ... the previous head's delta is now relative to it. */
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	1ad2      	subs	r2, r2, r3
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	645a      	str	r2, [r3, #68]	@ 0x44

        p_tcb->TickPrevPtr   = (OS_TCB *)0;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	619a      	str	r2, [r3, #24]
        p_tcb->TickNextPtr   =  p_tcb2;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a3a      	ldr	r2, [r7, #32]
 800294a:	615a      	str	r2, [r3, #20]
        p_tcb2->TickPrevPtr  =  p_tcb;
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	619a      	str	r2, [r3, #24]
        p_list->TCB_Ptr      =  p_tcb;
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	601a      	str	r2, [r3, #0]
                                                                /* In DTM, a new list head must update the tick     ... */
        OSTickCtrStep        =  delta;                          /* ... timer to interrupt at the new delay value.       */
        OS_DynTickSet(OSTickCtrStep);
#endif

        return (OS_TRUE);
 8002958:	2301      	movs	r3, #1
 800295a:	e044      	b.n	80029e6 <OS_TickListInsert+0x12e>
    }

                                                                /* Our entry comes after the current list head.         */
    delta  -= remain;                                           /* Make delta relative to the head.                     */
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	61fb      	str	r3, [r7, #28]
    p_tcb1  = p_tcb2;
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	627b      	str	r3, [r7, #36]	@ 0x24
    p_tcb2  = p_tcb1->TickNextPtr;
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	623b      	str	r3, [r7, #32]

    while ((p_tcb2 !=        (OS_TCB *)0) &&                    /* Find the appropriate position in the delta list.     */
 800296e:	e009      	b.n	8002984 <OS_TickListInsert+0xcc>
           (delta  >= p_tcb2->TickRemain)) {
        delta  -= p_tcb2->TickRemain;
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	61fb      	str	r3, [r7, #28]
        p_tcb1  = p_tcb2;
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	627b      	str	r3, [r7, #36]	@ 0x24
        p_tcb2  = p_tcb2->TickNextPtr;
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	623b      	str	r3, [r7, #32]
    while ((p_tcb2 !=        (OS_TCB *)0) &&                    /* Find the appropriate position in the delta list.     */
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d004      	beq.n	8002994 <OS_TickListInsert+0xdc>
           (delta  >= p_tcb2->TickRemain)) {
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    while ((p_tcb2 !=        (OS_TCB *)0) &&                    /* Find the appropriate position in the delta list.     */
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	429a      	cmp	r2, r3
 8002992:	d2ed      	bcs.n	8002970 <OS_TickListInsert+0xb8>
    }

    if (p_tcb2 != (OS_TCB *)0) {                                /* Our entry is not the last element in the list.       */
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d018      	beq.n	80029cc <OS_TickListInsert+0x114>
        p_tcb1               = p_tcb2->TickPrevPtr;
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24
        p_tcb->TickRemain    = delta;                           /* Store remaining time                                 */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	645a      	str	r2, [r3, #68]	@ 0x44
        p_tcb->TickPrevPtr   = p_tcb1;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029aa:	619a      	str	r2, [r3, #24]
        p_tcb->TickNextPtr   = p_tcb2;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a3a      	ldr	r2, [r7, #32]
 80029b0:	615a      	str	r2, [r3, #20]
        p_tcb2->TickRemain  -= delta;                           /* Reduce time of next entry in the list                */
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	1ad2      	subs	r2, r2, r3
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	645a      	str	r2, [r3, #68]	@ 0x44
        p_tcb2->TickPrevPtr  = p_tcb;
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	619a      	str	r2, [r3, #24]
        p_tcb1->TickNextPtr  = p_tcb;
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	615a      	str	r2, [r3, #20]
 80029ca:	e00b      	b.n	80029e4 <OS_TickListInsert+0x12c>

    } else {                                                    /* Our entry belongs at the end of the list.            */
        p_tcb->TickRemain    = delta;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	69fa      	ldr	r2, [r7, #28]
 80029d0:	645a      	str	r2, [r3, #68]	@ 0x44
        p_tcb->TickPrevPtr   = p_tcb1;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d6:	619a      	str	r2, [r3, #24]
        p_tcb->TickNextPtr   = (OS_TCB *)0;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	615a      	str	r2, [r3, #20]
        p_tcb1->TickNextPtr  = p_tcb;
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	615a      	str	r2, [r3, #20]
    }

    return (OS_TRUE);
 80029e4:	2301      	movs	r3, #1
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	372c      	adds	r7, #44	@ 0x2c
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	20001574 	.word	0x20001574
 80029f8:	20001578 	.word	0x20001578

080029fc <OS_TickListInsertDly>:

void  OS_TickListInsertDly (OS_TCB   *p_tcb,
                            OS_TICK   time,
                            OS_OPT    opt,
                            OS_ERR   *p_err)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	80fb      	strh	r3, [r7, #6]


#if (OS_CFG_DYN_TICK_EN > 0u)
    elapsed  = OS_DynTickGet();
#else
    elapsed  = 0u;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61bb      	str	r3, [r7, #24]
#endif

    if (opt == OS_OPT_TIME_MATCH) {                             /* MATCH to absolute tick ctr value mode                */
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d102      	bne.n	8002a1c <OS_TickListInsertDly+0x20>
        tick_base = 0u;                                         /* tick_base + time == time                             */
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	e03b      	b.n	8002a94 <OS_TickListInsertDly+0x98>

    } else if (opt == OS_OPT_TIME_PERIODIC) {                   /* PERIODIC mode.                                       */
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d135      	bne.n	8002a8e <OS_TickListInsertDly+0x92>
        if (time == 0u) {
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d104      	bne.n	8002a32 <OS_TickListInsertDly+0x36>
           *p_err = OS_ERR_TIME_ZERO_DLY;                       /* Infinite frequency is invalid.                       */
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	f247 227e 	movw	r2, #29310	@ 0x727e
 8002a2e:	801a      	strh	r2, [r3, #0]
            return;
 8002a30:	e047      	b.n	8002ac2 <OS_TickListInsertDly+0xc6>
        }

        tick_base = p_tcb->TickCtrPrev;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a36:	61fb      	str	r3, [r7, #28]

#if (OS_CFG_DYN_TICK_EN > 0u)                                   /* How far is our tick-base from the system time?       */
        base_offset = OSTickCtr + elapsed - tick_base;
#else
        base_offset = OSTickCtr - tick_base;
 8002a38:	4b23      	ldr	r3, [pc, #140]	@ (8002ac8 <OS_TickListInsertDly+0xcc>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]
#endif

        if (base_offset >= time) {                              /* If our task missed the last period, move         ... */
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d31a      	bcc.n	8002a80 <OS_TickListInsertDly+0x84>
            tick_base += time * (base_offset / time);           /* ... tick_base up to the next one.                    */
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	fb02 f303 	mul.w	r3, r2, r3
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	61fb      	str	r3, [r7, #28]
            if ((base_offset % time) != 0u) {
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	fb01 f202 	mul.w	r2, r1, r2
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <OS_TickListInsertDly+0x7e>
                tick_base += time;                              /* Account for rounding errors with integer division    */
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4413      	add	r3, r2
 8002a78:	61fb      	str	r3, [r7, #28]
            }

            p_tcb->TickCtrPrev = tick_base;                     /* Adjust the periodic tick base                        */
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	69fa      	ldr	r2, [r7, #28]
 8002a7e:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        p_tcb->TickCtrPrev += time;                             /* Update for the next time we perform a periodic dly.  */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	441a      	add	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	649a      	str	r2, [r3, #72]	@ 0x48
 8002a8c:	e002      	b.n	8002a94 <OS_TickListInsertDly+0x98>

    } else {                                                    /* RELATIVE time delay mode                             */
#if (OS_CFG_DYN_TICK_EN > 0u)                                   /* Our base is always the current system time.          */
        tick_base = OSTickCtr + elapsed;
#else
        tick_base = OSTickCtr;
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac8 <OS_TickListInsertDly+0xcc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	61fb      	str	r3, [r7, #28]
#endif
    }

    valid_dly = OS_TickListInsert(p_tcb, elapsed, tick_base, time);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	69b9      	ldr	r1, [r7, #24]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f7ff ff0c 	bl	80028b8 <OS_TickListInsert>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	74fb      	strb	r3, [r7, #19]

    if (valid_dly == OS_TRUE) {
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d107      	bne.n	8002aba <OS_TickListInsertDly+0xbe>
        p_tcb->TaskState = OS_TASK_STATE_DLY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
       *p_err            = OS_ERR_NONE;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	801a      	strh	r2, [r3, #0]
 8002ab8:	e003      	b.n	8002ac2 <OS_TickListInsertDly+0xc6>
    } else {
       *p_err = OS_ERR_TIME_ZERO_DLY;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f247 227e 	movw	r2, #29310	@ 0x727e
 8002ac0:	801a      	strh	r2, [r3, #0]
    }
}
 8002ac2:	3720      	adds	r7, #32
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20001574 	.word	0x20001574

08002acc <OS_TickListRemove>:
*              2) This function is assumed to be called with interrupts disabled.
************************************************************************************************************************
*/

void  OS_TickListRemove (OS_TCB  *p_tcb)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]

#if (OS_CFG_DYN_TICK_EN > 0u)
    elapsed = OS_DynTickGet();
#endif

    p_tcb1 = p_tcb->TickPrevPtr;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	617b      	str	r3, [r7, #20]
    p_tcb2 = p_tcb->TickNextPtr;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	613b      	str	r3, [r7, #16]
    p_list = &OSTickList;
 8002ae0:	4b20      	ldr	r3, [pc, #128]	@ (8002b64 <OS_TickListRemove+0x98>)
 8002ae2:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d11d      	bne.n	8002b26 <OS_TickListRemove+0x5a>
        if (p_tcb2 == (OS_TCB *)0) {                            /* Remove the ONLY entry in the list?                   */
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d106      	bne.n	8002afe <OS_TickListRemove+0x32>
            p_list->TCB_Ptr      = (OS_TCB *)0;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
#if (OS_CFG_DBG_EN > 0u)
            p_list->NbrEntries   =           0u;
#endif
            p_tcb->TickRemain    =           0u;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	645a      	str	r2, [r3, #68]	@ 0x44
        p_list->NbrEntries--;
#endif
        p_tcb->TickNextPtr       = (OS_TCB *)0;
        p_tcb->TickRemain        =           0u;
    }
}
 8002afc:	e02c      	b.n	8002b58 <OS_TickListRemove+0x8c>
            p_tcb2->TickPrevPtr  = (OS_TCB *)0;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain  += p_tcb->TickRemain;           /* Add back the ticks to the delta                      */
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0c:	441a      	add	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	645a      	str	r2, [r3, #68]	@ 0x44
            p_list->TCB_Ptr      = p_tcb2;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	601a      	str	r2, [r3, #0]
            p_tcb->TickNextPtr          = (OS_TCB *)0;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	615a      	str	r2, [r3, #20]
            p_tcb->TickRemain           =           0u;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8002b24:	e018      	b.n	8002b58 <OS_TickListRemove+0x8c>
        p_tcb1->TickNextPtr = p_tcb2;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	615a      	str	r2, [r3, #20]
        if (p_tcb2 != (OS_TCB *)0) {
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <OS_TickListRemove+0x7a>
            p_tcb2->TickPrevPtr  = p_tcb1;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain  += p_tcb->TickRemain;            /* Add back the ticks to the delta list                 */
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b40:	441a      	add	r2, r3
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	645a      	str	r2, [r3, #68]	@ 0x44
        p_tcb->TickPrevPtr       = (OS_TCB *)0;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
        p_tcb->TickNextPtr       = (OS_TCB *)0;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	615a      	str	r2, [r3, #20]
        p_tcb->TickRemain        =           0u;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8002b58:	bf00      	nop
 8002b5a:	371c      	adds	r7, #28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	20001578 	.word	0x20001578

08002b68 <OS_TickListUpdate>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TickListUpdate (OS_TICK  ticks)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]


#if (OS_CFG_DBG_EN > 0u)
    nbr_updated = 0u;
#endif
    p_list      = &OSTickList;
 8002b70:	4b5e      	ldr	r3, [pc, #376]	@ (8002cec <OS_TickListUpdate+0x184>)
 8002b72:	60fb      	str	r3, [r7, #12]
    p_tcb       = p_list->TCB_Ptr;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	617b      	str	r3, [r7, #20]
    if (p_tcb != (OS_TCB *)0) {
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80b0 	beq.w	8002ce2 <OS_TickListUpdate+0x17a>
        if (p_tcb->TickRemain <= ticks) {
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d308      	bcc.n	8002b9e <OS_TickListUpdate+0x36>
            ticks              = ticks - p_tcb->TickRemain;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	607b      	str	r3, [r7, #4]
            p_tcb->TickRemain  = 0u;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b9c:	e09a      	b.n	8002cd4 <OS_TickListUpdate+0x16c>
        } else {
            p_tcb->TickRemain -= ticks;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	1ad2      	subs	r2, r2, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        while (p_tcb->TickRemain == 0u) {
 8002baa:	e093      	b.n	8002cd4 <OS_TickListUpdate+0x16c>
#if (OS_CFG_DBG_EN > 0u)
            nbr_updated++;
#endif

            switch (p_tcb->TaskState) {
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d002      	beq.n	8002bbc <OS_TickListUpdate+0x54>
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d008      	beq.n	8002bcc <OS_TickListUpdate+0x64>
 8002bba:	e00c      	b.n	8002bd6 <OS_TickListUpdate+0x6e>
                case OS_TASK_STATE_DLY:
                     p_tcb->TaskState = OS_TASK_STATE_RDY;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
                     OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                    */
 8002bc4:	6978      	ldr	r0, [r7, #20]
 8002bc6:	f7fe fc85 	bl	80014d4 <OS_RdyListInsert>
                     break;
 8002bca:	e062      	b.n	8002c92 <OS_TickListUpdate+0x12a>

                case OS_TASK_STATE_DLY_SUSPENDED:
                     p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2204      	movs	r2, #4
 8002bd0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
                     break;
 8002bd4:	e05d      	b.n	8002c92 <OS_TickListUpdate+0x12a>

                default:
#if (OS_CFG_MUTEX_EN > 0u)
                     p_tcb_owner = (OS_TCB *)0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
                     if (p_tcb->PendOn == OS_TASK_PEND_ON_MUTEX) {
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d103      	bne.n	8002bec <OS_TickListUpdate+0x84>
                         p_tcb_owner = (OS_TCB *)((OS_MUTEX *)((void *)p_tcb->PendObjPtr))->OwnerTCBPtr;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	613b      	str	r3, [r7, #16]
                     }
#endif

#if (OS_MSG_EN > 0u)
                     p_tcb->MsgPtr  = (void *)0;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	655a      	str	r2, [r3, #84]	@ 0x54
                     p_tcb->MsgSize = 0u;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
#endif
#if (OS_CFG_TS_EN > 0u)
                     p_tcb->TS      = OS_TS_GET();
#endif
                     OS_PendListRemove(p_tcb);                           /* Remove task from pend list                           */
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f7fe fb8f 	bl	800131e <OS_PendListRemove>

                     switch (p_tcb->TaskState) {
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d002      	beq.n	8002c10 <OS_TickListUpdate+0xa8>
 8002c0a:	2b07      	cmp	r3, #7
 8002c0c:	d008      	beq.n	8002c20 <OS_TickListUpdate+0xb8>
                         case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                              p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
                              break;

                         default:
                              break;
 8002c0e:	e00c      	b.n	8002c2a <OS_TickListUpdate+0xc2>
                              OS_RdyListInsert(p_tcb);                   /* Insert the task in the ready list                    */
 8002c10:	6978      	ldr	r0, [r7, #20]
 8002c12:	f7fe fc5f 	bl	80014d4 <OS_RdyListInsert>
                              p_tcb->TaskState  = OS_TASK_STATE_RDY;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
                              break;
 8002c1e:	e004      	b.n	8002c2a <OS_TickListUpdate+0xc2>
                              p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2204      	movs	r2, #4
 8002c24:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
                              break;
 8002c28:	bf00      	nop
                     }
                     p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;         /* Indicate pend timed out                              */
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                     p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                           */
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

#if (OS_CFG_MUTEX_EN > 0u)
                     if (p_tcb_owner != (OS_TCB *)0) {
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d027      	beq.n	8002c90 <OS_TickListUpdate+0x128>
                         if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d01f      	beq.n	8002c90 <OS_TickListUpdate+0x128>
                             (p_tcb_owner->Prio == p_tcb->Prio)) {       /* Has the owner inherited a priority?                  */
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
                         if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d117      	bne.n	8002c90 <OS_TickListUpdate+0x128>
                             prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8002c60:	6938      	ldr	r0, [r7, #16]
 8002c62:	f7fe fff4 	bl	8001c4e <OS_MutexGrpPrioFindHighest>
 8002c66:	4603      	mov	r3, r0
 8002c68:	72fb      	strb	r3, [r7, #11]
                             prio_new = (prio_new > p_tcb_owner->BasePrio) ? p_tcb_owner->BasePrio : prio_new;
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c70:	7afa      	ldrb	r2, [r7, #11]
 8002c72:	4293      	cmp	r3, r2
 8002c74:	bf28      	it	cs
 8002c76:	4613      	movcs	r3, r2
 8002c78:	72fb      	strb	r3, [r7, #11]
                             if (prio_new != p_tcb_owner->Prio) {
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002c80:	7afa      	ldrb	r2, [r7, #11]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d004      	beq.n	8002c90 <OS_TickListUpdate+0x128>
                                 OS_TaskChangePrio(p_tcb_owner, prio_new);
 8002c86:	7afb      	ldrb	r3, [r7, #11]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	6938      	ldr	r0, [r7, #16]
 8002c8c:	f7ff fd42 	bl	8002714 <OS_TaskChangePrio>
                                 OS_TRACE_MUTEX_TASK_PRIO_DISINHERIT(p_tcb_owner, p_tcb_owner->Prio);
                             }
                         }
                     }
#endif
                     break;
 8002c90:	bf00      	nop
            }

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	601a      	str	r2, [r3, #0]
            p_tcb           = p_list->TCB_Ptr;                           /* Get 'p_tcb' again for loop                           */
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	617b      	str	r3, [r7, #20]
            if (p_tcb == (OS_TCB *)0) {
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01c      	beq.n	8002ce0 <OS_TickListUpdate+0x178>
                break;
            } else {
#if (OS_CFG_DBG_EN > 0u)
                p_list->NbrEntries--;
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	619a      	str	r2, [r3, #24]
                if (p_tcb->TickRemain <= ticks) {
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d308      	bcc.n	8002cc8 <OS_TickListUpdate+0x160>
                    ticks              = ticks - p_tcb->TickRemain;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	607b      	str	r3, [r7, #4]
                    p_tcb->TickRemain  = 0u;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	645a      	str	r2, [r3, #68]	@ 0x44
 8002cc6:	e005      	b.n	8002cd4 <OS_TickListUpdate+0x16c>
                } else {
                    p_tcb->TickRemain -= ticks;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	1ad2      	subs	r2, r2, r3
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	645a      	str	r2, [r3, #68]	@ 0x44
        while (p_tcb->TickRemain == 0u) {
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f43f af67 	beq.w	8002bac <OS_TickListUpdate+0x44>
        }
    }
#if (OS_CFG_DBG_EN > 0u)
    p_list->NbrUpdated = nbr_updated;
#endif
}
 8002cde:	e000      	b.n	8002ce2 <OS_TickListUpdate+0x17a>
                break;
 8002ce0:	bf00      	nop
}
 8002ce2:	bf00      	nop
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20001578 	.word	0x20001578

08002cf0 <OSTimeDly>:
*/

void  OSTimeDly (OS_TICK   dly,
                 OS_OPT    opt,
                 OS_ERR   *p_err)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	817b      	strh	r3, [r7, #10]
#if (OS_CFG_TICK_EN > 0u)
    CPU_SR_ALLOC();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
    *p_err = OS_ERR_TICK_DISABLED;
    return;
#else

#if (OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u)
    if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
 8002d02:	4b2b      	ldr	r3, [pc, #172]	@ (8002db0 <OSTimeDly+0xc0>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d004      	beq.n	8002d14 <OSTimeDly+0x24>
       *p_err = OS_ERR_TIME_DLY_ISR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f247 2275 	movw	r2, #29301	@ 0x7275
 8002d10:	801a      	strh	r2, [r3, #0]
        return;
 8002d12:	e049      	b.n	8002da8 <OSTimeDly+0xb8>
    }
#endif

#if (OS_CFG_INVALID_OS_CALLS_CHK_EN > 0u)
    if (OSRunning != OS_STATE_OS_RUNNING) {                     /* Is the kernel running?                               */
 8002d14:	4b27      	ldr	r3, [pc, #156]	@ (8002db4 <OSTimeDly+0xc4>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d004      	beq.n	8002d26 <OSTimeDly+0x36>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f645 6289 	movw	r2, #24201	@ 0x5e89
 8002d22:	801a      	strh	r2, [r3, #0]
        return;
 8002d24:	e040      	b.n	8002da8 <OSTimeDly+0xb8>
    }
#endif

    if (OSSchedLockNestingCtr > 0u) {                           /* Can't delay when the scheduler is locked             */
 8002d26:	4b24      	ldr	r3, [pc, #144]	@ (8002db8 <OSTimeDly+0xc8>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d004      	beq.n	8002d38 <OSTimeDly+0x48>
       *p_err = OS_ERR_SCHED_LOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f646 5263 	movw	r2, #28003	@ 0x6d63
 8002d34:	801a      	strh	r2, [r3, #0]
        return;
 8002d36:	e037      	b.n	8002da8 <OSTimeDly+0xb8>
    }

    switch (opt) {
 8002d38:	897b      	ldrh	r3, [r7, #10]
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	bf8c      	ite	hi
 8002d3e:	2201      	movhi	r2, #1
 8002d40:	2200      	movls	r2, #0
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	2a00      	cmp	r2, #0
 8002d46:	d10c      	bne.n	8002d62 <OSTimeDly+0x72>
 8002d48:	f240 1215 	movw	r2, #277	@ 0x115
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d104      	bne.n	8002d6c <OSTimeDly+0x7c>
        case OS_OPT_TIME_PERIODIC:
        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f645 6225 	movw	r2, #24101	@ 0x5e25
 8002d68:	801a      	strh	r2, [r3, #0]
             return;
 8002d6a:	e01d      	b.n	8002da8 <OSTimeDly+0xb8>
             break;
 8002d6c:	bf00      	nop
    }

#if (OS_CFG_TICK_EN > 0u)
    CPU_CRITICAL_ENTER();
 8002d6e:	2040      	movs	r0, #64	@ 0x40
 8002d70:	f7fd fa2e 	bl	80001d0 <CPU_SR_Save>
 8002d74:	6178      	str	r0, [r7, #20]
    OS_TickListInsertDly(OSTCBCurPtr,
 8002d76:	4b11      	ldr	r3, [pc, #68]	@ (8002dbc <OSTimeDly+0xcc>)
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	897a      	ldrh	r2, [r7, #10]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68f9      	ldr	r1, [r7, #12]
 8002d80:	f7ff fe3c 	bl	80029fc <OS_TickListInsertDly>
                         dly,
                         opt,
                         p_err);
    if (*p_err != OS_ERR_NONE) {
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <OSTimeDly+0xa4>
         CPU_CRITICAL_EXIT();
 8002d8c:	6978      	ldr	r0, [r7, #20]
 8002d8e:	f7fd fa2d 	bl	80001ec <CPU_SR_Restore>
         return;
 8002d92:	e009      	b.n	8002da8 <OSTimeDly+0xb8>
    }

    OS_RdyListRemove(OSTCBCurPtr);                              /* Remove current task from ready list                  */
 8002d94:	4b09      	ldr	r3, [pc, #36]	@ (8002dbc <OSTimeDly+0xcc>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fe fc6d 	bl	8001678 <OS_RdyListRemove>
    CPU_CRITICAL_EXIT();
 8002d9e:	6978      	ldr	r0, [r7, #20]
 8002da0:	f7fd fa24 	bl	80001ec <CPU_SR_Restore>
    OSSched();                                                  /* Find next task to run!                               */
 8002da4:	f7fe f904 	bl	8000fb0 <OSSched>
#endif
#endif
}
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20001284 	.word	0x20001284
 8002db4:	20001285 	.word	0x20001285
 8002db8:	200014a4 	.word	0x200014a4
 8002dbc:	20001658 	.word	0x20001658

08002dc0 <OSTimeTick>:
* Note(s)    : none
************************************************************************************************************************
*/

void  OSTimeTick (void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
    if (OSRunning != OS_STATE_OS_RUNNING) {
 8002dc4:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <OSTimeTick+0x2c>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d10d      	bne.n	8002de8 <OSTimeTick+0x28>
        return;
    }

    OSTimeTickHook();                                           /* Call user definable hook                             */
 8002dcc:	f7fd ff72 	bl	8000cb4 <OSTimeTickHook>

#if (OS_CFG_SCHED_ROUND_ROBIN_EN > 0u)
    OS_SchedRoundRobin(&OSRdyList[OSPrioCur]);                  /* Update quanta ctr for the task which just ran        */
 8002dd0:	4b07      	ldr	r3, [pc, #28]	@ (8002df0 <OSTimeTick+0x30>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4a07      	ldr	r2, [pc, #28]	@ (8002df4 <OSTimeTick+0x34>)
 8002dd8:	4413      	add	r3, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe fc90 	bl	8001700 <OS_SchedRoundRobin>
#endif

#if (OS_CFG_TICK_EN > 0u)
    OS_TickUpdate(1u);                                          /* Update from the ISR                                  */
 8002de0:	2001      	movs	r0, #1
 8002de2:	f7ff fd4d 	bl	8002880 <OS_TickUpdate>
 8002de6:	e000      	b.n	8002dea <OSTimeTick+0x2a>
        return;
 8002de8:	bf00      	nop
#endif
}
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20001285 	.word	0x20001285
 8002df0:	20001298 	.word	0x20001298
 8002df4:	200012a4 	.word	0x200012a4

08002df8 <OS_TmrInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrInit (OS_ERR  *p_err)
{
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b08d      	sub	sp, #52	@ 0x34
 8002dfc:	af0a      	add	r7, sp, #40	@ 0x28
 8002dfe:	6078      	str	r0, [r7, #4]
#if (OS_CFG_DBG_EN > 0u)
    OSTmrQty             =           0u;                        /* Keep track of the number of timers created           */
    OSTmrDbgListPtr      = (OS_TMR *)0;
#endif

    OSTmrListPtr         = (OS_TMR *)0;                         /* Create an empty timer list                           */
 8002e00:	4b29      	ldr	r3, [pc, #164]	@ (8002ea8 <OS_TmrInit+0xb0>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
#if (OS_CFG_DBG_EN > 0u)
    OSTmrListEntries     =           0u;
#endif
                                                                /* Calculate Timer to Ticks multiplier                  */
    OSTmrToTicksMult = OSCfg_TickRate_Hz / OSCfg_TmrTaskRate_Hz;
 8002e06:	4b29      	ldr	r3, [pc, #164]	@ (8002eac <OS_TmrInit+0xb4>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4b29      	ldr	r3, [pc, #164]	@ (8002eb0 <OS_TmrInit+0xb8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e12:	4a28      	ldr	r2, [pc, #160]	@ (8002eb4 <OS_TmrInit+0xbc>)
 8002e14:	6013      	str	r3, [r2, #0]
#if (OS_CFG_TS_EN > 0u)
    OSTmrTaskTime        =           0u;
    OSTmrTaskTimeMax     =           0u;
#endif

    OSMutexCreate(&OSTmrMutex,                                  /* Use a mutex to protect the timers                    */
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4827      	ldr	r0, [pc, #156]	@ (8002eb8 <OS_TmrInit+0xc0>)
 8002e1c:	f7fe fdb4 	bl	8001988 <OSMutexCreate>
                  (CPU_CHAR *)0,
#else
                  (CPU_CHAR *)"OS Tmr Mutex",
#endif
                  p_err);
    if (*p_err != OS_ERR_NONE) {
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d13b      	bne.n	8002ea0 <OS_TmrInit+0xa8>
        return;
    }

    OS_TmrCondCreate();
 8002e28:	f000 fa24 	bl	8003274 <OS_TmrCondCreate>
                                                                /* -------------- CREATE THE TIMER TASK --------------- */
    if (OSCfg_TmrTaskStkBasePtr == (CPU_STK *)0) {
 8002e2c:	4b23      	ldr	r3, [pc, #140]	@ (8002ebc <OS_TmrInit+0xc4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d104      	bne.n	8002e3e <OS_TmrInit+0x46>
       *p_err = OS_ERR_TMR_STK_INVALID;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f247 3247 	movw	r2, #29511	@ 0x7347
 8002e3a:	801a      	strh	r2, [r3, #0]
        return;
 8002e3c:	e031      	b.n	8002ea2 <OS_TmrInit+0xaa>
    }

    if (OSCfg_TmrTaskStkSize < OSCfg_StkSizeMin) {
 8002e3e:	4b20      	ldr	r3, [pc, #128]	@ (8002ec0 <OS_TmrInit+0xc8>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b20      	ldr	r3, [pc, #128]	@ (8002ec4 <OS_TmrInit+0xcc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d204      	bcs.n	8002e54 <OS_TmrInit+0x5c>
       *p_err = OS_ERR_TMR_STK_SIZE_INVALID;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f247 3248 	movw	r2, #29512	@ 0x7348
 8002e50:	801a      	strh	r2, [r3, #0]
        return;
 8002e52:	e026      	b.n	8002ea2 <OS_TmrInit+0xaa>
    }

    if (OSCfg_TmrTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 8002e54:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec8 <OS_TmrInit+0xd0>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e5a:	d904      	bls.n	8002e66 <OS_TmrInit+0x6e>
       *p_err = OS_ERR_TMR_PRIO_INVALID;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f247 3246 	movw	r2, #29510	@ 0x7346
 8002e62:	801a      	strh	r2, [r3, #0]
        return;
 8002e64:	e01d      	b.n	8002ea2 <OS_TmrInit+0xaa>
    }

    OSTaskCreate(&OSTmrTaskTCB,
 8002e66:	4b18      	ldr	r3, [pc, #96]	@ (8002ec8 <OS_TmrInit+0xd0>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	4a14      	ldr	r2, [pc, #80]	@ (8002ebc <OS_TmrInit+0xc4>)
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	4917      	ldr	r1, [pc, #92]	@ (8002ecc <OS_TmrInit+0xd4>)
 8002e70:	6809      	ldr	r1, [r1, #0]
 8002e72:	4813      	ldr	r0, [pc, #76]	@ (8002ec0 <OS_TmrInit+0xc8>)
 8002e74:	6800      	ldr	r0, [r0, #0]
 8002e76:	687c      	ldr	r4, [r7, #4]
 8002e78:	9408      	str	r4, [sp, #32]
 8002e7a:	240b      	movs	r4, #11
 8002e7c:	9407      	str	r4, [sp, #28]
 8002e7e:	2400      	movs	r4, #0
 8002e80:	9406      	str	r4, [sp, #24]
 8002e82:	2400      	movs	r4, #0
 8002e84:	9405      	str	r4, [sp, #20]
 8002e86:	2400      	movs	r4, #0
 8002e88:	9404      	str	r4, [sp, #16]
 8002e8a:	9003      	str	r0, [sp, #12]
 8002e8c:	9102      	str	r1, [sp, #8]
 8002e8e:	9201      	str	r2, [sp, #4]
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	2300      	movs	r3, #0
 8002e94:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed0 <OS_TmrInit+0xd8>)
 8002e96:	2100      	movs	r1, #0
 8002e98:	480e      	ldr	r0, [pc, #56]	@ (8002ed4 <OS_TmrInit+0xdc>)
 8002e9a:	f7ff f945 	bl	8002128 <OSTaskCreate>
 8002e9e:	e000      	b.n	8002ea2 <OS_TmrInit+0xaa>
        return;
 8002ea0:	bf00      	nop
                  0u,
                  0u,
                 (void     *)0,
                 (OS_OPT_TASK_STK_CHK | (OS_OPT)(OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS)),
                  p_err);
}
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd90      	pop	{r4, r7, pc}
 8002ea8:	2000157c 	.word	0x2000157c
 8002eac:	08004534 	.word	0x08004534
 8002eb0:	0800453c 	.word	0x0800453c
 8002eb4:	20001654 	.word	0x20001654
 8002eb8:	20001590 	.word	0x20001590
 8002ebc:	08004540 	.word	0x08004540
 8002ec0:	08004548 	.word	0x08004548
 8002ec4:	08004530 	.word	0x08004530
 8002ec8:	08004538 	.word	0x08004538
 8002ecc:	08004544 	.word	0x08004544
 8002ed0:	0800310d 	.word	0x0800310d
 8002ed4:	200015a8 	.word	0x200015a8

08002ed8 <OS_TmrLink>:
************************************************************************************************************************
*/

void OS_TmrLink (OS_TMR   *p_tmr,
                 OS_TICK   time)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
    OS_TMR   *p_tmr2;
    OS_TICK   remain;
    OS_TICK   delta;


    if (OSTmrListPtr == (OS_TMR *)0) {                          /* Is the list empty?                                   */
 8002ee2:	4b43      	ldr	r3, [pc, #268]	@ (8002ff0 <OS_TmrLink+0x118>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10e      	bne.n	8002f08 <OS_TmrLink+0x30>
        p_tmr->NextPtr    = (OS_TMR *)0;                        /* Yes, this is the first entry                         */
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	60da      	str	r2, [r3, #12]
        p_tmr->PrevPtr    = (OS_TMR *)0;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]
        OSTmrListPtr      = p_tmr;
 8002ef6:	4a3e      	ldr	r2, [pc, #248]	@ (8002ff0 <OS_TmrLink+0x118>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6013      	str	r3, [r2, #0]
#if (OS_CFG_DBG_EN > 0u)
        OSTmrListEntries  = 1u;
#endif
        OSTmrTaskTickBase = time;
 8002efc:	4a3d      	ldr	r2, [pc, #244]	@ (8002ff4 <OS_TmrLink+0x11c>)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	6013      	str	r3, [r2, #0]
        OS_TmrCondSignal();
 8002f02:	f000 fa6b 	bl	80033dc <OS_TmrCondSignal>

        return;
 8002f06:	e070      	b.n	8002fea <OS_TmrLink+0x112>

#if (OS_CFG_DBG_EN > 0u)
    OSTmrListEntries++;
#endif

    delta = (time + p_tmr->Remain) - OSTmrTaskTickBase;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	441a      	add	r2, r3
 8002f10:	4b38      	ldr	r3, [pc, #224]	@ (8002ff4 <OS_TmrLink+0x11c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	60fb      	str	r3, [r7, #12]

    p_tmr2 = OSTmrListPtr;                                      /* No,  Insert somewhere in the list in delta order     */
 8002f18:	4b35      	ldr	r3, [pc, #212]	@ (8002ff0 <OS_TmrLink+0x118>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	613b      	str	r3, [r7, #16]
    remain = p_tmr2->Remain;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	60bb      	str	r3, [r7, #8]

    if ((delta           <     remain) &&
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d21a      	bcs.n	8002f62 <OS_TmrLink+0x8a>
        (p_tmr2->PrevPtr == (OS_TMR *)0)) {                     /* Are we the new head of the list?                     */
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	691b      	ldr	r3, [r3, #16]
    if ((delta           <     remain) &&
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d116      	bne.n	8002f62 <OS_TmrLink+0x8a>
        p_tmr2->Remain    =  remain - delta;
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	615a      	str	r2, [r3, #20]
        p_tmr->PrevPtr    = (OS_TMR *)0;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	611a      	str	r2, [r3, #16]
        p_tmr->NextPtr    =  p_tmr2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	60da      	str	r2, [r3, #12]
        p_tmr2->PrevPtr   =  p_tmr;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	611a      	str	r2, [r3, #16]
        OSTmrListPtr      =  p_tmr;
 8002f50:	4a27      	ldr	r2, [pc, #156]	@ (8002ff0 <OS_TmrLink+0x118>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6013      	str	r3, [r2, #0]

        OSTmrTaskTickBase = time;
 8002f56:	4a27      	ldr	r2, [pc, #156]	@ (8002ff4 <OS_TmrLink+0x11c>)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	6013      	str	r3, [r2, #0]
        OS_TmrCondSignal();
 8002f5c:	f000 fa3e 	bl	80033dc <OS_TmrCondSignal>

        return;
 8002f60:	e043      	b.n	8002fea <OS_TmrLink+0x112>
    }

                                                                /* No                                                   */
    delta  -= remain;                                           /* Make delta relative to the current head.             */
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	60fb      	str	r3, [r7, #12]
    p_tmr1  = p_tmr2;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	617b      	str	r3, [r7, #20]
    p_tmr2  = p_tmr1->NextPtr;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	613b      	str	r3, [r7, #16]


    while ((p_tmr2 !=        (OS_TMR *)0) &&                    /* Find the appropriate position in the delta list.     */
 8002f74:	e009      	b.n	8002f8a <OS_TmrLink+0xb2>
           (delta  >= p_tmr2->Remain)) {
        delta  -= p_tmr2->Remain;                               /* Update our delta as we traverse the list.            */
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	60fb      	str	r3, [r7, #12]
        p_tmr1  = p_tmr2;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	617b      	str	r3, [r7, #20]
        p_tmr2  = p_tmr2->NextPtr;
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	613b      	str	r3, [r7, #16]
    while ((p_tmr2 !=        (OS_TMR *)0) &&                    /* Find the appropriate position in the delta list.     */
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d004      	beq.n	8002f9a <OS_TmrLink+0xc2>
           (delta  >= p_tmr2->Remain)) {
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	695b      	ldr	r3, [r3, #20]
    while ((p_tmr2 !=        (OS_TMR *)0) &&                    /* Find the appropriate position in the delta list.     */
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d2ed      	bcs.n	8002f76 <OS_TmrLink+0x9e>
    }


    if (p_tmr2 != (OS_TMR *)0) {                                /* Our entry is not the last element in the list.       */
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d018      	beq.n	8002fd2 <OS_TmrLink+0xfa>
        p_tmr1           = p_tmr2->PrevPtr;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	617b      	str	r3, [r7, #20]
        p_tmr->Remain    = delta;                               /* Store remaining time                                 */
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	615a      	str	r2, [r3, #20]
        p_tmr->PrevPtr   = p_tmr1;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	611a      	str	r2, [r3, #16]
        p_tmr->NextPtr   = p_tmr2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	60da      	str	r2, [r3, #12]
        p_tmr2->Remain  -= delta;                               /* Reduce time of next entry in the list                */
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1ad2      	subs	r2, r2, r3
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	615a      	str	r2, [r3, #20]
        p_tmr2->PrevPtr  = p_tmr;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	611a      	str	r2, [r3, #16]
        p_tmr1->NextPtr  = p_tmr;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	60da      	str	r2, [r3, #12]
 8002fd0:	e00b      	b.n	8002fea <OS_TmrLink+0x112>

    } else {                                                    /* Our entry belongs at the end of the list.            */
        p_tmr->Remain    = delta;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	615a      	str	r2, [r3, #20]
        p_tmr->PrevPtr   = p_tmr1;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	611a      	str	r2, [r3, #16]
        p_tmr->NextPtr   = (OS_TMR *)0;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	60da      	str	r2, [r3, #12]
        p_tmr1->NextPtr  = p_tmr;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	60da      	str	r2, [r3, #12]
    }
}
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	2000157c 	.word	0x2000157c
 8002ff4:	20001650 	.word	0x20001650

08002ff8 <OS_TmrUnlink>:
************************************************************************************************************************
*/

void  OS_TmrUnlink (OS_TMR   *p_tmr,
                    OS_TICK   time)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
    OS_TMR   *p_tmr1;
    OS_TMR   *p_tmr2;
    OS_TICK   elapsed;


    p_tmr1                          = p_tmr->PrevPtr;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	60fb      	str	r3, [r7, #12]
    p_tmr2                          = p_tmr->NextPtr;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	617b      	str	r3, [r7, #20]
    if (p_tmr1 == (OS_TMR *)0) {
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d15a      	bne.n	80030ca <OS_TmrUnlink+0xd2>
        if (p_tmr2 == (OS_TMR *)0) {                            /* Remove the ONLY entry in the list?                   */
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10b      	bne.n	8003032 <OS_TmrUnlink+0x3a>
            OSTmrListPtr            = (OS_TMR *)0;
 800301a:	4b3a      	ldr	r3, [pc, #232]	@ (8003104 <OS_TmrUnlink+0x10c>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
#if (OS_CFG_DBG_EN > 0u)
            OSTmrListEntries        = 0u;
#endif
            p_tmr->Remain           = 0u;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	615a      	str	r2, [r3, #20]

            OSTmrTaskTickBase       = time;
 8003026:	4a38      	ldr	r2, [pc, #224]	@ (8003108 <OS_TmrUnlink+0x110>)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	6013      	str	r3, [r2, #0]
            OS_TmrCondSignal();
 800302c:	f000 f9d6 	bl	80033dc <OS_TmrCondSignal>
        }
        p_tmr->PrevPtr              = (OS_TMR *)0;
        p_tmr->NextPtr              = (OS_TMR *)0;
        p_tmr->Remain               =           0u;
    }
}
 8003030:	e064      	b.n	80030fc <OS_TmrUnlink+0x104>
            elapsed                 = time - OSTmrTaskTickBase;
 8003032:	4b35      	ldr	r3, [pc, #212]	@ (8003108 <OS_TmrUnlink+0x110>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	613b      	str	r3, [r7, #16]
            p_tmr2->PrevPtr         = (OS_TMR *)0;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2200      	movs	r2, #0
 8003040:	611a      	str	r2, [r3, #16]
            p_tmr2->Remain         += p_tmr->Remain;            /* Add back the ticks to the delta                      */
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	441a      	add	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	615a      	str	r2, [r3, #20]
            OSTmrListPtr            = p_tmr2;
 8003050:	4a2c      	ldr	r2, [pc, #176]	@ (8003104 <OS_TmrUnlink+0x10c>)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	6013      	str	r3, [r2, #0]
            while ((elapsed >           0u) &&
 8003056:	e01a      	b.n	800308e <OS_TmrUnlink+0x96>
                if (elapsed > p_tmr2->Remain) {
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	429a      	cmp	r2, r3
 8003060:	d908      	bls.n	8003074 <OS_TmrUnlink+0x7c>
                    elapsed        -= p_tmr2->Remain;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	613b      	str	r3, [r7, #16]
                    p_tmr2->Remain  = 0u;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2200      	movs	r2, #0
 8003070:	615a      	str	r2, [r3, #20]
 8003072:	e007      	b.n	8003084 <OS_TmrUnlink+0x8c>
                    p_tmr2->Remain -= elapsed;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad2      	subs	r2, r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	615a      	str	r2, [r3, #20]
                    elapsed         = 0u;
 8003080:	2300      	movs	r3, #0
 8003082:	613b      	str	r3, [r7, #16]
                p_tmr1              = p_tmr2;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	60fb      	str	r3, [r7, #12]
                p_tmr2              = p_tmr1->NextPtr;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	617b      	str	r3, [r7, #20]
            while ((elapsed >           0u) &&
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <OS_TmrUnlink+0xa2>
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1de      	bne.n	8003058 <OS_TmrUnlink+0x60>
            if ((OSTmrListPtr->Remain != p_tmr->Remain) ||      /* Reload if new head has a different delay         ... */
 800309a:	4b1a      	ldr	r3, [pc, #104]	@ (8003104 <OS_TmrUnlink+0x10c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d104      	bne.n	80030b2 <OS_TmrUnlink+0xba>
                (OSTmrListPtr->Remain ==            0u)) {      /* ... or has already timed out.                        */
 80030a8:	4b16      	ldr	r3, [pc, #88]	@ (8003104 <OS_TmrUnlink+0x10c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
            if ((OSTmrListPtr->Remain != p_tmr->Remain) ||      /* Reload if new head has a different delay         ... */
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d104      	bne.n	80030bc <OS_TmrUnlink+0xc4>
                OSTmrTaskTickBase   = time;
 80030b2:	4a15      	ldr	r2, [pc, #84]	@ (8003108 <OS_TmrUnlink+0x110>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	6013      	str	r3, [r2, #0]
                OS_TmrCondSignal();
 80030b8:	f000 f990 	bl	80033dc <OS_TmrCondSignal>
            p_tmr->NextPtr          = (OS_TMR *)0;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	60da      	str	r2, [r3, #12]
            p_tmr->Remain           =           0u;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	615a      	str	r2, [r3, #20]
}
 80030c8:	e018      	b.n	80030fc <OS_TmrUnlink+0x104>
        p_tmr1->NextPtr             = p_tmr2;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	60da      	str	r2, [r3, #12]
        if (p_tmr2 != (OS_TMR *)0) {
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <OS_TmrUnlink+0xf2>
            p_tmr2->PrevPtr         = p_tmr1;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	611a      	str	r2, [r3, #16]
            p_tmr2->Remain         += p_tmr->Remain;            /* Add back the ticks to the delta list                 */
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	441a      	add	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	615a      	str	r2, [r3, #20]
        p_tmr->PrevPtr              = (OS_TMR *)0;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	611a      	str	r2, [r3, #16]
        p_tmr->NextPtr              = (OS_TMR *)0;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	60da      	str	r2, [r3, #12]
        p_tmr->Remain               =           0u;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	615a      	str	r2, [r3, #20]
}
 80030fc:	bf00      	nop
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	2000157c 	.word	0x2000157c
 8003108:	20001650 	.word	0x20001650

0800310c <OS_TmrTask>:
*              3) Timer callbacks are allowed to make calls to the Timer APIs.
************************************************************************************************************************
*/

void  OS_TmrTask (void  *p_arg)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
    OS_TICK               elapsed;
    OS_TICK               time;
#if (OS_CFG_TS_EN > 0u)
    CPU_TS                ts_start;
#endif
    CPU_SR_ALLOC();
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]


    (void)p_arg;                                                /* Not using 'p_arg', prevent compiler warning          */

    OS_TmrLock();
 8003118:	f000 f89a 	bl	8003250 <OS_TmrLock>

    for (;;) {
        if (OSTmrListPtr == (OS_TMR *)0) {
 800311c:	4b49      	ldr	r3, [pc, #292]	@ (8003244 <OS_TmrTask+0x138>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d102      	bne.n	800312a <OS_TmrTask+0x1e>
            timeout                = 0u;
 8003124:	2300      	movs	r3, #0
 8003126:	61bb      	str	r3, [r7, #24]
 8003128:	e003      	b.n	8003132 <OS_TmrTask+0x26>
        } else {
            timeout                = OSTmrListPtr->Remain;
 800312a:	4b46      	ldr	r3, [pc, #280]	@ (8003244 <OS_TmrTask+0x138>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	61bb      	str	r3, [r7, #24]
        }

        OS_TmrCondWait(timeout);                                /* Suspend the timer task until it needs to process ... */
 8003132:	69b8      	ldr	r0, [r7, #24]
 8003134:	f000 f8c0 	bl	80032b8 <OS_TmrCondWait>
                                                                /* ... the timer list again. Also release the mutex ... */
                                                                /* ... so that application tasks can add/remove timers. */

        if (OSTmrListPtr == (OS_TMR *)0) {                      /* Suppresses static analyzer warnings.                 */
 8003138:	4b42      	ldr	r3, [pc, #264]	@ (8003244 <OS_TmrTask+0x138>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d07f      	beq.n	8003240 <OS_TmrTask+0x134>

#if (OS_CFG_TS_EN > 0u)
        ts_start = OS_TS_GET();
#endif

        CPU_CRITICAL_ENTER();
 8003140:	2040      	movs	r0, #64	@ 0x40
 8003142:	f7fd f845 	bl	80001d0 <CPU_SR_Save>
 8003146:	6138      	str	r0, [r7, #16]
#if (OS_CFG_DYN_TICK_EN > 0u)
        time                       = OSTickCtr + OS_DynTickGet();
#else
        time                       = OSTickCtr;
 8003148:	4b3f      	ldr	r3, [pc, #252]	@ (8003248 <OS_TmrTask+0x13c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]
#endif
        CPU_CRITICAL_EXIT();
 800314e:	6938      	ldr	r0, [r7, #16]
 8003150:	f7fd f84c 	bl	80001ec <CPU_SR_Restore>
        elapsed                    = time - OSTmrTaskTickBase;
 8003154:	4b3d      	ldr	r3, [pc, #244]	@ (800324c <OS_TmrTask+0x140>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	617b      	str	r3, [r7, #20]
        OSTmrTaskTickBase          = time;
 800315e:	4a3b      	ldr	r2, [pc, #236]	@ (800324c <OS_TmrTask+0x140>)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6013      	str	r3, [r2, #0]

                                                                /* Update the delta values.                             */
        p_tmr = OSTmrListPtr;
 8003164:	4b37      	ldr	r3, [pc, #220]	@ (8003244 <OS_TmrTask+0x138>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	61fb      	str	r3, [r7, #28]
        while ((elapsed !=          0u) &&
 800316a:	e018      	b.n	800319e <OS_TmrTask+0x92>
               (p_tmr   != (OS_TMR *)0)) {

            if (elapsed > p_tmr->Remain) {
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	429a      	cmp	r2, r3
 8003174:	d908      	bls.n	8003188 <OS_TmrTask+0x7c>
                elapsed           -= p_tmr->Remain;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	617b      	str	r3, [r7, #20]
                p_tmr->Remain      = 0u;
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	2200      	movs	r2, #0
 8003184:	615a      	str	r2, [r3, #20]
 8003186:	e007      	b.n	8003198 <OS_TmrTask+0x8c>
            } else {
                p_tmr->Remain     -= elapsed;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	1ad2      	subs	r2, r2, r3
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	615a      	str	r2, [r3, #20]
                elapsed            = 0u;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
            }

            p_tmr                  = p_tmr->NextPtr;
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	61fb      	str	r3, [r7, #28]
        while ((elapsed !=          0u) &&
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <OS_TmrTask+0x9e>
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e0      	bne.n	800316c <OS_TmrTask+0x60>
        }

                                                                /* Process timers that have expired.                    */
        p_tmr                      = OSTmrListPtr;
 80031aa:	4b26      	ldr	r3, [pc, #152]	@ (8003244 <OS_TmrTask+0x138>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	61fb      	str	r3, [r7, #28]

        while ((p_tmr         != (OS_TMR *)0) &&
 80031b0:	e03d      	b.n	800322e <OS_TmrTask+0x122>
               (p_tmr->Remain ==          0u)) {
            p_tmr->State           = OS_TMR_STATE_TIMEOUT;
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	2204      	movs	r2, #4
 80031b6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                                                                /* Execute callback function if available               */
            p_fnct                 = p_tmr->CallbackPtr;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	60bb      	str	r3, [r7, #8]
            if (p_fnct != (OS_TMR_CALLBACK_PTR)0u) {
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <OS_TmrTask+0xc6>
                (*p_fnct)(p_tmr, p_tmr->CallbackPtrArg);
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4611      	mov	r1, r2
 80031ce:	69f8      	ldr	r0, [r7, #28]
 80031d0:	4798      	blx	r3
            }

            if (p_tmr->State == OS_TMR_STATE_TIMEOUT) {
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d125      	bne.n	8003228 <OS_TmrTask+0x11c>
                OS_TmrUnlink(p_tmr, OSTmrTaskTickBase);
 80031dc:	4b1b      	ldr	r3, [pc, #108]	@ (800324c <OS_TmrTask+0x140>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4619      	mov	r1, r3
 80031e2:	69f8      	ldr	r0, [r7, #28]
 80031e4:	f7ff ff08 	bl	8002ff8 <OS_TmrUnlink>

                if (p_tmr->Opt == OS_OPT_TMR_PERIODIC) {
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	8c1b      	ldrh	r3, [r3, #32]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d10e      	bne.n	800320e <OS_TmrTask+0x102>
                    p_tmr->State   = OS_TMR_STATE_RUNNING;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                    p_tmr->Remain  = p_tmr->Period;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	69da      	ldr	r2, [r3, #28]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	615a      	str	r2, [r3, #20]
                    OS_TmrLink(p_tmr, OSTmrTaskTickBase);
 8003200:	4b12      	ldr	r3, [pc, #72]	@ (800324c <OS_TmrTask+0x140>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4619      	mov	r1, r3
 8003206:	69f8      	ldr	r0, [r7, #28]
 8003208:	f7ff fe66 	bl	8002ed8 <OS_TmrLink>
 800320c:	e00c      	b.n	8003228 <OS_TmrTask+0x11c>
                } else {
                    p_tmr->PrevPtr = (OS_TMR *)0;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	2200      	movs	r2, #0
 8003212:	611a      	str	r2, [r3, #16]
                    p_tmr->NextPtr = (OS_TMR *)0;
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]
                    p_tmr->Remain  = 0u;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	2200      	movs	r2, #0
 800321e:	615a      	str	r2, [r3, #20]
                    p_tmr->State   = OS_TMR_STATE_COMPLETED;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	2203      	movs	r2, #3
 8003224:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                }
            }

            p_tmr                  = OSTmrListPtr;
 8003228:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <OS_TmrTask+0x138>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	61fb      	str	r3, [r7, #28]
        while ((p_tmr         != (OS_TMR *)0) &&
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f43f af73 	beq.w	800311c <OS_TmrTask+0x10>
               (p_tmr->Remain ==          0u)) {
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	695b      	ldr	r3, [r3, #20]
        while ((p_tmr         != (OS_TMR *)0) &&
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0b9      	beq.n	80031b2 <OS_TmrTask+0xa6>
 800323e:	e76d      	b.n	800311c <OS_TmrTask+0x10>
            continue;
 8003240:	bf00      	nop
        if (OSTmrListPtr == (OS_TMR *)0) {
 8003242:	e76b      	b.n	800311c <OS_TmrTask+0x10>
 8003244:	2000157c 	.word	0x2000157c
 8003248:	20001574 	.word	0x20001574
 800324c:	20001650 	.word	0x20001650

08003250 <OS_TmrLock>:
* Note(s)    : 1) These functions are INTERNAL to uC/OS-III and your application MUST NOT call them.
************************************************************************************************************************
*/

static  void  OS_TmrLock (void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af02      	add	r7, sp, #8
    OS_ERR  err;


    OSMutexPend(&OSTmrMutex, 0u, OS_OPT_PEND_BLOCKING, (CPU_TS *)0, &err);
 8003256:	1dbb      	adds	r3, r7, #6
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	2300      	movs	r3, #0
 800325c:	2200      	movs	r2, #0
 800325e:	2100      	movs	r1, #0
 8003260:	4803      	ldr	r0, [pc, #12]	@ (8003270 <OS_TmrLock+0x20>)
 8003262:	f7fe fbd9 	bl	8001a18 <OSMutexPend>
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20001590 	.word	0x20001590

08003274 <OS_TmrCondCreate>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrCondCreate (void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 800327e:	2040      	movs	r0, #64	@ 0x40
 8003280:	f7fc ffa6 	bl	80001d0 <CPU_SR_Save>
 8003284:	6078      	str	r0, [r7, #4]
#if (OS_OBJ_TYPE_REQ > 0u)
    OSTmrCond.Type  = OS_OBJ_TYPE_COND;                         /* Mark the data structure as a condition variable.     */
 8003286:	4b08      	ldr	r3, [pc, #32]	@ (80032a8 <OS_TmrCondCreate+0x34>)
 8003288:	4a08      	ldr	r2, [pc, #32]	@ (80032ac <OS_TmrCondCreate+0x38>)
 800328a:	601a      	str	r2, [r3, #0]
#endif
    OSTmrCond.Mutex = &OSTmrMutex;                              /* Bind the timer mutex to the condition variable.      */
 800328c:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <OS_TmrCondCreate+0x34>)
 800328e:	4a08      	ldr	r2, [pc, #32]	@ (80032b0 <OS_TmrCondCreate+0x3c>)
 8003290:	60da      	str	r2, [r3, #12]
    OS_PendListInit(&OSTmrCond.PendList);                       /* Initialize the waiting list                          */
 8003292:	4808      	ldr	r0, [pc, #32]	@ (80032b4 <OS_TmrCondCreate+0x40>)
 8003294:	f7fd ffd0 	bl	8001238 <OS_PendListInit>
    CPU_CRITICAL_EXIT();
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7fc ffa7 	bl	80001ec <CPU_SR_Restore>
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20001580 	.word	0x20001580
 80032ac:	444e4f43 	.word	0x444e4f43
 80032b0:	20001590 	.word	0x20001590
 80032b4:	20001584 	.word	0x20001584

080032b8 <OS_TmrCondWait>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrCondWait (OS_TICK  timeout)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af02      	add	r7, sp, #8
 80032be:	6078      	str	r0, [r7, #4]
    OS_TCB        *p_tcb;
    OS_PEND_LIST  *p_pend_list;
    CPU_TS         ts;
    CPU_SR_ALLOC();
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]


    CPU_CRITICAL_ENTER();
 80032c4:	2040      	movs	r0, #64	@ 0x40
 80032c6:	f7fc ff83 	bl	80001d0 <CPU_SR_Save>
 80032ca:	6178      	str	r0, [r7, #20]
#if (OS_CFG_TS_EN > 0u)
    ts             = OS_TS_GET();                               /* Get timestamp                                        */
    OSTmrMutex.TS  = ts;
#else
    ts             = 0u;
 80032cc:	2300      	movs	r3, #0
 80032ce:	613b      	str	r3, [r7, #16]
#endif
                                                                /* Release mutex to other tasks.                        */
    OS_MutexGrpRemove(&OSTmrTaskTCB, &OSTmrMutex);
 80032d0:	493d      	ldr	r1, [pc, #244]	@ (80033c8 <OS_TmrCondWait+0x110>)
 80032d2:	483e      	ldr	r0, [pc, #248]	@ (80033cc <OS_TmrCondWait+0x114>)
 80032d4:	f7fe fc9e 	bl	8001c14 <OS_MutexGrpRemove>
    p_pend_list                    = &OSTmrMutex.PendList;
 80032d8:	4b3d      	ldr	r3, [pc, #244]	@ (80033d0 <OS_TmrCondWait+0x118>)
 80032da:	60fb      	str	r3, [r7, #12]

    if (OSTmrTaskTCB.Prio != OSTmrTaskTCB.BasePrio) {           /* Restore our original prio.                           */
 80032dc:	4b3b      	ldr	r3, [pc, #236]	@ (80033cc <OS_TmrCondWait+0x114>)
 80032de:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80032e2:	4b3a      	ldr	r3, [pc, #232]	@ (80033cc <OS_TmrCondWait+0x114>)
 80032e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d00a      	beq.n	8003302 <OS_TmrCondWait+0x4a>
        OS_TRACE_MUTEX_TASK_PRIO_DISINHERIT(&OSTmrTaskTCB, OSTmrTaskTCB.Prio);
        OSTmrTaskTCB.Prio          = OSTmrTaskTCB.BasePrio;
 80032ec:	4b37      	ldr	r3, [pc, #220]	@ (80033cc <OS_TmrCondWait+0x114>)
 80032ee:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80032f2:	4b36      	ldr	r3, [pc, #216]	@ (80033cc <OS_TmrCondWait+0x114>)
 80032f4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        OSPrioCur                  = OSTmrTaskTCB.BasePrio;
 80032f8:	4b34      	ldr	r3, [pc, #208]	@ (80033cc <OS_TmrCondWait+0x114>)
 80032fa:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80032fe:	4b35      	ldr	r3, [pc, #212]	@ (80033d4 <OS_TmrCondWait+0x11c>)
 8003300:	701a      	strb	r2, [r3, #0]
    }

    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* Any task waiting on mutex?                           */
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <OS_TmrCondWait+0x60>
        OSTmrMutex.OwnerTCBPtr     = (OS_TCB *)0;               /* No                                                   */
 800330a:	4b2f      	ldr	r3, [pc, #188]	@ (80033c8 <OS_TmrCondWait+0x110>)
 800330c:	2200      	movs	r2, #0
 800330e:	611a      	str	r2, [r3, #16]
        OSTmrMutex.OwnerNestingCtr =           0u;
 8003310:	4b2d      	ldr	r3, [pc, #180]	@ (80033c8 <OS_TmrCondWait+0x110>)
 8003312:	2200      	movs	r2, #0
 8003314:	751a      	strb	r2, [r3, #20]
 8003316:	e014      	b.n	8003342 <OS_TmrCondWait+0x8a>
    } else {
        p_tcb                      = p_pend_list->HeadPtr;      /* Yes, give mutex to new owner                         */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60bb      	str	r3, [r7, #8]
        OSTmrMutex.OwnerTCBPtr     = p_tcb;
 800331e:	4a2a      	ldr	r2, [pc, #168]	@ (80033c8 <OS_TmrCondWait+0x110>)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	6113      	str	r3, [r2, #16]
        OSTmrMutex.OwnerNestingCtr =           1u;
 8003324:	4b28      	ldr	r3, [pc, #160]	@ (80033c8 <OS_TmrCondWait+0x110>)
 8003326:	2201      	movs	r2, #1
 8003328:	751a      	strb	r2, [r3, #20]
        OS_MutexGrpAdd(p_tcb, &OSTmrMutex);
 800332a:	4927      	ldr	r1, [pc, #156]	@ (80033c8 <OS_TmrCondWait+0x110>)
 800332c:	68b8      	ldr	r0, [r7, #8]
 800332e:	f7fe fc5f 	bl	8001bf0 <OS_MutexGrpAdd>
                                                                /* Post to mutex                                        */
        OS_Post((OS_PEND_OBJ *)((void *)&OSTmrMutex),
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2300      	movs	r3, #0
 8003338:	2200      	movs	r2, #0
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	4822      	ldr	r0, [pc, #136]	@ (80033c8 <OS_TmrCondWait+0x110>)
 800333e:	f7fe f83d 	bl	80013bc <OS_Post>
                                (void *) 0,
                                         0u,
                                         ts);
    }

    OS_Pend((OS_PEND_OBJ *)((void *)&OSTmrCond),                /* Pend on the condition variable.                      */
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2203      	movs	r2, #3
 8003346:	4921      	ldr	r1, [pc, #132]	@ (80033cc <OS_TmrCondWait+0x114>)
 8003348:	4823      	ldr	r0, [pc, #140]	@ (80033d8 <OS_TmrCondWait+0x120>)
 800334a:	f7fd ff2f 	bl	80011ac <OS_Pend>
                                   &OSTmrTaskTCB,
                                    OS_TASK_PEND_ON_COND,
                                    timeout);
    CPU_CRITICAL_EXIT();
 800334e:	6978      	ldr	r0, [r7, #20]
 8003350:	f7fc ff4c 	bl	80001ec <CPU_SR_Restore>

    OSSched();
 8003354:	f7fd fe2c 	bl	8000fb0 <OSSched>

    CPU_CRITICAL_ENTER();                                       /* Either we timed out, or were signaled.               */
 8003358:	2040      	movs	r0, #64	@ 0x40
 800335a:	f7fc ff39 	bl	80001d0 <CPU_SR_Save>
 800335e:	6178      	str	r0, [r7, #20]

    if (OSTmrMutex.OwnerTCBPtr == (OS_TCB *)0) {                /* Can we grab the mutex?                               */
 8003360:	4b19      	ldr	r3, [pc, #100]	@ (80033c8 <OS_TmrCondWait+0x110>)
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10d      	bne.n	8003384 <OS_TmrCondWait+0xcc>
        OS_MutexGrpAdd(&OSTmrTaskTCB, &OSTmrMutex);             /* Yes, no-one else pending.                            */
 8003368:	4917      	ldr	r1, [pc, #92]	@ (80033c8 <OS_TmrCondWait+0x110>)
 800336a:	4818      	ldr	r0, [pc, #96]	@ (80033cc <OS_TmrCondWait+0x114>)
 800336c:	f7fe fc40 	bl	8001bf0 <OS_MutexGrpAdd>
        OSTmrMutex.OwnerTCBPtr     = &OSTmrTaskTCB;
 8003370:	4b15      	ldr	r3, [pc, #84]	@ (80033c8 <OS_TmrCondWait+0x110>)
 8003372:	4a16      	ldr	r2, [pc, #88]	@ (80033cc <OS_TmrCondWait+0x114>)
 8003374:	611a      	str	r2, [r3, #16]
        OSTmrMutex.OwnerNestingCtr = 1u;
 8003376:	4b14      	ldr	r3, [pc, #80]	@ (80033c8 <OS_TmrCondWait+0x110>)
 8003378:	2201      	movs	r2, #1
 800337a:	751a      	strb	r2, [r3, #20]
        CPU_CRITICAL_EXIT();
 800337c:	6978      	ldr	r0, [r7, #20]
 800337e:	f7fc ff35 	bl	80001ec <CPU_SR_Restore>
                                         0u);
        CPU_CRITICAL_EXIT();

        OSSched();
    }
}
 8003382:	e01c      	b.n	80033be <OS_TmrCondWait+0x106>
        p_tcb = OSTmrMutex.OwnerTCBPtr;                         /* No, we need to wait for it.                          */
 8003384:	4b10      	ldr	r3, [pc, #64]	@ (80033c8 <OS_TmrCondWait+0x110>)
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	60bb      	str	r3, [r7, #8]
        if (p_tcb->Prio > OSTmrTaskTCB.Prio) {                  /* See if mutex owner has a lower priority than TmrTask.*/
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8003390:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <OS_TmrCondWait+0x114>)
 8003392:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003396:	429a      	cmp	r2, r3
 8003398:	d906      	bls.n	80033a8 <OS_TmrCondWait+0xf0>
            OS_TaskChangePrio(p_tcb, OSTmrTaskTCB.Prio);
 800339a:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <OS_TmrCondWait+0x114>)
 800339c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80033a0:	4619      	mov	r1, r3
 80033a2:	68b8      	ldr	r0, [r7, #8]
 80033a4:	f7ff f9b6 	bl	8002714 <OS_TaskChangePrio>
        OS_Pend((OS_PEND_OBJ *)((void *)&OSTmrMutex),           /* Block TmrTask until it gets the Mutex.               */
 80033a8:	2300      	movs	r3, #0
 80033aa:	2204      	movs	r2, #4
 80033ac:	4907      	ldr	r1, [pc, #28]	@ (80033cc <OS_TmrCondWait+0x114>)
 80033ae:	4806      	ldr	r0, [pc, #24]	@ (80033c8 <OS_TmrCondWait+0x110>)
 80033b0:	f7fd fefc 	bl	80011ac <OS_Pend>
        CPU_CRITICAL_EXIT();
 80033b4:	6978      	ldr	r0, [r7, #20]
 80033b6:	f7fc ff19 	bl	80001ec <CPU_SR_Restore>
        OSSched();
 80033ba:	f7fd fdf9 	bl	8000fb0 <OSSched>
}
 80033be:	bf00      	nop
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20001590 	.word	0x20001590
 80033cc:	200015a8 	.word	0x200015a8
 80033d0:	20001594 	.word	0x20001594
 80033d4:	20001298 	.word	0x20001298
 80033d8:	20001580 	.word	0x20001580

080033dc <OS_TmrCondSignal>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrCondSignal (void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af02      	add	r7, sp, #8
    OS_PEND_LIST  *p_pend_list;
    CPU_TS         ts;
    CPU_SR_ALLOC();
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 80033e6:	2040      	movs	r0, #64	@ 0x40
 80033e8:	f7fc fef2 	bl	80001d0 <CPU_SR_Save>
 80033ec:	60f8      	str	r0, [r7, #12]
#if (OS_CFG_TS_EN > 0u)
    ts             = OS_TS_GET();                               /* Get timestamp                                        */
    OSTmrMutex.TS  = ts;
#else
    ts             = 0u;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]
#endif

    p_pend_list    = &OSTmrCond.PendList;
 80033f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003424 <OS_TmrCondSignal+0x48>)
 80033f4:	607b      	str	r3, [r7, #4]

    if (p_pend_list->HeadPtr == (OS_TCB *)0) {                  /* Timer task waiting on cond?                          */
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d103      	bne.n	8003406 <OS_TmrCondSignal+0x2a>
        CPU_CRITICAL_EXIT();
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7fc fef4 	bl	80001ec <CPU_SR_Restore>
        return;                                                 /* No, nothing to signal.                               */
 8003404:	e00a      	b.n	800341c <OS_TmrCondSignal+0x40>
    } else {
                                                                /* Yes, signal the timer task.                          */
        OS_Post((OS_PEND_OBJ *)((void *)&OSTmrCond),
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	2300      	movs	r3, #0
 800340c:	2200      	movs	r2, #0
 800340e:	4906      	ldr	r1, [pc, #24]	@ (8003428 <OS_TmrCondSignal+0x4c>)
 8003410:	4806      	ldr	r0, [pc, #24]	@ (800342c <OS_TmrCondSignal+0x50>)
 8003412:	f7fd ffd3 	bl	80013bc <OS_Post>
                                (void *) 0,
                                         0u,
                                         ts);
    }

    CPU_CRITICAL_EXIT();
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f7fc fee8 	bl	80001ec <CPU_SR_Restore>
}
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20001584 	.word	0x20001584
 8003428:	200015a8 	.word	0x200015a8
 800342c:	20001580 	.word	0x20001580

08003430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003434:	4b0e      	ldr	r3, [pc, #56]	@ (8003470 <HAL_Init+0x40>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a0d      	ldr	r2, [pc, #52]	@ (8003470 <HAL_Init+0x40>)
 800343a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800343e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003440:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <HAL_Init+0x40>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0a      	ldr	r2, [pc, #40]	@ (8003470 <HAL_Init+0x40>)
 8003446:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800344a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800344c:	4b08      	ldr	r3, [pc, #32]	@ (8003470 <HAL_Init+0x40>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a07      	ldr	r2, [pc, #28]	@ (8003470 <HAL_Init+0x40>)
 8003452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003458:	2003      	movs	r0, #3
 800345a:	f000 f8e5 	bl	8003628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800345e:	200f      	movs	r0, #15
 8003460:	f000 f808 	bl	8003474 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003464:	f7fd f9e2 	bl	800082c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40023c00 	.word	0x40023c00

08003474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800347c:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <HAL_InitTick+0x30>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a09      	ldr	r2, [pc, #36]	@ (80034a8 <HAL_InitTick+0x34>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	4618      	mov	r0, r3
 800348a:	f000 f8f4 	bl	8003676 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800348e:	2200      	movs	r2, #0
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	f04f 30ff 	mov.w	r0, #4294967295
 8003496:	f000 f8d2 	bl	800363e <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20000010 	.word	0x20000010
 80034a8:	10624dd3 	.word	0x10624dd3

080034ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return uwTick;
 80034b0:	4b03      	ldr	r3, [pc, #12]	@ (80034c0 <HAL_GetTick+0x14>)
 80034b2:	681b      	ldr	r3, [r3, #0]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20001660 	.word	0x20001660

080034c4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003508 <NVIC_SetPriorityGrouping+0x44>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034e0:	4013      	ands	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034f6:	4a04      	ldr	r2, [pc, #16]	@ (8003508 <NVIC_SetPriorityGrouping+0x44>)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	60d3      	str	r3, [r2, #12]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003510:	4b04      	ldr	r3, [pc, #16]	@ (8003524 <NVIC_GetPriorityGrouping+0x18>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	0a1b      	lsrs	r3, r3, #8
 8003516:	f003 0307 	and.w	r3, r3, #7
}
 800351a:	4618      	mov	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	6039      	str	r1, [r7, #0]
 8003532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003538:	2b00      	cmp	r3, #0
 800353a:	da0b      	bge.n	8003554 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	b2da      	uxtb	r2, r3
 8003540:	490c      	ldr	r1, [pc, #48]	@ (8003574 <NVIC_SetPriority+0x4c>)
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	3b04      	subs	r3, #4
 800354a:	0112      	lsls	r2, r2, #4
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	440b      	add	r3, r1
 8003550:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003552:	e009      	b.n	8003568 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	b2da      	uxtb	r2, r3
 8003558:	4907      	ldr	r1, [pc, #28]	@ (8003578 <NVIC_SetPriority+0x50>)
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	0112      	lsls	r2, r2, #4
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	440b      	add	r3, r1
 8003564:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000ed00 	.word	0xe000ed00
 8003578:	e000e100 	.word	0xe000e100

0800357c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800357c:	b480      	push	{r7}
 800357e:	b089      	sub	sp, #36	@ 0x24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f1c3 0307 	rsb	r3, r3, #7
 8003596:	2b04      	cmp	r3, #4
 8003598:	bf28      	it	cs
 800359a:	2304      	movcs	r3, #4
 800359c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	3304      	adds	r3, #4
 80035a2:	2b06      	cmp	r3, #6
 80035a4:	d902      	bls.n	80035ac <NVIC_EncodePriority+0x30>
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3b03      	subs	r3, #3
 80035aa:	e000      	b.n	80035ae <NVIC_EncodePriority+0x32>
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b0:	f04f 32ff 	mov.w	r2, #4294967295
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43da      	mvns	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	401a      	ands	r2, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c4:	f04f 31ff 	mov.w	r1, #4294967295
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	43d9      	mvns	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d4:	4313      	orrs	r3, r2
         );
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3724      	adds	r7, #36	@ 0x24
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035f4:	d301      	bcc.n	80035fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035f6:	2301      	movs	r3, #1
 80035f8:	e00f      	b.n	800361a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003624 <SysTick_Config+0x40>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003602:	210f      	movs	r1, #15
 8003604:	f04f 30ff 	mov.w	r0, #4294967295
 8003608:	f7ff ff8e 	bl	8003528 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800360c:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <SysTick_Config+0x40>)
 800360e:	2200      	movs	r2, #0
 8003610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003612:	4b04      	ldr	r3, [pc, #16]	@ (8003624 <SysTick_Config+0x40>)
 8003614:	2207      	movs	r2, #7
 8003616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	e000e010 	.word	0xe000e010

08003628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff ff47 	bl	80034c4 <NVIC_SetPriorityGrouping>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800363e:	b580      	push	{r7, lr}
 8003640:	b086      	sub	sp, #24
 8003642:	af00      	add	r7, sp, #0
 8003644:	4603      	mov	r3, r0
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003650:	f7ff ff5c 	bl	800350c <NVIC_GetPriorityGrouping>
 8003654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	6978      	ldr	r0, [r7, #20]
 800365c:	f7ff ff8e 	bl	800357c <NVIC_EncodePriority>
 8003660:	4602      	mov	r2, r0
 8003662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff ff5d 	bl	8003528 <NVIC_SetPriority>
}
 800366e:	bf00      	nop
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b082      	sub	sp, #8
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff ffb0 	bl	80035e4 <SysTick_Config>
 8003684:	4603      	mov	r3, r0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e014      	b.n	80036ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	791b      	ldrb	r3, [r3, #4]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d105      	bne.n	80036b6 <HAL_DAC_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	715a      	strb	r2, [r3, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7fd f8e3 	bl	800087c <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2202      	movs	r2, #2
 80036ba:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b085      	sub	sp, #20
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	2300      	movs	r3, #0
 80036e2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	795b      	ldrb	r3, [r3, #5]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_DAC_Start+0x1e>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e050      	b.n	8003792 <HAL_DAC_Start+0xc0>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2202      	movs	r2, #2
 80036fa:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6819      	ldr	r1, [r3, #0]
 8003702:	2201      	movs	r2, #1
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	409a      	lsls	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d11a      	bne.n	800374c <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800372c:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b04      	cmp	r3, #4
 8003732:	d127      	bne.n	8003784 <HAL_DAC_Start+0xb2>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b38      	cmp	r3, #56	@ 0x38
 8003738:	d124      	bne.n	8003784 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	e01b      	b.n	8003784 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003756:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8003762:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800376a:	d10b      	bne.n	8003784 <HAL_DAC_Start+0xb2>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 8003772:	d107      	bne.n	8003784 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0202 	orr.w	r2, r2, #2
 8003782:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800379e:	b480      	push	{r7}
 80037a0:	b087      	sub	sp, #28
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	2300      	movs	r3, #0
 80037b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	795b      	ldrb	r3, [r3, #5]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_DAC_ConfigChannel+0x20>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e036      	b.n	800382c <HAL_DAC_ConfigChannel+0x8e>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2202      	movs	r2, #2
 80037c8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80037d2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4013      	ands	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6819      	ldr	r1, [r3, #0]
 800380c:	22c0      	movs	r2, #192	@ 0xc0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43da      	mvns	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	400a      	ands	r2, r1
 800381c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d105      	bne.n	8003862 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4413      	add	r3, r2
 800385c:	3308      	adds	r3, #8
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e004      	b.n	800386c <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4413      	add	r3, r2
 8003868:	3314      	adds	r3, #20
 800386a:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	461a      	mov	r2, r3
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
	...

08003884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003884:	b480      	push	{r7}
 8003886:	b089      	sub	sp, #36	@ 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003896:	2300      	movs	r3, #0
 8003898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	e16b      	b.n	8003b78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80038a0:	2201      	movs	r2, #1
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	f040 815a 	bne.w	8003b72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d003      	beq.n	80038ce <HAL_GPIO_Init+0x4a>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b12      	cmp	r3, #18
 80038cc:	d123      	bne.n	8003916 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	08da      	lsrs	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3208      	adds	r2, #8
 80038d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	220f      	movs	r2, #15
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4013      	ands	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	08da      	lsrs	r2, r3, #3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3208      	adds	r2, #8
 8003910:	69b9      	ldr	r1, [r7, #24]
 8003912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	2203      	movs	r2, #3
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43db      	mvns	r3, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4013      	ands	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 0203 	and.w	r2, r3, #3
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d00b      	beq.n	800396a <HAL_GPIO_Init+0xe6>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d007      	beq.n	800396a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800395e:	2b11      	cmp	r3, #17
 8003960:	d003      	beq.n	800396a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b12      	cmp	r3, #18
 8003968:	d130      	bne.n	80039cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	2203      	movs	r2, #3
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4013      	ands	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4313      	orrs	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039a0:	2201      	movs	r2, #1
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 0201 	and.w	r2, r3, #1
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	2203      	movs	r2, #3
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80b4 	beq.w	8003b72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	4b60      	ldr	r3, [pc, #384]	@ (8003b90 <HAL_GPIO_Init+0x30c>)
 8003a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a12:	4a5f      	ldr	r2, [pc, #380]	@ (8003b90 <HAL_GPIO_Init+0x30c>)
 8003a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a1a:	4b5d      	ldr	r3, [pc, #372]	@ (8003b90 <HAL_GPIO_Init+0x30c>)
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a26:	4a5b      	ldr	r2, [pc, #364]	@ (8003b94 <HAL_GPIO_Init+0x310>)
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	089b      	lsrs	r3, r3, #2
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	220f      	movs	r2, #15
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43db      	mvns	r3, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4013      	ands	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a52      	ldr	r2, [pc, #328]	@ (8003b98 <HAL_GPIO_Init+0x314>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d02b      	beq.n	8003aaa <HAL_GPIO_Init+0x226>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a51      	ldr	r2, [pc, #324]	@ (8003b9c <HAL_GPIO_Init+0x318>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d025      	beq.n	8003aa6 <HAL_GPIO_Init+0x222>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a50      	ldr	r2, [pc, #320]	@ (8003ba0 <HAL_GPIO_Init+0x31c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01f      	beq.n	8003aa2 <HAL_GPIO_Init+0x21e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a4f      	ldr	r2, [pc, #316]	@ (8003ba4 <HAL_GPIO_Init+0x320>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d019      	beq.n	8003a9e <HAL_GPIO_Init+0x21a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a4e      	ldr	r2, [pc, #312]	@ (8003ba8 <HAL_GPIO_Init+0x324>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d013      	beq.n	8003a9a <HAL_GPIO_Init+0x216>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a4d      	ldr	r2, [pc, #308]	@ (8003bac <HAL_GPIO_Init+0x328>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00d      	beq.n	8003a96 <HAL_GPIO_Init+0x212>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a4c      	ldr	r2, [pc, #304]	@ (8003bb0 <HAL_GPIO_Init+0x32c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <HAL_GPIO_Init+0x20e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a4b      	ldr	r2, [pc, #300]	@ (8003bb4 <HAL_GPIO_Init+0x330>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d101      	bne.n	8003a8e <HAL_GPIO_Init+0x20a>
 8003a8a:	2307      	movs	r3, #7
 8003a8c:	e00e      	b.n	8003aac <HAL_GPIO_Init+0x228>
 8003a8e:	2308      	movs	r3, #8
 8003a90:	e00c      	b.n	8003aac <HAL_GPIO_Init+0x228>
 8003a92:	2306      	movs	r3, #6
 8003a94:	e00a      	b.n	8003aac <HAL_GPIO_Init+0x228>
 8003a96:	2305      	movs	r3, #5
 8003a98:	e008      	b.n	8003aac <HAL_GPIO_Init+0x228>
 8003a9a:	2304      	movs	r3, #4
 8003a9c:	e006      	b.n	8003aac <HAL_GPIO_Init+0x228>
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e004      	b.n	8003aac <HAL_GPIO_Init+0x228>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e002      	b.n	8003aac <HAL_GPIO_Init+0x228>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <HAL_GPIO_Init+0x228>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	69fa      	ldr	r2, [r7, #28]
 8003aae:	f002 0203 	and.w	r2, r2, #3
 8003ab2:	0092      	lsls	r2, r2, #2
 8003ab4:	4093      	lsls	r3, r2
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003abc:	4935      	ldr	r1, [pc, #212]	@ (8003b94 <HAL_GPIO_Init+0x310>)
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	089b      	lsrs	r3, r3, #2
 8003ac2:	3302      	adds	r3, #2
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aca:	4b3b      	ldr	r3, [pc, #236]	@ (8003bb8 <HAL_GPIO_Init+0x334>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aee:	4a32      	ldr	r2, [pc, #200]	@ (8003bb8 <HAL_GPIO_Init+0x334>)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003af4:	4b30      	ldr	r3, [pc, #192]	@ (8003bb8 <HAL_GPIO_Init+0x334>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b18:	4a27      	ldr	r2, [pc, #156]	@ (8003bb8 <HAL_GPIO_Init+0x334>)
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b1e:	4b26      	ldr	r3, [pc, #152]	@ (8003bb8 <HAL_GPIO_Init+0x334>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	43db      	mvns	r3, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b42:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb8 <HAL_GPIO_Init+0x334>)
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b48:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb8 <HAL_GPIO_Init+0x334>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	43db      	mvns	r3, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4013      	ands	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b6c:	4a12      	ldr	r2, [pc, #72]	@ (8003bb8 <HAL_GPIO_Init+0x334>)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	3301      	adds	r3, #1
 8003b76:	61fb      	str	r3, [r7, #28]
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	2b0f      	cmp	r3, #15
 8003b7c:	f67f ae90 	bls.w	80038a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	3724      	adds	r7, #36	@ 0x24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800
 8003b94:	40013800 	.word	0x40013800
 8003b98:	40020000 	.word	0x40020000
 8003b9c:	40020400 	.word	0x40020400
 8003ba0:	40020800 	.word	0x40020800
 8003ba4:	40020c00 	.word	0x40020c00
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	40021400 	.word	0x40021400
 8003bb0:	40021800 	.word	0x40021800
 8003bb4:	40021c00 	.word	0x40021c00
 8003bb8:	40013c00 	.word	0x40013c00

08003bbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	887b      	ldrh	r3, [r7, #2]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
 8003bd8:	e001      	b.n	8003bde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	807b      	strh	r3, [r7, #2]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bfc:	787b      	ldrb	r3, [r7, #1]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c02:	887a      	ldrh	r2, [r7, #2]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c08:	e003      	b.n	8003c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c0a:	887b      	ldrh	r3, [r7, #2]
 8003c0c:	041a      	lsls	r2, r3, #16
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	619a      	str	r2, [r3, #24]
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	460b      	mov	r3, r1
 8003c28:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	887b      	ldrh	r3, [r7, #2]
 8003c30:	405a      	eors	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	615a      	str	r2, [r3, #20]
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08e      	sub	sp, #56	@ 0x38
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 uint32_t tickstart = 0U;  
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d050      	beq.n	8003cfe <HAL_RCC_OscConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c5c:	4b96      	ldr	r3, [pc, #600]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 030c 	and.w	r3, r3, #12
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d00c      	beq.n	8003c82 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c68:	4b93      	ldr	r3, [pc, #588]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d112      	bne.n	8003c9a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c74:	4b90      	ldr	r3, [pc, #576]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c80:	d10b      	bne.n	8003c9a <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c82:	4b8d      	ldr	r3, [pc, #564]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d036      	beq.n	8003cfc <HAL_RCC_OscConfig+0xb8>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d132      	bne.n	8003cfc <HAL_RCC_OscConfig+0xb8>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e1de      	b.n	8004058 <HAL_RCC_OscConfig+0x414>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	4b87      	ldr	r3, [pc, #540]	@ (8003ebc <HAL_RCC_OscConfig+0x278>)
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x90>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7ff fbfe 	bl	80034ac <HAL_GetTick>
 8003cb0:	6378      	str	r0, [r7, #52]	@ 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x82>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7ff fbfa 	bl	80034ac <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	@ 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x82>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e1c8      	b.n	8004058 <HAL_RCC_OscConfig+0x414>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b7c      	ldr	r3, [pc, #496]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x70>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0xba>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7ff fbea 	bl	80034ac <HAL_GetTick>
 8003cd8:	6378      	str	r0, [r7, #52]	@ 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0xaa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7ff fbe6 	bl	80034ac <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	@ 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e1b4      	b.n	8004058 <HAL_RCC_OscConfig+0x414>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cee:	4b72      	ldr	r3, [pc, #456]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x98>
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d077      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1b6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d0a:	4b6b      	ldr	r3, [pc, #428]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d16:	4b68      	ldr	r3, [pc, #416]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d126      	bne.n	8003d70 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d22:	4b65      	ldr	r3, [pc, #404]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d120      	bne.n	8003d70 <HAL_RCC_OscConfig+0x12c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	4b62      	ldr	r3, [pc, #392]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_RCC_OscConfig+0x102>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e188      	b.n	8004058 <HAL_RCC_OscConfig+0x414>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d46:	4b5c      	ldr	r3, [pc, #368]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6919      	ldr	r1, [r3, #16]
 8003d52:	23f8      	movs	r3, #248	@ 0xf8
 8003d54:	633b      	str	r3, [r7, #48]	@ 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d58:	fa93 f3a3 	rbit	r3, r3
 8003d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d60:	fab3 f383 	clz	r3, r3
 8003d64:	fa01 f303 	lsl.w	r3, r1, r3
 8003d68:	4953      	ldr	r1, [pc, #332]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6e:	e044      	b.n	8003dfa <HAL_RCC_OscConfig+0x1b6>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d02a      	beq.n	8003dce <HAL_RCC_OscConfig+0x18a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d78:	4b51      	ldr	r3, [pc, #324]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7e:	f7ff fb95 	bl	80034ac <HAL_GetTick>
 8003d82:	6378      	str	r0, [r7, #52]	@ 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d86:	f7ff fb91 	bl	80034ac <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e15f      	b.n	8004058 <HAL_RCC_OscConfig+0x414>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d98:	4b47      	ldr	r3, [pc, #284]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x142>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da4:	4b44      	ldr	r3, [pc, #272]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6919      	ldr	r1, [r3, #16]
 8003db0:	23f8      	movs	r3, #248	@ 0xf8
 8003db2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db6:	fa93 f3a3 	rbit	r3, r3
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbe:	fab3 f383 	clz	r3, r3
 8003dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc6:	493c      	ldr	r1, [pc, #240]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	600b      	str	r3, [r1, #0]
 8003dcc:	e015      	b.n	8003dfa <HAL_RCC_OscConfig+0x1b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dce:	4b3c      	ldr	r3, [pc, #240]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7ff fb6a 	bl	80034ac <HAL_GetTick>
 8003dd8:	6378      	str	r0, [r7, #52]	@ 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x1aa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ddc:	f7ff fb66 	bl	80034ac <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e134      	b.n	8004058 <HAL_RCC_OscConfig+0x414>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dee:	4b32      	ldr	r3, [pc, #200]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x198>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d030      	beq.n	8003e68 <HAL_RCC_OscConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d016      	beq.n	8003e3c <HAL_RCC_OscConfig+0x1f8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ec4 <HAL_RCC_OscConfig+0x280>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e14:	f7ff fb4a 	bl	80034ac <HAL_GetTick>
 8003e18:	6378      	str	r0, [r7, #52]	@ 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e1c:	f7ff fb46 	bl	80034ac <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x1ea>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e114      	b.n	8004058 <HAL_RCC_OscConfig+0x414>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2e:	4b22      	ldr	r3, [pc, #136]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x1d8>
 8003e3a:	e015      	b.n	8003e68 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e3c:	4b21      	ldr	r3, [pc, #132]	@ (8003ec4 <HAL_RCC_OscConfig+0x280>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e42:	f7ff fb33 	bl	80034ac <HAL_GetTick>
 8003e46:	6378      	str	r0, [r7, #52]	@ 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x218>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e4a:	f7ff fb2f 	bl	80034ac <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x218>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e0fd      	b.n	8004058 <HAL_RCC_OscConfig+0x414>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e5c:	4b16      	ldr	r3, [pc, #88]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f0      	bne.n	8003e4a <HAL_RCC_OscConfig+0x206>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d065      	beq.n	8003f40 <HAL_RCC_OscConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e74:	2300      	movs	r3, #0
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	4b0f      	ldr	r3, [pc, #60]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	4a0e      	ldr	r2, [pc, #56]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e82:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e84:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb8 <HAL_RCC_OscConfig+0x274>)
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e90:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec8 <HAL_RCC_OscConfig+0x284>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0c      	ldr	r2, [pc, #48]	@ (8003ec8 <HAL_RCC_OscConfig+0x284>)
 8003e96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e9a:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8003e9c:	f7ff fb06 	bl	80034ac <HAL_GetTick>
 8003ea0:	6378      	str	r0, [r7, #52]	@ 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ea2:	e013      	b.n	8003ecc <HAL_RCC_OscConfig+0x288>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ea4:	f7ff fb02 	bl	80034ac <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d90c      	bls.n	8003ecc <HAL_RCC_OscConfig+0x288>
      {
        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e0d0      	b.n	8004058 <HAL_RCC_OscConfig+0x414>
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	40023802 	.word	0x40023802
 8003ec0:	42470000 	.word	0x42470000
 8003ec4:	42470e80 	.word	0x42470e80
 8003ec8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ecc:	4b64      	ldr	r3, [pc, #400]	@ (8004060 <HAL_RCC_OscConfig+0x41c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0e5      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x260>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	4b61      	ldr	r3, [pc, #388]	@ (8004064 <HAL_RCC_OscConfig+0x420>)
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d015      	beq.n	8003f16 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eea:	f7ff fadf 	bl	80034ac <HAL_GetTick>
 8003eee:	6378      	str	r0, [r7, #52]	@ 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef0:	e00a      	b.n	8003f08 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef2:	f7ff fadb 	bl	80034ac <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x2c4>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e0a7      	b.n	8004058 <HAL_RCC_OscConfig+0x414>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f08:	4b57      	ldr	r3, [pc, #348]	@ (8004068 <HAL_RCC_OscConfig+0x424>)
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0ee      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x2ae>
 8003f14:	e014      	b.n	8003f40 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f16:	f7ff fac9 	bl	80034ac <HAL_GetTick>
 8003f1a:	6378      	str	r0, [r7, #52]	@ 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f1c:	e00a      	b.n	8003f34 <HAL_RCC_OscConfig+0x2f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f1e:	f7ff fac5 	bl	80034ac <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e091      	b.n	8004058 <HAL_RCC_OscConfig+0x414>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f34:	4b4c      	ldr	r3, [pc, #304]	@ (8004068 <HAL_RCC_OscConfig+0x424>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1ee      	bne.n	8003f1e <HAL_RCC_OscConfig+0x2da>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8086 	beq.w	8004056 <HAL_RCC_OscConfig+0x412>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f4a:	4b47      	ldr	r3, [pc, #284]	@ (8004068 <HAL_RCC_OscConfig+0x424>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d07d      	beq.n	8004052 <HAL_RCC_OscConfig+0x40e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d162      	bne.n	8004024 <HAL_RCC_OscConfig+0x3e0>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5e:	4b43      	ldr	r3, [pc, #268]	@ (800406c <HAL_RCC_OscConfig+0x428>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f64:	f7ff faa2 	bl	80034ac <HAL_GetTick>
 8003f68:	6378      	str	r0, [r7, #52]	@ 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f6c:	f7ff fa9e 	bl	80034ac <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e06c      	b.n	8004058 <HAL_RCC_OscConfig+0x414>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8004068 <HAL_RCC_OscConfig+0x424>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x328>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69da      	ldr	r2, [r3, #28]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	fa93 f3a3 	rbit	r3, r3
 8003fa4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	fab3 f383 	clz	r3, r3
 8003fac:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb6:	085b      	lsrs	r3, r3, #1
 8003fb8:	1e59      	subs	r1, r3, #1
 8003fba:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	fa93 f3a3 	rbit	r3, r3
 8003fc6:	617b      	str	r3, [r7, #20]
  return(result);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	fab3 f383 	clz	r3, r3
 8003fce:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003fd8:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 8003fdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	fa93 f3a3 	rbit	r3, r3
 8003fe4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	fab3 f383 	clz	r3, r3
 8003fec:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff0:	491d      	ldr	r1, [pc, #116]	@ (8004068 <HAL_RCC_OscConfig+0x424>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800406c <HAL_RCC_OscConfig+0x428>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7ff fa56 	bl	80034ac <HAL_GetTick>
 8004000:	6378      	str	r0, [r7, #52]	@ 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004004:	f7ff fa52 	bl	80034ac <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e020      	b.n	8004058 <HAL_RCC_OscConfig+0x414>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004016:	4b14      	ldr	r3, [pc, #80]	@ (8004068 <HAL_RCC_OscConfig+0x424>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0x3c0>
 8004022:	e018      	b.n	8004056 <HAL_RCC_OscConfig+0x412>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004024:	4b11      	ldr	r3, [pc, #68]	@ (800406c <HAL_RCC_OscConfig+0x428>)
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402a:	f7ff fa3f 	bl	80034ac <HAL_GetTick>
 800402e:	6378      	str	r0, [r7, #52]	@ 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004032:	f7ff fa3b 	bl	80034ac <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e009      	b.n	8004058 <HAL_RCC_OscConfig+0x414>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004044:	4b08      	ldr	r3, [pc, #32]	@ (8004068 <HAL_RCC_OscConfig+0x424>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f0      	bne.n	8004032 <HAL_RCC_OscConfig+0x3ee>
 8004050:	e001      	b.n	8004056 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <HAL_RCC_OscConfig+0x414>
    }
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3738      	adds	r7, #56	@ 0x38
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40007000 	.word	0x40007000
 8004064:	40023870 	.word	0x40023870
 8004068:	40023800 	.word	0x40023800
 800406c:	42470060 	.word	0x42470060

08004070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800407e:	4b81      	ldr	r3, [pc, #516]	@ (8004284 <HAL_RCC_ClockConfig+0x214>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d90c      	bls.n	80040a6 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408c:	4b7d      	ldr	r3, [pc, #500]	@ (8004284 <HAL_RCC_ClockConfig+0x214>)
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004094:	4b7b      	ldr	r3, [pc, #492]	@ (8004284 <HAL_RCC_ClockConfig+0x214>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d001      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e0ea      	b.n	800427c <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d008      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b2:	4b75      	ldr	r3, [pc, #468]	@ (8004288 <HAL_RCC_ClockConfig+0x218>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	4972      	ldr	r1, [pc, #456]	@ (8004288 <HAL_RCC_ClockConfig+0x218>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8086 	beq.w	80041de <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d107      	bne.n	80040ea <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040da:	4b6b      	ldr	r3, [pc, #428]	@ (8004288 <HAL_RCC_ClockConfig+0x218>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d119      	bne.n	800411a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e0c8      	b.n	800427c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d003      	beq.n	80040fa <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d107      	bne.n	800410a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040fa:	4b63      	ldr	r3, [pc, #396]	@ (8004288 <HAL_RCC_ClockConfig+0x218>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e0b8      	b.n	800427c <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800410a:	4b5f      	ldr	r3, [pc, #380]	@ (8004288 <HAL_RCC_ClockConfig+0x218>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e0b0      	b.n	800427c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800411a:	4b5b      	ldr	r3, [pc, #364]	@ (8004288 <HAL_RCC_ClockConfig+0x218>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f023 0203 	bic.w	r2, r3, #3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	4958      	ldr	r1, [pc, #352]	@ (8004288 <HAL_RCC_ClockConfig+0x218>)
 8004128:	4313      	orrs	r3, r2
 800412a:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800412c:	f7ff f9be 	bl	80034ac <HAL_GetTick>
 8004130:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d112      	bne.n	8004160 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800413a:	e00a      	b.n	8004152 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800413c:	f7ff f9b6 	bl	80034ac <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e094      	b.n	800427c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004152:	4b4d      	ldr	r3, [pc, #308]	@ (8004288 <HAL_RCC_ClockConfig+0x218>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b04      	cmp	r3, #4
 800415c:	d1ee      	bne.n	800413c <HAL_RCC_ClockConfig+0xcc>
 800415e:	e03e      	b.n	80041de <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d112      	bne.n	800418e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004168:	e00a      	b.n	8004180 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416a:	f7ff f99f 	bl	80034ac <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004178:	4293      	cmp	r3, r2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e07d      	b.n	800427c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004180:	4b41      	ldr	r3, [pc, #260]	@ (8004288 <HAL_RCC_ClockConfig+0x218>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 030c 	and.w	r3, r3, #12
 8004188:	2b08      	cmp	r3, #8
 800418a:	d1ee      	bne.n	800416a <HAL_RCC_ClockConfig+0xfa>
 800418c:	e027      	b.n	80041de <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b03      	cmp	r3, #3
 8004194:	d11d      	bne.n	80041d2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004196:	e00a      	b.n	80041ae <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004198:	f7ff f988 	bl	80034ac <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e066      	b.n	800427c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80041ae:	4b36      	ldr	r3, [pc, #216]	@ (8004288 <HAL_RCC_ClockConfig+0x218>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	2b0c      	cmp	r3, #12
 80041b8:	d1ee      	bne.n	8004198 <HAL_RCC_ClockConfig+0x128>
 80041ba:	e010      	b.n	80041de <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041bc:	f7ff f976 	bl	80034ac <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e054      	b.n	800427c <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041d2:	4b2d      	ldr	r3, [pc, #180]	@ (8004288 <HAL_RCC_ClockConfig+0x218>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1ee      	bne.n	80041bc <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80041de:	4b29      	ldr	r3, [pc, #164]	@ (8004284 <HAL_RCC_ClockConfig+0x214>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d20c      	bcs.n	8004206 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ec:	4b25      	ldr	r3, [pc, #148]	@ (8004284 <HAL_RCC_ClockConfig+0x214>)
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041f4:	4b23      	ldr	r3, [pc, #140]	@ (8004284 <HAL_RCC_ClockConfig+0x214>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d001      	beq.n	8004206 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e03a      	b.n	800427c <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004212:	4b1d      	ldr	r3, [pc, #116]	@ (8004288 <HAL_RCC_ClockConfig+0x218>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	491a      	ldr	r1, [pc, #104]	@ (8004288 <HAL_RCC_ClockConfig+0x218>)
 8004220:	4313      	orrs	r3, r2
 8004222:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004230:	4b15      	ldr	r3, [pc, #84]	@ (8004288 <HAL_RCC_ClockConfig+0x218>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	4912      	ldr	r1, [pc, #72]	@ (8004288 <HAL_RCC_ClockConfig+0x218>)
 8004240:	4313      	orrs	r3, r2
 8004242:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004244:	f000 f826 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8004248:	4601      	mov	r1, r0
 800424a:	4b0f      	ldr	r3, [pc, #60]	@ (8004288 <HAL_RCC_ClockConfig+0x218>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004252:	23f0      	movs	r3, #240	@ 0xf0
 8004254:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	fa93 f3a3 	rbit	r3, r3
 800425c:	60fb      	str	r3, [r7, #12]
  return(result);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	fab3 f383 	clz	r3, r3
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
 8004268:	4a08      	ldr	r2, [pc, #32]	@ (800428c <HAL_RCC_ClockConfig+0x21c>)
 800426a:	5cd3      	ldrb	r3, [r2, r3]
 800426c:	fa21 f303 	lsr.w	r3, r1, r3
 8004270:	4a07      	ldr	r2, [pc, #28]	@ (8004290 <HAL_RCC_ClockConfig+0x220>)
 8004272:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004274:	200f      	movs	r0, #15
 8004276:	f7ff f8fd 	bl	8003474 <HAL_InitTick>
  
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40023c00 	.word	0x40023c00
 8004288:	40023800 	.word	0x40023800
 800428c:	0800454c 	.word	0x0800454c
 8004290:	20000010 	.word	0x20000010

08004294 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004294:	b480      	push	{r7}
 8004296:	b08b      	sub	sp, #44	@ 0x2c
 8004298:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	2300      	movs	r3, #0
 80042a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a2:	2300      	movs	r3, #0
 80042a4:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042aa:	4b38      	ldr	r3, [pc, #224]	@ (800438c <HAL_RCC_GetSysClockFreq+0xf8>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d00c      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x3c>
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d85d      	bhi.n	8004376 <HAL_RCC_GetSysClockFreq+0xe2>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x30>
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d003      	beq.n	80042ca <HAL_RCC_GetSysClockFreq+0x36>
 80042c2:	e058      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042c4:	4b32      	ldr	r3, [pc, #200]	@ (8004390 <HAL_RCC_GetSysClockFreq+0xfc>)
 80042c6:	623b      	str	r3, [r7, #32]
       break;
 80042c8:	e058      	b.n	800437c <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ca:	4b32      	ldr	r3, [pc, #200]	@ (8004394 <HAL_RCC_GetSysClockFreq+0x100>)
 80042cc:	623b      	str	r3, [r7, #32]
      break;
 80042ce:	e055      	b.n	800437c <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d0:	4b2e      	ldr	r3, [pc, #184]	@ (800438c <HAL_RCC_GetSysClockFreq+0xf8>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042d8:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042da:	4b2c      	ldr	r3, [pc, #176]	@ (800438c <HAL_RCC_GetSysClockFreq+0xf8>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d017      	beq.n	8004316 <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80042e6:	4a2b      	ldr	r2, [pc, #172]	@ (8004394 <HAL_RCC_GetSysClockFreq+0x100>)
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ee:	4b27      	ldr	r3, [pc, #156]	@ (800438c <HAL_RCC_GetSysClockFreq+0xf8>)
 80042f0:	6859      	ldr	r1, [r3, #4]
 80042f2:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042f6:	400b      	ands	r3, r1
 80042f8:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 80042fc:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fe:	6979      	ldr	r1, [r7, #20]
 8004300:	fa91 f1a1 	rbit	r1, r1
 8004304:	6139      	str	r1, [r7, #16]
  return(result);
 8004306:	6939      	ldr	r1, [r7, #16]
 8004308:	fab1 f181 	clz	r1, r1
 800430c:	40cb      	lsrs	r3, r1
 800430e:	fb02 f303 	mul.w	r3, r2, r3
 8004312:	627b      	str	r3, [r7, #36]	@ 0x24
 8004314:	e016      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8004316:	4a1e      	ldr	r2, [pc, #120]	@ (8004390 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	fbb2 f2f3 	udiv	r2, r2, r3
 800431e:	4b1b      	ldr	r3, [pc, #108]	@ (800438c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004320:	6859      	ldr	r1, [r3, #4]
 8004322:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004326:	400b      	ands	r3, r1
 8004328:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 800432c:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432e:	68f9      	ldr	r1, [r7, #12]
 8004330:	fa91 f1a1 	rbit	r1, r1
 8004334:	60b9      	str	r1, [r7, #8]
  return(result);
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	fab1 f181 	clz	r1, r1
 800433c:	40cb      	lsrs	r3, r1
 800433e:	fb02 f303 	mul.w	r3, r2, r3
 8004342:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8004344:	4b11      	ldr	r3, [pc, #68]	@ (800438c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800434c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004350:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	fa93 f3a3 	rbit	r3, r3
 8004358:	603b      	str	r3, [r7, #0]
  return(result);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	fab3 f383 	clz	r3, r3
 8004360:	fa22 f303 	lsr.w	r3, r2, r3
 8004364:	3301      	adds	r3, #1
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 800436a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004372:	623b      	str	r3, [r7, #32]
      break;
 8004374:	e002      	b.n	800437c <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004376:	4b06      	ldr	r3, [pc, #24]	@ (8004390 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004378:	623b      	str	r3, [r7, #32]
      break;
 800437a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800437c:	6a3b      	ldr	r3, [r7, #32]
}
 800437e:	4618      	mov	r0, r3
 8004380:	372c      	adds	r7, #44	@ 0x2c
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40023800 	.word	0x40023800
 8004390:	00f42400 	.word	0x00f42400
 8004394:	017d7840 	.word	0x017d7840

08004398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004398:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80043d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800439c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800439e:	e003      	b.n	80043a8 <LoopCopyDataInit>

080043a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80043a0:	4b0c      	ldr	r3, [pc, #48]	@ (80043d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80043a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80043a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80043a6:	3104      	adds	r1, #4

080043a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80043a8:	480b      	ldr	r0, [pc, #44]	@ (80043d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80043aa:	4b0c      	ldr	r3, [pc, #48]	@ (80043dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80043ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80043ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80043b0:	d3f6      	bcc.n	80043a0 <CopyDataInit>
  ldr  r2, =_sbss
 80043b2:	4a0b      	ldr	r2, [pc, #44]	@ (80043e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80043b4:	e002      	b.n	80043bc <LoopFillZerobss>

080043b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80043b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80043b8:	f842 3b04 	str.w	r3, [r2], #4

080043bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80043bc:	4b09      	ldr	r3, [pc, #36]	@ (80043e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80043be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80043c0:	d3f9      	bcc.n	80043b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043c2:	f000 f813 	bl	80043ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80043c6:	f000 f84f 	bl	8004468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043ca:	f7fb ffb3 	bl	8000334 <main>
  bx  lr    
 80043ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80043d4:	08004564 	.word	0x08004564
  ldr  r0, =_sdata
 80043d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80043dc:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80043e0:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 80043e4:	20001664 	.word	0x20001664

080043e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043e8:	e7fe      	b.n	80043e8 <ADC_IRQHandler>
	...

080043ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043f0:	4b16      	ldr	r3, [pc, #88]	@ (800444c <SystemInit+0x60>)
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f6:	4a15      	ldr	r2, [pc, #84]	@ (800444c <SystemInit+0x60>)
 80043f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004400:	4b13      	ldr	r3, [pc, #76]	@ (8004450 <SystemInit+0x64>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a12      	ldr	r2, [pc, #72]	@ (8004450 <SystemInit+0x64>)
 8004406:	f043 0301 	orr.w	r3, r3, #1
 800440a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800440c:	4b10      	ldr	r3, [pc, #64]	@ (8004450 <SystemInit+0x64>)
 800440e:	2200      	movs	r2, #0
 8004410:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004412:	4b0f      	ldr	r3, [pc, #60]	@ (8004450 <SystemInit+0x64>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a0e      	ldr	r2, [pc, #56]	@ (8004450 <SystemInit+0x64>)
 8004418:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 800441c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004420:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004422:	4b0b      	ldr	r3, [pc, #44]	@ (8004450 <SystemInit+0x64>)
 8004424:	4a0b      	ldr	r2, [pc, #44]	@ (8004454 <SystemInit+0x68>)
 8004426:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004428:	4b09      	ldr	r3, [pc, #36]	@ (8004450 <SystemInit+0x64>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a08      	ldr	r2, [pc, #32]	@ (8004450 <SystemInit+0x64>)
 800442e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004432:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004434:	4b06      	ldr	r3, [pc, #24]	@ (8004450 <SystemInit+0x64>)
 8004436:	2200      	movs	r2, #0
 8004438:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800443a:	4b04      	ldr	r3, [pc, #16]	@ (800444c <SystemInit+0x60>)
 800443c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004440:	609a      	str	r2, [r3, #8]
#endif
}
 8004442:	bf00      	nop
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	e000ed00 	.word	0xe000ed00
 8004450:	40023800 	.word	0x40023800
 8004454:	24003010 	.word	0x24003010

08004458 <memset>:
 8004458:	4402      	add	r2, r0
 800445a:	4603      	mov	r3, r0
 800445c:	4293      	cmp	r3, r2
 800445e:	d100      	bne.n	8004462 <memset+0xa>
 8004460:	4770      	bx	lr
 8004462:	f803 1b01 	strb.w	r1, [r3], #1
 8004466:	e7f9      	b.n	800445c <memset+0x4>

08004468 <__libc_init_array>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	4d0d      	ldr	r5, [pc, #52]	@ (80044a0 <__libc_init_array+0x38>)
 800446c:	4c0d      	ldr	r4, [pc, #52]	@ (80044a4 <__libc_init_array+0x3c>)
 800446e:	1b64      	subs	r4, r4, r5
 8004470:	10a4      	asrs	r4, r4, #2
 8004472:	2600      	movs	r6, #0
 8004474:	42a6      	cmp	r6, r4
 8004476:	d109      	bne.n	800448c <__libc_init_array+0x24>
 8004478:	4d0b      	ldr	r5, [pc, #44]	@ (80044a8 <__libc_init_array+0x40>)
 800447a:	4c0c      	ldr	r4, [pc, #48]	@ (80044ac <__libc_init_array+0x44>)
 800447c:	f000 f818 	bl	80044b0 <_init>
 8004480:	1b64      	subs	r4, r4, r5
 8004482:	10a4      	asrs	r4, r4, #2
 8004484:	2600      	movs	r6, #0
 8004486:	42a6      	cmp	r6, r4
 8004488:	d105      	bne.n	8004496 <__libc_init_array+0x2e>
 800448a:	bd70      	pop	{r4, r5, r6, pc}
 800448c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004490:	4798      	blx	r3
 8004492:	3601      	adds	r6, #1
 8004494:	e7ee      	b.n	8004474 <__libc_init_array+0xc>
 8004496:	f855 3b04 	ldr.w	r3, [r5], #4
 800449a:	4798      	blx	r3
 800449c:	3601      	adds	r6, #1
 800449e:	e7f2      	b.n	8004486 <__libc_init_array+0x1e>
 80044a0:	0800455c 	.word	0x0800455c
 80044a4:	0800455c 	.word	0x0800455c
 80044a8:	0800455c 	.word	0x0800455c
 80044ac:	08004560 	.word	0x08004560

080044b0 <_init>:
 80044b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b2:	bf00      	nop
 80044b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b6:	bc08      	pop	{r3}
 80044b8:	469e      	mov	lr, r3
 80044ba:	4770      	bx	lr

080044bc <_fini>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	bf00      	nop
 80044c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c2:	bc08      	pop	{r3}
 80044c4:	469e      	mov	lr, r3
 80044c6:	4770      	bx	lr
